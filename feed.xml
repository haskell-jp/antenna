<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Haskell Antenna</title><id>https://haskell.jp/antenna/feed.xml</id><updated>2019-12-21T21:24:23+09:00</updated><link href="https://haskell.jp/antenna"/><entry><id>https://ccvanishing.hateblo.jp/entry/2019/12/21/212423</id><title type="text">OpenShift.run 2019 で Kubernetes のスケジューリングについて話してきました</title><updated>2019-12-21T21:24:23+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/12/21/212423"/><summary type="html">先日行われた OpenShift コミュニティのイベント OpenShift.run 2019 にて、Kubernetes Scheduler とその関連ツールについて講演してきました。公募 CFP 枠です。 OpenShift のイベントでありながら、OpenShift についてはまったく触れずひたすら Kubernetes の内部実装を解説する異色の登壇でした。実際、40 分枠の講演の中で（RedHat 社以外も含め）ベンダニュートラルな立場で登壇したのは自分だけだったようです。これは私見ですが、逆に言えばそういう内容でも CFP 採択されているというのは、運営側も「単なるマーケティングイ…</summary></entry><entry><id>https://qiita.com/toru0408/items/6bedee118ba08ea2c0b2</id><title type="text">Haskell+LLVM構成で作る自作コンパイラ</title><updated>2019-12-21T17:38:56+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/toru0408/items/6bedee118ba08ea2c0b2"/></entry><entry><id>https://qiita.com/mod_poppo/items/1867d06f8a9903441e3c</id><title type="text">独断と偏見で語るGHCのderiving系拡張</title><updated>2019-12-21T14:32:48+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mod_poppo/items/1867d06f8a9903441e3c"/></entry><entry><id>https://qiita.com/mod_poppo/items/b168b208ea3776676b1f</id><title type="text">抽象型クラスで型クラスの変更の非互換性を緩和する</title><updated>2019-12-20T20:36:03+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/mod_poppo/items/b168b208ea3776676b1f"/></entry><entry><id>https://qiita.com/junjihashimoto@github/items/62eb9d2dc96569312038</id><title type="text">Inline-c：C++のネームスペースやテンプレートの対応について</title><updated>2019-12-20T14:16:07+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/junjihashimoto@github/items/62eb9d2dc96569312038"/></entry><entry><id>https://qiita.com/YoshikuniJujo/items/e9639712a49ac0af2a9a</id><title type="text">STMとReal-Time Queueを利用したマルチスレッドズンドコキヨシ</title><updated>2019-12-19T07:00:15+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/YoshikuniJujo/items/e9639712a49ac0af2a9a"/></entry><entry><id>https://qiita.com/inatatsu_csg/items/b035c76ec6fe1fa0ed8a</id><title type="text">Haskellで逆ポーランド記法の計算機を作る</title><updated>2019-12-17T16:40:19+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/inatatsu_csg/items/b035c76ec6fe1fa0ed8a"/></entry><entry><id>https://qiita.com/Nipper1357/items/a5195dd8bbc8873307c8</id><title type="text">Haskell初心者の備忘録</title><updated>2019-12-17T16:20:00+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Nipper1357/items/a5195dd8bbc8873307c8"/></entry><entry><id>https://qiita.com/inatatsu_csg/items/d40e79021750c7aae8ea</id><title type="text">Haskellとレコード構文でゲッターを実装する</title><updated>2019-12-16T22:54:26+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/inatatsu_csg/items/d40e79021750c7aae8ea"/></entry><entry><id>https://qiita.com/inatatsu_csg/items/4167564ccc37d9f89113</id><title type="text">型シノニムでString型に命を吹き込む</title><updated>2019-12-16T22:39:34+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/inatatsu_csg/items/4167564ccc37d9f89113"/></entry><entry><id>https://qiita.com/tnagao7/items/ab0135619d0584dc6cb0</id><title type="text">Haskell の 3 つのバナナ</title><updated>2019-12-16T20:39:26+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/tnagao7/items/ab0135619d0584dc6cb0"/></entry><entry><id>https://qiita.com/inatatsu_csg/items/33092646fcd5d576fb7e</id><title type="text">Haskellで逆ポーランド記法の計算機をつくる　その2</title><updated>2019-12-14T23:52:58+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/inatatsu_csg/items/33092646fcd5d576fb7e"/></entry><entry><id>https://qiita.com/acple@github/items/082f33f671788614f974</id><title type="text">C# で学ぶ関数指向概念超入門(?) / 実際に輸入してみた実験の記録</title><updated>2019-12-13T10:51:07+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/acple@github/items/082f33f671788614f974"/></entry><entry><id>https://qiita.com/YoshikuniJujo/items/ac628ff923b9092c8d32</id><title type="text">Knuth-Morris-PrattアルゴリズムのHaskellでの実装の解説</title><updated>2019-12-13T09:13:13+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/YoshikuniJujo/items/ac628ff923b9092c8d32"/></entry><entry><id>https://qiita.com/inatatsu_csg/items/99f4b97274cf2a6ad186</id><title type="text">Haskellの直和型とBool型のおはなし</title><updated>2019-12-11T23:09:26+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/inatatsu_csg/items/99f4b97274cf2a6ad186"/></entry><entry><id>https://qiita.com/flow_6852/items/e53e4b082d1480b0fc5c</id><title type="text">Haskellでクソリプを送ったり消したりする</title><updated>2019-12-10T08:00:57+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/flow_6852/items/e53e4b082d1480b0fc5c"/></entry><entry><id>https://qiita.com/ruicc/items/4db532d33e648fca5b99</id><title type="text">サンクの構造を見る</title><updated>2019-12-10T07:01:09+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/ruicc/items/4db532d33e648fca5b99"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-10-tapl-with-elm-part3.html</id><title type="text">Elm で作る TaPL のラムダ計算（その３）</title><updated>2019-12-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-10-tapl-with-elm-part3.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は「&lt;a href=&#34;https://adventar.org/calendars/4212&#34;&gt;IGGG Advent Calendar 2019&lt;/a&gt;」の10日目の記事です．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その３）． &lt;a href=&#34;https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html&#34;&gt;その１&lt;/a&gt;と&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html&#34;&gt;その２&lt;/a&gt;はこちら．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4章 算術式のML実装&lt;/li&gt;
&lt;li&gt;第7章 ラムダ計算の ML 実装&lt;/li&gt;
&lt;li&gt;第10章 単純型のML実装 (本記事はココ)
&lt;ul&gt;
&lt;li&gt;7章のを型付きラムダ計算にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第17章 部分型付けの ML 実装&lt;/li&gt;
&lt;li&gt;第25章 System F の ML 実装
&lt;ul&gt;
&lt;li&gt;最後に型の多相性を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装は全て下記のリポジトリにあげています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/ELaMbda&#34;&gt;matsubara0507/ELaMbda - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，今まで同様に&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap10&#34;&gt;Web ブラウザから遊べるようになってます&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:8000/docs/index.html?chap=chap10&amp;amp;exp=(\x%20:%20Bool%20.%20if%20x%20then%20x%20else%20(\f%20:%20Bool%20-%3E%20Bool%20-%3E%20Bool%20.%20f%20x%20x)%20(\x%20:%20Bool%20.%20\y%20:%20Bool%20.%20y))%20(if%20true%20then%20false%20else%20true)&#34;&gt;&lt;img src=&#34;/assets/tapl-with-elm/chap10.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;第10章-単純型の-ml-実装&#34;&gt;第10章 単純型の ML 実装&lt;/h2&gt;
&lt;p&gt;さて，いよいよみんな大好き「型」の登場だ． 10章は少し面白くて，4章で実装した算術式の真偽値に関する部分と7章の型なしラムダ計算を組み合わせて，更にそれに型をのせるプログラミング言語を実装する． つまり，今までの実装をちゃんとやっていれば割とサクッとできています．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;なお，同期各位は全然やらなかったせいか10章を5週ぐらいやっている笑．&lt;/p&gt;
&lt;h3 id=&#34;構文規則&#34;&gt;構文規則&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;t := x       [変数]&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;   | \x:T.t  [ラムダ抽象]&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;   | t t     [関数適用]&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;   | true&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;   | false&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;   | if t then t else t&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;v := \x:T.t&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;   | true&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;   | false&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;T := Bool    [真偽値型]&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;   | T -&amp;gt; T  [関数型]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ラムダ抽象には型注釈(&lt;code&gt;:T&lt;/code&gt; の部分)がある． なんで付けるのかとかは9章に書いてあるのでぜひ TaPL を買って読んでください(おい)． これを Elm の型として実装する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- Arrow の Arr ね&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NameBind&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型の型 &lt;code&gt;Ty&lt;/code&gt; 以外は，4章と7章の &lt;code&gt;Term&lt;/code&gt; や &lt;code&gt;isval&lt;/code&gt; を合体させているだけだ．&lt;/p&gt;
&lt;h3 id=&#34;評価規則&#34;&gt;評価規則&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;// 7章の評価規則&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt; t1 =&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt; t1 t2 =&amp;gt; t1&amp;#39; t2&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt; t2 =&amp;gt; t2&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt; v1 t2 =&amp;gt; v1 t2&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt; (\x:T.t12) v2 -&amp;gt; [x|-&amp;gt; v2]t12&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;// 4章の評価規則&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt; if true then t2 else t3 =&amp;gt; t2&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt; if false then t2 else t3 =&amp;gt; t3&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;-------------------------------------------------&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt; if t1 then t2 else t3 =&amp;gt; if t1&amp;#39; then t2 else t3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;評価規則も同様に型注釈の構文が追加されただけでほとんど変わらない． 変わらないということはすなわち，実行時(評価)には型の有無は影響しないということだ． 構文規則同様，4章と7章の実装を組み合わせることで実装が終わる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- あらゆる TmAbs のパターンマッチに Ty のパラメーターを追加する必要はある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;)) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-27&#34;&gt;&lt;a href=&#34;#cb4-27&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-28&#34;&gt;&lt;a href=&#34;#cb4-28&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;t1_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-29&#34;&gt;&lt;a href=&#34;#cb4-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-30&#34;&gt;&lt;a href=&#34;#cb4-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-31&#34;&gt;&lt;a href=&#34;#cb4-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-32&#34;&gt;&lt;a href=&#34;#cb4-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-33&#34;&gt;&lt;a href=&#34;#cb4-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- t に s を代入する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-34&#34;&gt;&lt;a href=&#34;#cb4-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-35&#34;&gt;&lt;a href=&#34;#cb4-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;型付け規則&#34;&gt;型付け規則&lt;/h3&gt;
&lt;p&gt;ここからが新しい． いわゆる型検査のことだ． TaPL では「正しく型付けされた項はおかしくならない」という性質(安全性・健全性ともいう)について議論されている(8章で)． 例えば，これから定義する型検査が通った項(&lt;code&gt;Term&lt;/code&gt;)は &lt;code&gt;eval&lt;/code&gt; 関数を適用しても無限ループなどにはならない． さて，そのための型付け規則は次のようになっている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;// 真偽値の型付け規則&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt; true : Bool&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt; false : Bool&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt; t1 : Bool    t2 : T    t3 : T&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;-------------------------------&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt; if t1 then t2 else t3 : T&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;// 単純ラムダ計算の型付け規則&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt; x : T ∈ Γ&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;-----------&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt; Γ ⊢ x : T&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt; Γ, x : T1 ⊢ t2 : T2&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;-----------------------------&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt; Γ ⊢ \x : T1 . t2 : T1 -&amp;gt; T2&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt; Γ ⊢ t1 : T11 -&amp;gt; T12    Γ ⊢ t2 : T11&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;-------------------------------------&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt; Γ ⊢ t1 t2 : T12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで新しく出てくる &lt;code&gt;Γ&lt;/code&gt; は型環境と言い，変数と型の対応関係を線形リストのような感じに保持している． &lt;code&gt;Γ ⊢ t : T&lt;/code&gt; というのは「型環境 &lt;code&gt;Γ&lt;/code&gt; のもと項 &lt;code&gt;t&lt;/code&gt; は型 &lt;code&gt;T&lt;/code&gt; に型付け可能」という風に読める(たぶん)． まぁ実装してみればわかる(ほんとか？):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 型環境には Context を再利用する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NameBind&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VarBind&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 変数の型を保持&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 項 t の型が最終的に導出できれば型付け可能ということになる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- Context から型情報を引っ張ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;getTypeFromContext&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;co&#34;&gt;-- Context に 変数と型の対応を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;addbinding&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;VarBind&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- ラムダ抽象は中の項 t2 が型付け可能である必要がある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-24&#34;&gt;&lt;a href=&#34;#cb6-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-25&#34;&gt;&lt;a href=&#34;#cb6-25&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-26&#34;&gt;&lt;a href=&#34;#cb6-26&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty11&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty12&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-27&#34;&gt;&lt;a href=&#34;#cb6-27&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- 関数適用の場合は引数の型 ty11 と適用する項の型 ty2 が同じである必要がある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-28&#34;&gt;&lt;a href=&#34;#cb6-28&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty11&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-29&#34;&gt;&lt;a href=&#34;#cb6-29&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty12&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-30&#34;&gt;&lt;a href=&#34;#cb6-30&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-31&#34;&gt;&lt;a href=&#34;#cb6-31&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-32&#34;&gt;&lt;a href=&#34;#cb6-32&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-33&#34;&gt;&lt;a href=&#34;#cb6-33&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-34&#34;&gt;&lt;a href=&#34;#cb6-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-35&#34;&gt;&lt;a href=&#34;#cb6-35&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-36&#34;&gt;&lt;a href=&#34;#cb6-36&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-37&#34;&gt;&lt;a href=&#34;#cb6-37&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-38&#34;&gt;&lt;a href=&#34;#cb6-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-39&#34;&gt;&lt;a href=&#34;#cb6-39&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-40&#34;&gt;&lt;a href=&#34;#cb6-40&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-41&#34;&gt;&lt;a href=&#34;#cb6-41&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-42&#34;&gt;&lt;a href=&#34;#cb6-42&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-43&#34;&gt;&lt;a href=&#34;#cb6-43&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty3&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-44&#34;&gt;&lt;a href=&#34;#cb6-44&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- if-then-else の場合は t2 と t3 の型が同じである必要がある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-45&#34;&gt;&lt;a href=&#34;#cb6-45&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty3&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-46&#34;&gt;&lt;a href=&#34;#cb6-46&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-47&#34;&gt;&lt;a href=&#34;#cb6-47&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-48&#34;&gt;&lt;a href=&#34;#cb6-48&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-49&#34;&gt;&lt;a href=&#34;#cb6-49&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-50&#34;&gt;&lt;a href=&#34;#cb6-50&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-51&#34;&gt;&lt;a href=&#34;#cb6-51&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-52&#34;&gt;&lt;a href=&#34;#cb6-52&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getTypeFromContext&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-53&#34;&gt;&lt;a href=&#34;#cb6-53&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getTypeFromContext&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-54&#34;&gt;&lt;a href=&#34;#cb6-54&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;getbinding&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;idx&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-55&#34;&gt;&lt;a href=&#34;#cb6-55&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;VarBind&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-56&#34;&gt;&lt;a href=&#34;#cb6-56&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-57&#34;&gt;&lt;a href=&#34;#cb6-57&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-58&#34;&gt;&lt;a href=&#34;#cb6-58&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-59&#34;&gt;&lt;a href=&#34;#cb6-59&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-60&#34;&gt;&lt;a href=&#34;#cb6-60&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-61&#34;&gt;&lt;a href=&#34;#cb6-61&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getbinding&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-62&#34;&gt;&lt;a href=&#34;#cb6-62&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;getbinding&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-63&#34;&gt;&lt;a href=&#34;#cb6-63&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-64&#34;&gt;&lt;a href=&#34;#cb6-64&#34;&gt;&lt;/a&gt;        ( []&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-65&#34;&gt;&lt;a href=&#34;#cb6-65&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-66&#34;&gt;&lt;a href=&#34;#cb6-66&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-67&#34;&gt;&lt;a href=&#34;#cb6-67&#34;&gt;&lt;/a&gt;        ( ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;bind&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-68&#34;&gt;&lt;a href=&#34;#cb6-68&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;bind&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-69&#34;&gt;&lt;a href=&#34;#cb6-69&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-70&#34;&gt;&lt;a href=&#34;#cb6-70&#34;&gt;&lt;/a&gt;        ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-71&#34;&gt;&lt;a href=&#34;#cb6-71&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;getbinding&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;next&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-72&#34;&gt;&lt;a href=&#34;#cb6-72&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-73&#34;&gt;&lt;a href=&#34;#cb6-73&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;addbinding&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-74&#34;&gt;&lt;a href=&#34;#cb6-74&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;addbinding&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;bind&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-75&#34;&gt;&lt;a href=&#34;#cb6-75&#34;&gt;&lt;/a&gt;    ( &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;bind&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (\x : (Bool -&amp;gt; Bool) . (\f : (Bool -&amp;gt; Bool -&amp;gt; Bool) . f x)) (\x : Bool . x)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (\x . x x) (\x . x x) はうまく型付けできない&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))))&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;文字列に変換&#34;&gt;文字列に変換&lt;/h3&gt;
&lt;p&gt;基本的に4・7章の定義を利用すれば良いのだが，型注釈ができるようになったので型も変換できるようにする:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; [] &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;dropIfStartsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 最初と最後のカッコを消している&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;dropIfEndsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 重複しない変数名を生成して Context に積む&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;                (\&lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;(\\&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;printty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;. &amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;                (&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- あとは同じ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printty&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;printty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;printty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;st&#34;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-28&#34;&gt;&lt;a href=&#34;#cb8-28&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-29&#34;&gt;&lt;a href=&#34;#cb8-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Context から重複する変数名を探し &amp;#39; を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-30&#34;&gt;&lt;a href=&#34;#cb8-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb8-31&#34;&gt;&lt;a href=&#34;#cb8-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試す:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;(\\x : (Bool -&amp;gt; Bool). (\\f : ((Bool -&amp;gt; Bool) -&amp;gt; Bool). (f x))) (\\x : Bool. x)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;パーサー&#34;&gt;パーサー&lt;/h3&gt;
&lt;p&gt;これも同様に4・7章の実装を合わせるだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-20&#34;&gt;&lt;a href=&#34;#cb10-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-21&#34;&gt;&lt;a href=&#34;#cb10-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-22&#34;&gt;&lt;a href=&#34;#cb10-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-23&#34;&gt;&lt;a href=&#34;#cb10-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-24&#34;&gt;&lt;a href=&#34;#cb10-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-25&#34;&gt;&lt;a href=&#34;#cb10-25&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-26&#34;&gt;&lt;a href=&#34;#cb10-26&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;parParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 括弧のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-27&#34;&gt;&lt;a href=&#34;#cb10-27&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- ラムダ抽象のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-28&#34;&gt;&lt;a href=&#34;#cb10-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt;     &lt;span class=&#34;co&#34;&gt;-- ture/false のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-29&#34;&gt;&lt;a href=&#34;#cb10-29&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ifParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- if-then-else のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-30&#34;&gt;&lt;a href=&#34;#cb10-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 変数のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-31&#34;&gt;&lt;a href=&#34;#cb10-31&#34;&gt;&lt;/a&gt;        ] &lt;span class=&#34;co&#34;&gt;-- 関数適用のパーサーだけ分けてるのは左再帰対策(その２参照)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-32&#34;&gt;&lt;a href=&#34;#cb10-32&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;appParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;言わずもがな，型注釈のパースをする必要があるので，&lt;code&gt;absParser&lt;/code&gt; はその２のと若干異なる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;pair&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varStrParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ここから&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tyParser&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- ここまでが追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;absParserN&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 型のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tyParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tyParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;-- これも左再帰対策(その２参照)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tyArrParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 関数型のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 関数型 T-&amp;gt;T は右結合(T-&amp;gt;T-&amp;gt;T は T-&amp;gt;(T-&amp;gt;T) となる)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tyArrParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tyArrParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TyArr&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keyword&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-33&#34;&gt;&lt;a href=&#34;#cb11-33&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-34&#34;&gt;&lt;a href=&#34;#cb11-34&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tyParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-35&#34;&gt;&lt;a href=&#34;#cb11-35&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-36&#34;&gt;&lt;a href=&#34;#cb11-36&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;(\\x : Bool . if x then x else (\\f : Bool -&amp;gt; Bool -&amp;gt; Bool . f x x) (\\x : Bool . \\y : Bool . y)) (if true then false else true)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toMaybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; [] &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)) &lt;span class=&#34;co&#34;&gt;-- 型検査&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; [])&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完璧だ．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-spa&#34;&gt;おまけ: SPA&lt;/h2&gt;
&lt;p&gt;前回整理したので基本的に足していくだけだ． ただし，型検査を &lt;code&gt;Calculus&lt;/code&gt; に加える必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;logs&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-12&#34;&gt;&lt;a href=&#34;#cb13-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-13&#34;&gt;&lt;a href=&#34;#cb13-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;typecheck&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-14&#34;&gt;&lt;a href=&#34;#cb13-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-15&#34;&gt;&lt;a href=&#34;#cb13-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;chap10&lt;/code&gt; の定義も追加するだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Never&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Never&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;st&#34;&gt;&amp;quot;chap4&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;st&#34;&gt;&amp;quot;chap7&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;-- 追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;st&#34;&gt;&amp;quot;chap10&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;                { &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;logs&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;syntax&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;syntax&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;typeof&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Chap0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;typecheck&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはこれらを &lt;code&gt;Main&lt;/code&gt; でいい感じに呼び出すだけ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;次回はいつになることやら．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://qiita.com/lotz/items/a69587882be6e987de4e</id><title type="text">挿入ソートと選択ソートは双対</title><updated>2019-12-09T23:54:36+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/lotz/items/a69587882be6e987de4e"/></entry><entry><id>https://qiita.com/smr/items/4bc9a993b94d30ff28d4</id><title type="text">設定記述言語Dhallでtopological sortingを実装する</title><updated>2019-12-09T10:11:27+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/smr/items/4bc9a993b94d30ff28d4"/></entry><entry><id>https://qiita.com/nekoGorilla/items/3c351b89659eae68499b</id><title type="text">Haskell個人メモ【型】</title><updated>2019-12-09T00:46:32+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/nekoGorilla/items/3c351b89659eae68499b"/></entry><entry><id>https://qiita.com/Hexirp/items/3b46fe38bed365124e8d</id><title type="text">Haskell で簡単な CLI ツールを作ってみる</title><updated>2019-12-08T22:43:22+09:00</updated><author><name>Qiita</name></author><link href="https://qiita.com/Hexirp/items/3b46fe38bed365124e8d"/></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html</id><title type="text">久しぶりに thank_you_stars をビルドする</title><updated>2019-12-08T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は「&lt;a href=&#34;https://qiita.com/advent-calendar/2019/elixir&#34;&gt;Elixir Advent Calendar 2019&lt;/a&gt;」の8日目の記事です．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;学生の頃アルバイトした時(2年前)に初めて Elixir を触って，その集大成として作った(嘘) OSS をヒッサビッサにビルドチャレンジしてみたという話です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSS: &lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars&#34;&gt;matsubara0507/thank-you-stars&lt;/a&gt; (elixir バージョン)&lt;/li&gt;
&lt;li&gt;当時書いたブログ記事: &lt;a href=&#34;https://matsubara0507.github.io/posts/2017-10-01-create-thank-you-stars-ver-elixir.html&#34;&gt;Elixir ライブラリにスターを送るツール thank-you-stars を作ってみました - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;思い出す&#34;&gt;思い出す&lt;/h2&gt;
&lt;p&gt;そもそもどういうプログラムだったかってのは覚えてる． 当時何故か流行ってた，自身のプロジェクトの依存ライブラリに GitHub Star を送る CLI ツールの Elixir 版だ．&lt;/p&gt;
&lt;p&gt;で，こいつはどの環境でビルドしていたのか:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elixir のバージョンは多分 1.4 (ref. &lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/blob/v0.1.0/mix.exs&#34;&gt;mix.ex&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Erlang/OTP のバージョン: 多分 19.x？ (手元にあったのがそれ)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依存パッケージのバージョンを見比べてみてもめっちゃ古いのがわかる． 2年ってすごいんだなぁ．&lt;/p&gt;
&lt;h2 id=&#34;最新バージョンに対応する&#34;&gt;最新バージョンに対応する&lt;/h2&gt;
&lt;p&gt;まずはここから．&lt;/p&gt;
&lt;h3 id=&#34;最新-elixir-erlangotp-のインストール&#34;&gt;最新 Elixir &amp;amp; Erlang/OTP のインストール&lt;/h3&gt;
&lt;p&gt;Elixir は長いこと触ってないので，そもそも手元に最新の環境がない． 昔はどうやってたかな，と遠い記憶を辿って見たがおそらく &lt;code&gt;exenv&lt;/code&gt; と &lt;code&gt;erlenv&lt;/code&gt; を使っていたはず:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/exenv/exenv&#34;&gt;exenv/exenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/talentdeficit/erlenv&#34;&gt;talentdeficit/erlenv&lt;/a&gt; (いつのまにかアーカイブになってるのね)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれ別の Elixir や Erlang/OTP を取ってくるには &lt;a href=&#34;https://github.com/mururu/elixir-build&#34;&gt;elixir-build&lt;/a&gt; や &lt;a href=&#34;https://github.com/matsubara0507/erlang-build&#34;&gt;erlang-build&lt;/a&gt; を使う． 試しに手元でやってみたら，どうやら v20.x 以降の Erlang/OTP をビルドするには OpenSSL 1.1 を使わないといけないのだが，手元の OS が古くてできない（このためだけに更新したくない）． そして，最新の Elixir を使うには Erlang/OTP の v20.x 以降が必要っぽい． 詰んだ（？）．&lt;/p&gt;
&lt;p&gt;もちろん，今ならもっと他の方法でいろんなバージョンの Elixir や Erlang/OTP をイストールする方法はあるだろう． しかし，できれば手元の環境を汚したくない． ということで Docker に甘えた（ぇ&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm -v `pwd`:/work -it elixir:1.9.4 /bin/bash -c &amp;quot;cd /work &amp;amp;&amp;amp; mix test&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;依存パケッケージの更新&#34;&gt;依存パケッケージの更新&lt;/h3&gt;
&lt;p&gt;とりあえず，Hex で最新のバージョンを取ってきて &lt;code&gt;mix.exs&lt;/code&gt; を書き換えた． もちろん，すんなりビルドはできない． しかし，珍しくちゃんとテストを書いていたので，テストしつつ最新のバージョンに&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/commit/1574a16dec5ea5c7e8a4e39dbae4bf4729e8cfb6&#34;&gt;合わせていく&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CrowdHailer/OK/pull/57&#34;&gt;&lt;code&gt;OK.with&lt;/code&gt; は使えなくなっているので利用しない書き方に変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/edgurgel/tentacat/pull/132&#34;&gt;&lt;code&gt;Tentacat.put&lt;/code&gt; の返り値のタプルサイズが変わっていた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/devinus/poison/commit/a4208a6252f4e58fbcc8d9fd2f4f64c99e974cc8&#34;&gt;&lt;code&gt;Poison.decode&lt;/code&gt; のエラーの返り値のタプルサイズが変わった&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elixir-lang/elixir/pull/7838&#34;&gt;&lt;code&gt;[ &amp;quot;hoge&amp;quot;: 123 ]&lt;/code&gt; こういう形式のキーワードハッシュは警告が出るようになった&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パターンマッチしてたタプルのサイズが変わるのはきつい．&lt;/p&gt;
&lt;h3 id=&#34;mix-format&#34;&gt;mix format&lt;/h3&gt;
&lt;p&gt;Elixir 1.6 からフォーマッターがエコシステムに入った． なので &lt;code&gt;mix format&lt;/code&gt; をかけてみる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix format&lt;/code&gt; をかけるには設定ファイル &lt;code&gt;.formatter.exs&lt;/code&gt; を置かないと動作しないようだ（珍しい）． なので，公式ドキュメントにあったものをそのまま&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/commit/700910b927ff1abbd5701a177c83e0671ddffe29&#34;&gt;コピペして &lt;code&gt;mix format&lt;/code&gt; をかけた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;github-actions&#34;&gt;GitHub Actions&lt;/h2&gt;
&lt;p&gt;最近流行りだからね．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/pull/1&#34;&gt;Add GitHub Actions config by matsubara0507 · Pull Request #1 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elixir や Erlang/OTP のセットアップには &lt;a href=&#34;https://github.com/actions/setup-elixir&#34;&gt;&lt;code&gt;actions/setup-elixir&lt;/code&gt;&lt;/a&gt; を使う． 色々と試して，最終的なジョブの設定はこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# ほんとんど actions/elixir-setup の例のまんま&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-16.04&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;otp&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;21.x&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 22.x&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;co&#34;&gt;      # 20.x は ubuntu 16,18 には無い様子&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;elixir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;1.8.x&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; 1.9.x&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fail-fast&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;co&#34;&gt;         # マトリックスのどれかのジョブが落ちても他のジョブは実行をやめない&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v1.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/setup-elixir@v1.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;otp-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{matrix.otp}}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;elixir-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{matrix.elixir}}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mix deps.get&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mix test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mix.exs&lt;/code&gt; でどうやって複数の Elixir のバージョンを許容するんだ？と結構調べたけど，単純にボトムのバージョンを &lt;code&gt;elixir: ~&amp;gt; ...&lt;/code&gt; で指定すればいいだけだった（普通 &lt;code&gt;&amp;gt;=&lt;/code&gt; じゃ無いの．．．）．&lt;/p&gt;
&lt;p&gt;キャッシュの導入も考えたが，たかが数分に入れてもしょうがないなってなってやめた．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-依存パケージを減らす大作戦&#34;&gt;おまけ: 依存パケージを減らす大作戦&lt;/h2&gt;
&lt;p&gt;依存パッケージがなくなると &lt;code&gt;mix archive.install&lt;/code&gt; で入れることができるはず． なので，もともと依存パッケージを無くしてみたかった． 今回，バージョンアップを追うのも大変だったし，せっかくのなので可能な限り減らしてみた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/pull/2&#34;&gt;Remove OK library by matsubara0507 · Pull Request #2 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/pull/3&#34;&gt;Remove tentacat library by matsubara0507 · Pull Request #3 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/thank-you-stars/pull/4&#34;&gt;Remove poison library by matsubara0507 · Pull Request #4 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3/4 減らせました． 残るは鬼門 &lt;code&gt;httpoison&lt;/code&gt; だけ． 果たしてできるのか．&lt;/p&gt;
&lt;h3 id=&#34;vs.-ok&#34;&gt;vs. &lt;code&gt;ok&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ok&lt;/code&gt; パッケージはいわゆる &lt;code&gt;Either&lt;/code&gt; モナドだ． &lt;code&gt;{:ok, hoge} | {:error, fuga}&lt;/code&gt; のような型を簡単に扱うためのマクロを提供している．&lt;/p&gt;
&lt;p&gt;これらの型の場合，Elixir の特徴であるパイプ演算子をうまく連結できない． なので，Elm 流に &lt;code&gt;and_then&lt;/code&gt; 関数を用意して，それで賄うようにした:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# Result a -&amp;gt; (a -&amp;gt; Result b) -&amp;gt; Result b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# ただし Result a = {:ok, a} | {:error, e}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; and_then({&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, v}, f), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: f&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;(v)&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; and_then(err &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, _}, _), &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 使用例&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; star_package(package_name, client) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;    fetch_package_github_url(package_name)&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;star_github_package(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, client)) &lt;span class=&#34;co&#34;&gt;# ココ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, url} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Starred! &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;url&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, url} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Error    &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;url&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;vs.-tentacat&#34;&gt;vs. &lt;code&gt;tentacat&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;単純に HTTP リクエストの PUT を認証付きでしているだけなので，&lt;code&gt;httpoison&lt;/code&gt; に書き直した． まぁ面倒を後に丸投げてるだけだが笑&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; star_github_package(url, token) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;URI&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;parse(url)&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;get(&lt;span class=&#34;va&#34;&gt;:path&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;put_github_api(&lt;span class=&#34;st&#34;&gt;&amp;quot;user/starred&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, token))&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;()&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; and_then(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;map_get_with_ok(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;:status_code&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, &lt;span class=&#34;dv&#34;&gt;204&lt;/span&gt;} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, url} &lt;span class=&#34;co&#34;&gt;# もちろん返り値も変わる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;      _ &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; {&lt;span class=&#34;va&#34;&gt;:error&lt;/span&gt;, url}&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; put_github_api(path, token) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;    headers &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [{&lt;span class=&#34;st&#34;&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;token &lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;token&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;}]&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;HTTPoison&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(&lt;span class=&#34;st&#34;&gt;&amp;quot;https://api.github.com/&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;#{&lt;/span&gt;path&lt;span class=&#34;ot&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, headers)&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;vs.-poison&#34;&gt;vs. &lt;code&gt;poison&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;poison&lt;/code&gt; は JSON デコーダー・エンコーダーだ． GitHub トークンを設定(JSON)から取得したり，Hex から取得したライブラリの設定(JSON)をパースするのに使う．&lt;/p&gt;
&lt;p&gt;これを無くすにはどうするか．簡単ですね． &lt;strong&gt;JSON パーサーを自作すればいいのです&lt;/strong&gt;．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elixir&#34;&gt;&lt;code class=&#34;sourceCode elixir&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;defmodule&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;JSON&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;im&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;ThankYouStars&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;as:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# String をもらって JSON として Map や Bool，List などを返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;def&lt;/span&gt; decode(str) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;    match_value(%{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;trim(str), &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; %{}})&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;      {&lt;span class=&#34;va&#34;&gt;:ok&lt;/span&gt;, %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class=&#34;va&#34;&gt;result:&lt;/span&gt; result}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success(result)&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;      {_, %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; rest}} &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;failure(rest)&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value(stat) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;    trim_leading(stat)&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; match_value_body()&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;map(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class=&#34;op&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;# 無駄にパターンマッチとパイプを使ってみることにした(Elixir っぽい？)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;defp&lt;/span&gt; match_value_body(stat &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; %{&lt;span class=&#34;va&#34;&gt;rest:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(stat, &lt;span class=&#34;va&#34;&gt;:result&lt;/span&gt;, &lt;span class=&#34;cn&#34;&gt;true&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;put(&lt;span class=&#34;va&#34;&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;cn&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;success()&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JSON パーサーは比較的簡単だ(細かいところに目をつぶれば)． なんせ構文の定義が &lt;a href=&#34;https://www.json.org/json-en.html&#34;&gt;json.org&lt;/a&gt; というサイトに書いてあるから． また，テストスイートも &lt;a href=&#34;https://github.com/nst/JSONTestSuite&#34;&gt;nst/JSONTestSuite&lt;/a&gt; というところに置いてある．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;今回はガッっと一晩で雑に作ったので浮動小数点の &lt;code&gt;e&lt;/code&gt; 記法やユニコードのエスケープ記法 &lt;code&gt;\u&lt;/code&gt; なんかの実装は無視した（まぁ多分すぐできるけど）． また，Elixir ということで積極的にパターンマッチングとパイプを利用して実装している． 興味がある人は PR を見てください（汚いのでリファクタリングしたい）．&lt;/p&gt;
&lt;p&gt;もう少し細かい紹介は気が向いたらするやもしれない．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;httpoison&lt;/code&gt; も無くしたいなぁ．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html</id><title type="text">Elm で作る TaPL のラムダ計算（その２）</title><updated>2019-12-07T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は「&lt;a href=&#34;https://qiita.com/advent-calendar/2019/lang_dev&#34;&gt;言語実装 Advent Calendar 2019&lt;/a&gt;」の7日目の記事です．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その２）． &lt;a href=&#34;https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html&#34;&gt;その１&lt;/a&gt;はこちら．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4章 算術式のML実装&lt;/li&gt;
&lt;li&gt;第7章 ラムダ計算の ML 実装 (本記事はココ)
&lt;ul&gt;
&lt;li&gt;型無しラムダ計算を実装&lt;/li&gt;
&lt;li&gt;以降はこれを拡張していく(たしか)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第10章 単純型のML実装
&lt;ul&gt;
&lt;li&gt;7章のを型付きラムダ計算にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第17章 部分型付けの ML 実装&lt;/li&gt;
&lt;li&gt;第25章 System F の ML 実装
&lt;ul&gt;
&lt;li&gt;最後に型の多相性を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装は全て下記のリポジトリにあげています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/ELaMbda&#34;&gt;matsubara0507/ELaMbda - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，前回同様に&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap7&#34;&gt;Web ブラウザから遊べるようになってます&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap7&amp;amp;exp=(\x%20.%20x%20x)%20(\x%20.%20x%20x)&#34;&gt;&lt;img src=&#34;/assets/tapl-with-elm/chap7.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;第7章-ラムダ計算の-ml-実装&#34;&gt;第7章 ラムダ計算の ML 実装&lt;/h2&gt;
&lt;p&gt;さぁいよいよみんな大好き(型なし)ラムダ計算です． ちなみに，ラムダ計算の数理論理学的な議論は5章でしている．&lt;/p&gt;
&lt;h3 id=&#34;構文規則&#34;&gt;構文規則&lt;/h3&gt;
&lt;p&gt;構文規則はこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;t := x       [変数]&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;   | \x . t  [ラムダ抽象]&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;   | t t     [関数適用]&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;v := \x . t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんと前回の算術式より構文規則がシンプル． ラムダ計算というのは「関数」しかないプログラミング言語で，ラムダ抽象というのが最近の多くの言語で導入されている無名関数や関数オブジェクトと言われるものだ（たぶん）．&lt;/p&gt;
&lt;p&gt;まずはこれを Elm 上の型として定義する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 値はラムダ抽象だけ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 変数名を保持している（表示用）&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Binding の意味は現状まだない（次回以降ちゃんと使う）&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;　&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Binding&lt;/span&gt;　&lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NameBind&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;TmVar&lt;/code&gt; が少しキモ． 2つの &lt;code&gt;Int&lt;/code&gt; は変数が関数全体の中でどの位置にいるかを表している:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1つ目の Int は&lt;a href=&#34;https://en.wikipedia.org/wiki/De_Bruijn_index&#34;&gt;ドブラウン・インデックス&lt;/a&gt; (束縛されたラムダ抽象までの距離)&lt;/li&gt;
&lt;li&gt;2つ目の Int は一番外のラムダ抽象までの距離(深さ)&lt;/li&gt;
&lt;li&gt;e.g. &lt;code&gt;(\x. \f. f x) (\x. x)&lt;/code&gt; の場合は &lt;code&gt;TmApp (TmAbs &amp;quot;x&amp;quot; (TmAbs &amp;quot;f&amp;quot; (TmApp (TmVar 0 2) (TmVar 1 2)))) (TmAbs &amp;quot;x&amp;quot; (TmVar 0 1))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，&lt;code&gt;TmAbs String Term&lt;/code&gt; の文字列型は変数名で基本的に表示用．&lt;/p&gt;
&lt;h3 id=&#34;評価規則&#34;&gt;評価規則&lt;/h3&gt;
&lt;p&gt;評価規則も同様にシンプル:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt; t1 =&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt; t1 t2 =&amp;gt; t1&amp;#39; t2&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt; t2 =&amp;gt; t2&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt; v1 t2 =&amp;gt; v1 t2&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;(\x.t12) v2 -&amp;gt; [x|-&amp;gt; v2]t12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3つ目のが関数適用で，&lt;code&gt;[x|-&amp;gt; v2]t12&lt;/code&gt; 記法は &lt;code&gt;t12&lt;/code&gt; 内の変数 &lt;code&gt;x&lt;/code&gt; を全て &lt;code&gt;v2&lt;/code&gt; に置き換えるという意味である． ここで，&lt;code&gt;v2&lt;/code&gt; が値というのがキモだ． すなわち正格評価される．&lt;/p&gt;
&lt;p&gt;これをパターンマッチを使って実装すると次の通り:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 止まらない可能性があるから注意&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t12&lt;/span&gt;)) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;termSubstTop&lt;/code&gt; という新しい関数が出てきた． 変数を置き換える(代入する)上で重要なのは同じ変数名の変数が出てきたときに，それらを区別して〜〜ってのがあり，それをいい感じにやるための工夫が &lt;code&gt;TmVar&lt;/code&gt; の2つの &lt;code&gt;Int&lt;/code&gt; だ． この実装上の工夫は第6章で説明されているので，買って読んでください(おい)．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;で，&lt;code&gt;termSubstTop&lt;/code&gt; の実装はこんな感じ(本書にも全部書いてある):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- v2 と t12 を渡して [x|-&amp;gt;v2]t12 が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- termSubst 0 なので一番外の変数を置き換える&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 置き換えた後 -1 シフトしないといけない(一番外のラムダ抽象が剥がれるので)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 先に 1 だけシフトしてるのは代入後の s は -1 シフトして欲しくないから&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubstTop&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;termShift&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;termSubst&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;termShift&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 項 tt 中の j 番の変数へ項 s を代入 [j|-&amp;gt;s]t する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubst&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termSubst&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;co&#34;&gt;-- 潜ったぶんだけドブラウン・インデックスをシフト&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;fu&#34;&gt;termShift&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-27&#34;&gt;&lt;a href=&#34;#cb5-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-28&#34;&gt;&lt;a href=&#34;#cb5-28&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tt&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-29&#34;&gt;&lt;a href=&#34;#cb5-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-30&#34;&gt;&lt;a href=&#34;#cb5-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 項 tt の自由変数のドブラウン・インデックスを d だけシフト&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-31&#34;&gt;&lt;a href=&#34;#cb5-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termShift&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-32&#34;&gt;&lt;a href=&#34;#cb5-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termShift&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-33&#34;&gt;&lt;a href=&#34;#cb5-33&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-34&#34;&gt;&lt;a href=&#34;#cb5-34&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-35&#34;&gt;&lt;a href=&#34;#cb5-35&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-36&#34;&gt;&lt;a href=&#34;#cb5-36&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-37&#34;&gt;&lt;a href=&#34;#cb5-37&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- c はラムダ抽象の深さ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-38&#34;&gt;&lt;a href=&#34;#cb5-38&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- x は変数が束縛されたのラムダ抽象までの距離&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-39&#34;&gt;&lt;a href=&#34;#cb5-39&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- したがって x &amp;gt;= c は自由変数&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-40&#34;&gt;&lt;a href=&#34;#cb5-40&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-41&#34;&gt;&lt;a href=&#34;#cb5-41&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-42&#34;&gt;&lt;a href=&#34;#cb5-42&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-43&#34;&gt;&lt;a href=&#34;#cb5-43&#34;&gt;&lt;/a&gt;                        &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;d&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-44&#34;&gt;&lt;a href=&#34;#cb5-44&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-45&#34;&gt;&lt;a href=&#34;#cb5-45&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-46&#34;&gt;&lt;a href=&#34;#cb5-46&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-47&#34;&gt;&lt;a href=&#34;#cb5-47&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-48&#34;&gt;&lt;a href=&#34;#cb5-48&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-49&#34;&gt;&lt;a href=&#34;#cb5-49&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-50&#34;&gt;&lt;a href=&#34;#cb5-50&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-51&#34;&gt;&lt;a href=&#34;#cb5-51&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;walk&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;tt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で確かめてみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;elm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repl&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;---- Elm 0.19.1 ----------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Say&lt;/span&gt; :&lt;span class=&#34;fu&#34;&gt;help&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;help&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; :&lt;span class=&#34;fu&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;More&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;https&lt;/span&gt;:&lt;span class=&#34;op&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;elm&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repl&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;))))&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(\x . (\f . f x)) (\x . x)&lt;/code&gt; を評価して &lt;code&gt;\f . f (\x . x)&lt;/code&gt; という結果を得た．&lt;/p&gt;
&lt;h3 id=&#34;文字列へ変換&#34;&gt;文字列へ変換&lt;/h3&gt;
&lt;p&gt;変数がインデックス表記になっているため読みにくい． なので文字列への変換関数とパーサーを記述しよう．&lt;/p&gt;
&lt;p&gt;まずは文字列の変換から． こっちは TaPL にも(ほとんど)書いてある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- これは TaPL にはない&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; [] &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;dropIfStartsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 最初と最後のカッコを消している&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;dropIfEndsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- インデックスが間違っている場合は Nothing になる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;　&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前回と異なり，今回は文字列に変換できない場合がある． インデックスが間違っている場合だ． その場合は &lt;code&gt;Notihng&lt;/code&gt; が返るようにしている(TaPL の場合は例外)． &lt;code&gt;printtm&lt;/code&gt; は &lt;code&gt;Term&lt;/code&gt; 型に対するパターンマッチで記述する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;                ( &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;co&#34;&gt;-- 被らない変数名を生成&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;                (\&lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;(\\&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;. &amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;                (&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;                (\&lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt; [ &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s2&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;                (&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;                (&lt;span class=&#34;fu&#34;&gt;printtm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- ctx には変数がどんどん保存される&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- そのため ctx の長さと n の長さが等しくないといけない&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctxlength&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;co&#34;&gt;-- ctx から変数名をドブラウン・インデックスで引いてくる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;index2name&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pickfreshname&lt;/code&gt; や &lt;code&gt;ctxlength&lt;/code&gt; や &lt;code&gt;index2name&lt;/code&gt; の実装は本書にはない． 振る舞いの説明が書いてあるので，それを読んで実装する必要がある． なので，僕は次のように実装したがもう少しエレガントな実装があるかもしれない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 変数名が重複しないように後ろに &amp;#39; を足して Context の先頭に追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pickfreshname&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tuple&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;first&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;startsWith&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;maximum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;    ( ( &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NameBind&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x1&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;ctxlength&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;ctxlength&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ドブラウン・インデックスは束縛されたラムダ抽象への距離&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Context はラムダ抽象のたびに先頭に対応する変数を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- なので，そのままリストへのインデックスアクセスで良い&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;index2name&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;index2name&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getAt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-25&#34;&gt;&lt;a href=&#34;#cb9-25&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-26&#34;&gt;&lt;a href=&#34;#cb9-26&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;str&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-27&#34;&gt;&lt;a href=&#34;#cb9-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-28&#34;&gt;&lt;a href=&#34;#cb9-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-29&#34;&gt;&lt;a href=&#34;#cb9-29&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;(\\x. (\\f. (f x))) (\\x. x)&amp;quot;&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; [] (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))) (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))) &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;\\f. (f (\\x. x))&amp;quot;&lt;/span&gt;) : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いい感じ．&lt;/p&gt;
&lt;h3 id=&#34;パーサー&#34;&gt;パーサー&lt;/h3&gt;
&lt;p&gt;前回同様 &lt;a href=&#34;https://package.elm-lang.org/packages/elm/parser&#34;&gt;elm/parser&lt;/a&gt; を使う． ドブラウン・インデックスなどを構築していく必要があるので，それらを保持した &lt;code&gt;Context&lt;/code&gt; という型を用意する(紛らわしいが，モジュールが違い外に出さない型なので大丈夫):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 変数名とドブラウンインデックスの対応&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;           &lt;span class=&#34;co&#34;&gt;-- ラムダ抽象の深さ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;iniCtx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まずは関数適用を無視してパーサーを定義する(難しいので):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- oneOf は最初にマッチしたパース結果を採用する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;parParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- カッコのパーサー(割愛)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ラムダ抽象(`\x. t`)のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-12&#34;&gt;&lt;a href=&#34;#cb12-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-13&#34;&gt;&lt;a href=&#34;#cb12-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;identity&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-14&#34;&gt;&lt;a href=&#34;#cb12-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-15&#34;&gt;&lt;a href=&#34;#cb12-15&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-16&#34;&gt;&lt;a href=&#34;#cb12-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varStrParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-17&#34;&gt;&lt;a href=&#34;#cb12-17&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-18&#34;&gt;&lt;a href=&#34;#cb12-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-19&#34;&gt;&lt;a href=&#34;#cb12-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-20&#34;&gt;&lt;a href=&#34;#cb12-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;absParserN&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-21&#34;&gt;&lt;a href=&#34;#cb12-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-22&#34;&gt;&lt;a href=&#34;#cb12-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 変数名のパーサー (小文字始まりで [A-z0-9_&amp;#39;] だけ許容する)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-23&#34;&gt;&lt;a href=&#34;#cb12-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;varStrParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-24&#34;&gt;&lt;a href=&#34;#cb12-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;varStrParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-25&#34;&gt;&lt;a href=&#34;#cb12-25&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;variable&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-26&#34;&gt;&lt;a href=&#34;#cb12-26&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;isLower&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-27&#34;&gt;&lt;a href=&#34;#cb12-27&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;inner&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;isAlphaNum&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;#39;&lt;/span&gt;&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb12-28&#34;&gt;&lt;a href=&#34;#cb12-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;reserved&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromList&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb12-29&#34;&gt;&lt;a href=&#34;#cb12-29&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb12-30&#34;&gt;&lt;a href=&#34;#cb12-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-31&#34;&gt;&lt;a href=&#34;#cb12-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ラムダ抽象が深くなるのでコンテキストを更新して再度 Term をパースする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-32&#34;&gt;&lt;a href=&#34;#cb12-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParserN&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-33&#34;&gt;&lt;a href=&#34;#cb12-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;absParserN&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-34&#34;&gt;&lt;a href=&#34;#cb12-34&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-35&#34;&gt;&lt;a href=&#34;#cb12-35&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pushVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;incrCtx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-36&#34;&gt;&lt;a href=&#34;#cb12-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-37&#34;&gt;&lt;a href=&#34;#cb12-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ラムダ抽象が1つ深くなる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-38&#34;&gt;&lt;a href=&#34;#cb12-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- なので深さと全てのドブラウン・インデックスを +1 する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-39&#34;&gt;&lt;a href=&#34;#cb12-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;incrCtx&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-40&#34;&gt;&lt;a href=&#34;#cb12-40&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;incrCtx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-41&#34;&gt;&lt;a href=&#34;#cb12-41&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb12-42&#34;&gt;&lt;a href=&#34;#cb12-42&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-43&#34;&gt;&lt;a href=&#34;#cb12-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 新しい変数名を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-44&#34;&gt;&lt;a href=&#34;#cb12-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 同じ変数名は上書きしてしまって良い&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-45&#34;&gt;&lt;a href=&#34;#cb12-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pushVar&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-46&#34;&gt;&lt;a href=&#34;#cb12-46&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;pushVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-47&#34;&gt;&lt;a href=&#34;#cb12-47&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb12-48&#34;&gt;&lt;a href=&#34;#cb12-48&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-49&#34;&gt;&lt;a href=&#34;#cb12-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 変数のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-50&#34;&gt;&lt;a href=&#34;#cb12-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-51&#34;&gt;&lt;a href=&#34;#cb12-51&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-52&#34;&gt;&lt;a href=&#34;#cb12-52&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;varStrParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-53&#34;&gt;&lt;a href=&#34;#cb12-53&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;lookupVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-54&#34;&gt;&lt;a href=&#34;#cb12-54&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;flip&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;depth&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-55&#34;&gt;&lt;a href=&#34;#cb12-55&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-56&#34;&gt;&lt;a href=&#34;#cb12-56&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- コンテキストには変数名とドブラウン・インデックスの連想配列がある&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-57&#34;&gt;&lt;a href=&#34;#cb12-57&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- なので，変数名で引っ張ってくるだけ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-58&#34;&gt;&lt;a href=&#34;#cb12-58&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;lookupVar&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-59&#34;&gt;&lt;a href=&#34;#cb12-59&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;lookupVar&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-60&#34;&gt;&lt;a href=&#34;#cb12-60&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Dict&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;env&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-61&#34;&gt;&lt;a href=&#34;#cb12-61&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-62&#34;&gt;&lt;a href=&#34;#cb12-62&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;problem&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;undefined variable: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\x. x&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\x. (\\y . x)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmAbs&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmVar&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\\x. (\\y . z)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; [{ &lt;span class=&#34;fu&#34;&gt;col&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;problem&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Problem&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;undefined variable: z&amp;quot;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; }]&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自由変数が出てくるとちゃんとエラーになる．&lt;/p&gt;
&lt;p&gt;残るは関数適用だ． 実はこいつが難しい． というのも，雑に実装をするといわゆる左再帰が出てくるからだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/20110127/1296098875&#34;&gt;chainl と左再帰 - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので，一工夫する必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 関数適用は t1 t2 なのでまずは t1 にマッチさせ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;parParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;        ]  &lt;span class=&#34;co&#34;&gt;-- 後から t2 を探す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;appParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 関数適用 t1 t2 のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;appParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;appParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmApp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- backtrackable や commit は一旦無視して良い&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- termWithoutAppParser が先に出てくるのは関数適用が左結合のため&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- 例: t1 t2 t3 は (t1 t2) t3 つまり (TmApp (TmApp t1 t2) t3)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;backtrackable&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;termWithoutAppParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;commit&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;appParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;-- t2 がなければ t1 のまんま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 関数適用を抜いた termParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termWithoutAppParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termWithoutAppParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;parParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;absParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;varParser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;backtrackable&lt;/code&gt; と &lt;code&gt;commit&lt;/code&gt; はパーサーが文字列を消費してしまう問題の解決方法だ． パーサーの処理が進むと対象の文字列をどんどん消費していく． &lt;code&gt;oneOf&lt;/code&gt; で複数のパーサーを許容するとき，1文字目の結果で分岐できることが保証されているなら問題ないが，途中まで進み文字列を消費して失敗すると，その文字列を消費した状態で &lt;code&gt;oneOf&lt;/code&gt; 内の次のパーサーへ進んでしまう． そこで，elm/parser の場合は消費を戻して欲しい場合はし &lt;code&gt;backtrackable&lt;/code&gt; を使い，もう戻らなくて良くなった時点で &lt;code&gt;commit&lt;/code&gt; を使う，という感じ（たぶん）． まぁ今回は必要ではない気がするが，後々必要になってくる．&lt;/p&gt;
&lt;h1 id=&#34;section-2&#34;&gt;&lt;/h1&gt;
&lt;p&gt;さぁ REPL で確認してみよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;(\\x . \\f . f x) (\\x . x) (\\x . (\\x . x))&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toMaybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; [])&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;\\x. x&amp;quot;&lt;/span&gt;) : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完璧だ．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-spa-にする&#34;&gt;おまけ: SPA にする&lt;/h2&gt;
&lt;p&gt;今回も同様に SPA にする． 章ごとにページ分けても良かったが，試しに一つにまとめてみた． つまり，4章の言語と7章の言語を同じように扱う． どちらも:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列をパースする(&lt;code&gt;parse&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;項を1ステップ評価する(&lt;code&gt;eval1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;項を文字列に変換する(&lt;code&gt;display&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;をしたい． こういった場合，多くの言語ではインターフェースや型クラスのようなアドホック多相を利用する． しかし，Elm にはアドホック多相はない． そのため，パラメトリック多相で模倣する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 各章の言語の Context と Term 型を受け取る&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt;     &lt;span class=&#34;co&#34;&gt;-- Context の初期値&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;logs&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- Term の履歴(表示用)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-8&#34;&gt;&lt;a href=&#34;#cb16-8&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb16-9&#34;&gt;&lt;a href=&#34;#cb16-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-10&#34;&gt;&lt;a href=&#34;#cb16-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-11&#34;&gt;&lt;a href=&#34;#cb16-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-12&#34;&gt;&lt;a href=&#34;#cb16-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ctx&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Calculus&lt;/code&gt; には章ごとに型が異なるものを全部突っ込む必要がある． そのため &lt;code&gt;logs&lt;/code&gt; のようなフィールドもある(前回 &lt;code&gt;Model&lt;/code&gt; 型の &lt;code&gt;exps&lt;/code&gt; にあったやつ)． この型の値を各章ごとに定義しよう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb17-4&#34;&gt;&lt;a href=&#34;#cb17-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Calculus&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Context&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb17-5&#34;&gt;&lt;a href=&#34;#cb17-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-6&#34;&gt;&lt;a href=&#34;#cb17-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-7&#34;&gt;&lt;a href=&#34;#cb17-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-8&#34;&gt;&lt;a href=&#34;#cb17-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-9&#34;&gt;&lt;a href=&#34;#cb17-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;st&#34;&gt;&amp;quot;chap4&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-10&#34;&gt;&lt;a href=&#34;#cb17-10&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-11&#34;&gt;&lt;a href=&#34;#cb17-11&#34;&gt;&lt;/a&gt;                { &lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-12&#34;&gt;&lt;a href=&#34;#cb17-12&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-13&#34;&gt;&lt;a href=&#34;#cb17-13&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-14&#34;&gt;&lt;a href=&#34;#cb17-14&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb17-15&#34;&gt;&lt;a href=&#34;#cb17-15&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;logs&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb17-16&#34;&gt;&lt;a href=&#34;#cb17-16&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb17-17&#34;&gt;&lt;a href=&#34;#cb17-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-18&#34;&gt;&lt;a href=&#34;#cb17-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;st&#34;&gt;&amp;quot;chap7&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-19&#34;&gt;&lt;a href=&#34;#cb17-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-20&#34;&gt;&lt;a href=&#34;#cb17-20&#34;&gt;&lt;/a&gt;                { &lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-21&#34;&gt;&lt;a href=&#34;#cb17-21&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-22&#34;&gt;&lt;a href=&#34;#cb17-22&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-23&#34;&gt;&lt;a href=&#34;#cb17-23&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb17-24&#34;&gt;&lt;a href=&#34;#cb17-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;logs&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb17-25&#34;&gt;&lt;a href=&#34;#cb17-25&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb17-26&#34;&gt;&lt;a href=&#34;#cb17-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-27&#34;&gt;&lt;a href=&#34;#cb17-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-28&#34;&gt;&lt;a href=&#34;#cb17-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-29&#34;&gt;&lt;a href=&#34;#cb17-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Chapter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;Chapter&lt;/code&gt; 型を &lt;code&gt;main&lt;/code&gt; の &lt;code&gt;Model&lt;/code&gt; に持たせて，それぞれの関数を &lt;code&gt;Chapter&lt;/code&gt; のものへと置き換えるだけ． これが良い方法かどうか，正直なんとも言えないが面白いモノができたの個人的には満足．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ところで，型なしラムダ計算は停止しない場合がある(例えば &lt;code&gt;(\x . x x) (\x . x x)&lt;/code&gt; とか)． このような式を SPA に突っ込むと無限に eval ボタンを押せてしまう． そこで，同期からは「eval ボタンが下にずれていくから無限プチプチみたいなのができない」と言われた笑． 検討した結果，ボタン固定にすると式の結果を追うのに上下スクロールを何回もしないとなので却下した(ごめんね)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/12/06/postgresql-pure_%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F</id><title type="text">postgresql-pure を開発しました</title><updated>2019-12-06T00:03:21+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/12/06/postgresql-pure_%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F"/><summary type="html">この記事は Haskell Advent Calendar 2019 の6日目の記事です。 hackage.haskell.org postgresql-pure は Haskell の PostgreSQL ドライバー（クライアントライブラリー）で次のような目標で開発しました。 マルチコア環境でのパフォーマンス向上 暗黙のロックを回避する マルチプラットフォーム対応 C ライブラリーの libpq への依存をなくして特に Windows でのビルドを容易にする 既存ライブラリーとしては postgres-wire が高速だがそれは Windows をサポートしていない pure Haskel…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html</id><title type="text">Elm で作る TaPL のラムダ計算（その１）</title><updated>2019-12-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は「&lt;a href=&#34;https://qiita.com/advent-calendar/2019/elm&#34;&gt;Elm Advent Calendar 2019&lt;/a&gt;」の6日目の記事です．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その１）．&lt;/p&gt;
&lt;h2 id=&#34;tapl-とプログラミング言語の実装&#34;&gt;TaPL とプログラミング言語の実装&lt;/h2&gt;
&lt;p&gt;「&lt;a href=&#34;https://www.cis.upenn.edu/~bcpierce/tapl/&#34;&gt;Type and Programming Language&lt;/a&gt;」(翻訳本は「型システム入門 -プログラミング言語と型の理論-」というもの，以下 TaPL)という書籍を知ってますか？ この書籍はプログラミング言語の型システムの理論体系に関するとても有名な書籍だ（学術的なその分野における入門書）． TaPL の多くは数理論理学的な議論や証明で構成されているのだが，いくつかの章では簡易的なプログラミング言語の実装がある:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4章 算術式のML実装 (本記事はココ)
&lt;ul&gt;
&lt;li&gt;自然数と真偽値と if-then-else&lt;/li&gt;
&lt;li&gt;変数などもない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第7章 ラムダ計算のML実装
&lt;ul&gt;
&lt;li&gt;型無しラムダ計算を実装&lt;/li&gt;
&lt;li&gt;以降はこれを拡張していく(たしか)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第10章 単純型のML実装
&lt;ul&gt;
&lt;li&gt;7章のを型付きラムダ計算にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第17章 部分型付けのML実装&lt;/li&gt;
&lt;li&gt;第25章 System F のML実装
&lt;ul&gt;
&lt;li&gt;最後に型の多相性を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本記事では4章の実装を行う．&lt;/p&gt;
&lt;h3 id=&#34;何で実装するか&#34;&gt;何で実装するか&lt;/h3&gt;
&lt;p&gt;TaPL では実装にあたり，以下のようなプログラミング言語で行うことをオススメしている:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自動メモリ管理 (GC)&lt;/li&gt;
&lt;li&gt;代数的データ型 (を容易に記述できる)&lt;/li&gt;
&lt;li&gt;パターンマッチ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ML系や Haskell，Scala であれば上記の条件にマッチするだろう． タイトルの通り私は Elm でやってみることにした(きっと事例が少ない)．&lt;/p&gt;
&lt;p&gt;なお実装は全て下記のリポジトリにあげている:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/ELaMbda&#34;&gt;matsubara0507/ELaMbda - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm は Web フロントに特化した DSL だ． ということで，最終的にはパーサーも実装し，&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap4&#34;&gt;Web ブラウザから遊べるようにした&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://matsubara0507.github.io/ELaMbda/?chap=chap4&amp;amp;exp=if%20if%20true%20then%20false%20else%20true%20then%200%20else%20if%20false%20then%202%20else%203&#34;&gt;&lt;img src=&#34;/assets/tapl-with-elm/chap4.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;第4章-算術式のml実装&#34;&gt;第4章 算術式のML実装&lt;/h2&gt;
&lt;p&gt;4章で実装する言語の数理論理学的な議論は3章でやり，4章ではそれを ML で実装している． 以降の章では結構実装が省かれてたりするのだが，4章のは全部書いてあるので ML をお手元の言語に翻訳していくだけど簡単な作業です．&lt;/p&gt;
&lt;h3 id=&#34;構文規則&#34;&gt;構文規則&lt;/h3&gt;
&lt;p&gt;プログラミング言語の基本的な構成要素は「構文」と「評価」だ(たぶん)． まずは構文から:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;// 値&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;v := true&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;   | false&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;   | nv&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;// 自然数&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;nv := 0 | succ nv&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;// 項&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;t := v&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;   | if t then t else t&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;   | succ t&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;   | pred t&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;   | iszero t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自然数と真偽値だけの極めてシンプルなものだ． 項は型で表現し，値や自然数かどうかの判定はそう言う関数を用意する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 構文&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 値かどうか&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-23&#34;&gt;&lt;a href=&#34;#cb2-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-24&#34;&gt;&lt;a href=&#34;#cb2-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 数値かどうか&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-25&#34;&gt;&lt;a href=&#34;#cb2-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-26&#34;&gt;&lt;a href=&#34;#cb2-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-27&#34;&gt;&lt;a href=&#34;#cb2-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-28&#34;&gt;&lt;a href=&#34;#cb2-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-29&#34;&gt;&lt;a href=&#34;#cb2-29&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-30&#34;&gt;&lt;a href=&#34;#cb2-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-31&#34;&gt;&lt;a href=&#34;#cb2-31&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-32&#34;&gt;&lt;a href=&#34;#cb2-32&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-33&#34;&gt;&lt;a href=&#34;#cb2-33&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-34&#34;&gt;&lt;a href=&#34;#cb2-34&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-35&#34;&gt;&lt;a href=&#34;#cb2-35&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TaPL では項に &lt;code&gt;Info&lt;/code&gt; と言う型を持たせて，もともと何行何列目だったかのような情報を持たせているが，今回はそこまでリッチにする予定はないし煩わしいので省いた．&lt;/p&gt;
&lt;h3 id=&#34;評価規則&#34;&gt;評価規則&lt;/h3&gt;
&lt;p&gt;構文が定義できたので，次は評価規則を定義し実装する． 評価規則とは，プログラムコード(項)の実行の仕方そのもので，今回は次のように定義する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode txt&#34;&gt;&lt;code class=&#34;sourceCode default&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;// if-then-else の評価規則(3つ)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt; if true then t2 else t3 =&amp;gt; t2&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt; if false then t2 else t3 =&amp;gt; t3&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;-------------------------------------------------&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt; if t1 then t2 else t3 =&amp;gt; if t1&amp;#39; then t2 else t3&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;// 自然数の評価規則&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;---------------------&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt; succ t1 =&amp;gt; succ t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt; pred 0 =&amp;gt; 0&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt; pred (succ nv1) =&amp;gt; nv1&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-20&#34;&gt;&lt;a href=&#34;#cb3-20&#34;&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-21&#34;&gt;&lt;a href=&#34;#cb3-21&#34;&gt;&lt;/a&gt;---------------------&lt;/span&gt;
&lt;span id=&#34;cb3-22&#34;&gt;&lt;a href=&#34;#cb3-22&#34;&gt;&lt;/a&gt; pred t1 =&amp;gt; pred t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-23&#34;&gt;&lt;a href=&#34;#cb3-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-24&#34;&gt;&lt;a href=&#34;#cb3-24&#34;&gt;&lt;/a&gt; iszero 0 =&amp;gt; true&lt;/span&gt;
&lt;span id=&#34;cb3-25&#34;&gt;&lt;a href=&#34;#cb3-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-26&#34;&gt;&lt;a href=&#34;#cb3-26&#34;&gt;&lt;/a&gt; iszero (succ nv1) =&amp;gt; false&lt;/span&gt;
&lt;span id=&#34;cb3-27&#34;&gt;&lt;a href=&#34;#cb3-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-28&#34;&gt;&lt;a href=&#34;#cb3-28&#34;&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb3-29&#34;&gt;&lt;a href=&#34;#cb3-29&#34;&gt;&lt;/a&gt;-------------------------&lt;/span&gt;
&lt;span id=&#34;cb3-30&#34;&gt;&lt;a href=&#34;#cb3-30&#34;&gt;&lt;/a&gt; iszero t1 =&amp;gt; iszero t1&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分数のような記述は上が成り立つならば下も成り立つと言うニュアンス(雑)． 次の &lt;code&gt;eval1&lt;/code&gt; というのが評価規則を実装したものだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 値になるまで評価する (これは TaPL にはない)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 評価規則を関数にする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;t1_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1_&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-27&#34;&gt;&lt;a href=&#34;#cb4-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-28&#34;&gt;&lt;a href=&#34;#cb4-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-29&#34;&gt;&lt;a href=&#34;#cb4-29&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-30&#34;&gt;&lt;a href=&#34;#cb4-30&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-31&#34;&gt;&lt;a href=&#34;#cb4-31&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-32&#34;&gt;&lt;a href=&#34;#cb4-32&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-33&#34;&gt;&lt;a href=&#34;#cb4-33&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-34&#34;&gt;&lt;a href=&#34;#cb4-34&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-35&#34;&gt;&lt;a href=&#34;#cb4-35&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-36&#34;&gt;&lt;a href=&#34;#cb4-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-37&#34;&gt;&lt;a href=&#34;#cb4-37&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-38&#34;&gt;&lt;a href=&#34;#cb4-38&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-39&#34;&gt;&lt;a href=&#34;#cb4-39&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-40&#34;&gt;&lt;a href=&#34;#cb4-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-41&#34;&gt;&lt;a href=&#34;#cb4-41&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-42&#34;&gt;&lt;a href=&#34;#cb4-42&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-43&#34;&gt;&lt;a href=&#34;#cb4-43&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-44&#34;&gt;&lt;a href=&#34;#cb4-44&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-45&#34;&gt;&lt;a href=&#34;#cb4-45&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-46&#34;&gt;&lt;a href=&#34;#cb4-46&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-47&#34;&gt;&lt;a href=&#34;#cb4-47&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-48&#34;&gt;&lt;a href=&#34;#cb4-48&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-49&#34;&gt;&lt;a href=&#34;#cb4-49&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-50&#34;&gt;&lt;a href=&#34;#cb4-50&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TaPL と違い，僕は返り値にいわゆる Optional 型を利用している(TaPL では例外を投げてる)． あと，TaPL で利用している ML やパターンマッチのある多くの言語ではパターンマッチの中に条件式を記述できるが Elm にはない:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- こういうのが書きたい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;) &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isnumericval&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;nv1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これが出来ないため分岐が多くなって冗長になってしまう．辛い． そのうち実装されると良いなぁ．&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;/h1&gt;
&lt;p&gt;実はこれで完成． Elm には REPL があるので試しに動かしてみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;elm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;repl&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;---- Elm 0.19.1 ----------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Say&lt;/span&gt; :&lt;span class=&#34;fu&#34;&gt;help&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;help&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; :&lt;span class=&#34;fu&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;More&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;https&lt;/span&gt;:&lt;span class=&#34;op&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;elm&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repl&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIsZero&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmPred&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;))) &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;良さそう．&lt;/p&gt;
&lt;h3 id=&#34;パーサーを実装する&#34;&gt;パーサーを実装する&lt;/h3&gt;
&lt;p&gt;ここからは TaPL にはない話． 毎回 &lt;code&gt;Term&lt;/code&gt; を手書きするのは大変なのでパーサーを実装しちゃおう．&lt;/p&gt;
&lt;p&gt;Elm には &lt;a href=&#34;https://package.elm-lang.org/packages/elm/parser&#34;&gt;elm/parser&lt;/a&gt; という(なぜか)公式が提供しているパーサーコンビネーターライブラリがある． もちろんこれを使う． パーサーコンビネーターの極意はトップダウンに考えること(ほんまか？)． まずは頭のインターフェースから:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parser Term&lt;/code&gt; という型は「パースした結果が &lt;code&gt;Term&lt;/code&gt; 型になる」と言う意味(型なんてこう言うふわっとした理解で十分)． &lt;code&gt;parser&lt;/code&gt; の &lt;code&gt;|. Parser.end&lt;/code&gt; というのは，パースしきった文字列が空文字に達したという関数(達してないとエラーになる)．&lt;/p&gt;
&lt;p&gt;で，&lt;code&gt;termParser&lt;/code&gt; が項自体のパーサー． elm/parser には &lt;code&gt;oneOf&lt;/code&gt; という便利パーサーコンビネーターがあるのでこれを使う:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 与えたパーサーのリストで最初に成功したものをパース結果にする&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで重要なのは一つ一つ実装することができる点だ． まずは簡単な値から:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;      [ &lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;kw&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keyword&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;kw&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で確認:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TaPL&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;))))))))))&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;良さそう． 次は if-then-else を書いてみる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;      [ &lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ifParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;ifParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;ifParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;succeed&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keyword&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keyword&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;then&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keyword&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;else&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;lazy&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm は普通に正格評価なので &lt;code&gt;Parser.lazy&lt;/code&gt; などで遅延させてあげないと先に &lt;code&gt;termParser&lt;/code&gt; を実行してしまう． REPL で確認:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if true then 1 else 0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- どう見ても評価できないけどパースはできる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if 1 then true else false&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 入れ子もOK&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if if true then 0 else 1 then true else if false then 2 else 3&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;)) &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;)) (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt;)))))&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;    : &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい． あとは同じようーに書くだけなので割愛:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;termParser&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;valParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ifParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;succParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;predParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;isZeroParser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;parParser&lt;/span&gt;    &lt;span class=&#34;co&#34;&gt;-- カッコ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ついでに &lt;code&gt;Term&lt;/code&gt; から文字列に変換する関数も書いておこう:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;dropIfStartsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- かっこ悪いので最後のカッコを消す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;dropIfEndsWith&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;   &lt;span class=&#34;co&#34;&gt;-- カッコだけに&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 分岐するのが面倒なので toInt も同時に&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; ( &lt;span class=&#34;fu&#34;&gt;toInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; ) &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;        ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;        ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmTrue&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;st&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;        ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmFalse&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;st&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;        ( &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TmIf&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt; ) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;st&#34;&gt;&amp;quot;(if &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-25&#34;&gt;&lt;a href=&#34;#cb14-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; then &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-26&#34;&gt;&lt;a href=&#34;#cb14-26&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-27&#34;&gt;&lt;a href=&#34;#cb14-27&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; else &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-28&#34;&gt;&lt;a href=&#34;#cb14-28&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;displayR&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-29&#34;&gt;&lt;a href=&#34;#cb14-29&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-30&#34;&gt;&lt;a href=&#34;#cb14-30&#34;&gt;&lt;/a&gt;                ]&lt;/span&gt;
&lt;span id=&#34;cb14-31&#34;&gt;&lt;a href=&#34;#cb14-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-32&#34;&gt;&lt;a href=&#34;#cb14-32&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;-- あとは割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-33&#34;&gt;&lt;a href=&#34;#cb14-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-34&#34;&gt;&lt;a href=&#34;#cb14-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-35&#34;&gt;&lt;a href=&#34;#cb14-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;toInt&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-36&#34;&gt;&lt;a href=&#34;#cb14-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;toInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-37&#34;&gt;&lt;a href=&#34;#cb14-37&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-38&#34;&gt;&lt;a href=&#34;#cb14-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmZero&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-39&#34;&gt;&lt;a href=&#34;#cb14-39&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-40&#34;&gt;&lt;a href=&#34;#cb14-40&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-41&#34;&gt;&lt;a href=&#34;#cb14-41&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TmSucc&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-42&#34;&gt;&lt;a href=&#34;#cb14-42&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt;) (&lt;span class=&#34;fu&#34;&gt;toInt&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb14-43&#34;&gt;&lt;a href=&#34;#cb14-43&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-44&#34;&gt;&lt;a href=&#34;#cb14-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-45&#34;&gt;&lt;a href=&#34;#cb14-45&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で確認:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;if if true then false else true then 0 else if false then 2 else 3&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toMaybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Chap4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-7&#34;&gt;&lt;a href=&#34;#cb15-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完璧！&lt;/p&gt;
&lt;h2 id=&#34;おまけ-spa-にする&#34;&gt;おまけ: SPA にする&lt;/h2&gt;
&lt;p&gt;せっかく Elm 使ってるので:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列を入力してもらって&lt;/li&gt;
&lt;li&gt;「パースボタン」を押したらパースして&lt;/li&gt;
&lt;li&gt;さらに「評価ボタン」を押したら１ステップだけ評価する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という簡単なものを作る． まぁこれぐらいならググれば出てくるサンプルコードを組み合わせるだけでできますね:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt; () &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;element&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-8&#34;&gt;&lt;a href=&#34;#cb16-8&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb16-9&#34;&gt;&lt;a href=&#34;#cb16-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-10&#34;&gt;&lt;a href=&#34;#cb16-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-11&#34;&gt;&lt;a href=&#34;#cb16-11&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;input&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;           &lt;span class=&#34;co&#34;&gt;-- 入力文字列を保存&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-12&#34;&gt;&lt;a href=&#34;#cb16-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- 1ステップごとの評価結果を全部&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-13&#34;&gt;&lt;a href=&#34;#cb16-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-14&#34;&gt;&lt;a href=&#34;#cb16-14&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb16-15&#34;&gt;&lt;a href=&#34;#cb16-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-16&#34;&gt;&lt;a href=&#34;#cb16-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-17&#34;&gt;&lt;a href=&#34;#cb16-17&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 文字列の入力&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-18&#34;&gt;&lt;a href=&#34;#cb16-18&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InputText&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-19&#34;&gt;&lt;a href=&#34;#cb16-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- パースボタン&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-20&#34;&gt;&lt;a href=&#34;#cb16-20&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseInput&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DeadEnd&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-21&#34;&gt;&lt;a href=&#34;#cb16-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 評価ボタン&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-22&#34;&gt;&lt;a href=&#34;#cb16-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalTerm&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-23&#34;&gt;&lt;a href=&#34;#cb16-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-24&#34;&gt;&lt;a href=&#34;#cb16-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-25&#34;&gt;&lt;a href=&#34;#cb16-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-26&#34;&gt;&lt;a href=&#34;#cb16-26&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-27&#34;&gt;&lt;a href=&#34;#cb16-27&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;InputText&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;txt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-28&#34;&gt;&lt;a href=&#34;#cb16-28&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;txt&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-29&#34;&gt;&lt;a href=&#34;#cb16-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-30&#34;&gt;&lt;a href=&#34;#cb16-30&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;ParseInput&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-31&#34;&gt;&lt;a href=&#34;#cb16-31&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; ]&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-32&#34;&gt;&lt;a href=&#34;#cb16-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-33&#34;&gt;&lt;a href=&#34;#cb16-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;ParseInput&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-34&#34;&gt;&lt;a href=&#34;#cb16-34&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; []&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Can not parse&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-35&#34;&gt;&lt;a href=&#34;#cb16-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-36&#34;&gt;&lt;a href=&#34;#cb16-36&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;EvalTerm&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-37&#34;&gt;&lt;a href=&#34;#cb16-37&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-38&#34;&gt;&lt;a href=&#34;#cb16-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-39&#34;&gt;&lt;a href=&#34;#cb16-39&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;EvalTerm&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-40&#34;&gt;&lt;a href=&#34;#cb16-40&#34;&gt;&lt;/a&gt;            ( { &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Can not eval&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id=&#34;cb16-41&#34;&gt;&lt;a href=&#34;#cb16-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-42&#34;&gt;&lt;a href=&#34;#cb16-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- いくつかの見た目の実装は割愛してます(class とか)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-43&#34;&gt;&lt;a href=&#34;#cb16-43&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-44&#34;&gt;&lt;a href=&#34;#cb16-44&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-45&#34;&gt;&lt;a href=&#34;#cb16-45&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb16-46&#34;&gt;&lt;a href=&#34;#cb16-46&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-47&#34;&gt;&lt;a href=&#34;#cb16-47&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;co&#34;&gt;-- ここでボタンの前にパースしてるのはナンセンスな気もするけど...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-48&#34;&gt;&lt;a href=&#34;#cb16-48&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseInput&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;parse&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;input&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;type_&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb16-49&#34;&gt;&lt;a href=&#34;#cb16-49&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Parse!&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb16-50&#34;&gt;&lt;a href=&#34;#cb16-50&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;input&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-51&#34;&gt;&lt;a href=&#34;#cb16-51&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;fu&#34;&gt;onInput&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InputText&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;type_&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb16-52&#34;&gt;&lt;a href=&#34;#cb16-52&#34;&gt;&lt;/a&gt;            []&lt;/span&gt;
&lt;span id=&#34;cb16-53&#34;&gt;&lt;a href=&#34;#cb16-53&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [] (&lt;span class=&#34;fu&#34;&gt;viewExps&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-54&#34;&gt;&lt;a href=&#34;#cb16-54&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;isEmpty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-55&#34;&gt;&lt;a href=&#34;#cb16-55&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [] []&lt;/span&gt;
&lt;span id=&#34;cb16-56&#34;&gt;&lt;a href=&#34;#cb16-56&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-57&#34;&gt;&lt;a href=&#34;#cb16-57&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;flash flash-error&amp;quot;&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb16-58&#34;&gt;&lt;a href=&#34;#cb16-58&#34;&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id=&#34;cb16-59&#34;&gt;&lt;a href=&#34;#cb16-59&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-60&#34;&gt;&lt;a href=&#34;#cb16-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewExps&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb16-61&#34;&gt;&lt;a href=&#34;#cb16-61&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewExps&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-62&#34;&gt;&lt;a href=&#34;#cb16-62&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-63&#34;&gt;&lt;a href=&#34;#cb16-63&#34;&gt;&lt;/a&gt;        [] &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-64&#34;&gt;&lt;a href=&#34;#cb16-64&#34;&gt;&lt;/a&gt;            []&lt;/span&gt;
&lt;span id=&#34;cb16-65&#34;&gt;&lt;a href=&#34;#cb16-65&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-66&#34;&gt;&lt;a href=&#34;#cb16-66&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;xs&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-67&#34;&gt;&lt;a href=&#34;#cb16-67&#34;&gt;&lt;/a&gt;            [ &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;reverse&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;exps&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-68&#34;&gt;&lt;a href=&#34;#cb16-68&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewExp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-69&#34;&gt;&lt;a href=&#34;#cb16-69&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;intersperse&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;my-1&amp;quot;&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;↓&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id=&#34;cb16-70&#34;&gt;&lt;a href=&#34;#cb16-70&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb16-71&#34;&gt;&lt;a href=&#34;#cb16-71&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-72&#34;&gt;&lt;a href=&#34;#cb16-72&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;co&#34;&gt;-- ここもボタンの前に評価してるのは(ry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-73&#34;&gt;&lt;a href=&#34;#cb16-73&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;EvalTerm&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;eval1&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;type_&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;button&amp;quot;&lt;/span&gt;　]&lt;/span&gt;
&lt;span id=&#34;cb16-74&#34;&gt;&lt;a href=&#34;#cb16-74&#34;&gt;&lt;/a&gt;                [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Eval!&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb16-75&#34;&gt;&lt;a href=&#34;#cb16-75&#34;&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id=&#34;cb16-76&#34;&gt;&lt;a href=&#34;#cb16-76&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-77&#34;&gt;&lt;a href=&#34;#cb16-77&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewExp&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-78&#34;&gt;&lt;a href=&#34;#cb16-78&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewExp&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-79&#34;&gt;&lt;a href=&#34;#cb16-79&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;my-1&amp;quot;&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Lambda&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;t&lt;/span&gt;) ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;色々ととりあえずで作ったので雑だ（現在のは改良したあとなのでこのコードとは少し違う）．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ちなみに，会社で同期と TaPL (雑な)読書会をしており，このシリーズはその成果です． すでに半年ぐらいやってるが未だに10章です笑&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/12/05/191010</id><title type="text">最強にして最速のビルダー、mason</title><updated>2019-12-05T19:33:25+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/12/05/191010"/><summary type="html">Haskell Advent Calendar 2019 5日目 この冬、神速のサンタクロースがやってくる—— Haskellにおいて、バイト列の表現はByteStringが定番である。ByteStringはPinned領域に直接格納され、空間効率はリストに比べればはるかに良い。しかし、Pinned領域にあるとヒープフラグメンテーションが起こりやすくなるということでもあり、細かい文字列をつなぎ合わせるような使い方はパフォーマンスに悪影響が及ぶ。そのような問題を避けるため、ビルダーと呼ばれる構造が用意されている。 Data.ByteString.Builderは、word8 42 &lt;&gt; byte…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/haskell-in-vrchat.html</id><title type="text">VRのためにHaskellを使った話</title><updated>2019-12-03T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/haskell-in-vrchat.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#vr空間でltがしたい&#34; title=&#34;vr空間でltがしたい&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;空間で&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;がしたい&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#webフレームワーク&#34; title=&#34;webフレームワーク&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#はじめてのhaskellペアプロ&#34; title=&#34;はじめてのhaskellペアプロ&#34;&gt;はじめての&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ペアプロ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#デプロイ&#34; title=&#34;デプロイ&#34;&gt;デプロイ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#実際に開催してみて&#34; title=&#34;実際に開催してみて&#34;&gt;実際に開催してみて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#リポジトリ&#34; title=&#34;リポジトリ&#34;&gt;リポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめに&#34; title=&#34;はじめに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめに&lt;/h1&gt;
&lt;p&gt;はじめまして。趣味で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;しているはる&lt;span class=&#34;ascii&#34;&gt;(haru2036)&lt;/span&gt;と申します。まったり進行で開発しているので&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のバージョンアップの速さについていけてない感があります…… さて、今回はあんまり深い話はありません。どちらかと言うとこんなニッチなところに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;使ったよというネタで書きます。&lt;/p&gt;
&lt;h1 id=&#34;vr空間でltがしたい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#vr空間でltがしたい&#34; title=&#34;vr空間でltがしたい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;空間で&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;がしたい&lt;/h1&gt;
&lt;p&gt;突然ですが、私は&lt;a href=&#34;https://vrchat.com/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;&lt;/a&gt;（以下&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;）というソーシャル&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;サービス（&lt;span class=&#34;ascii&#34;&gt;Second Life&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;VR&lt;/span&gt;版みたいなものです）にハマっています。&lt;br /&gt;
友人との雑談の中で&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;の中で&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;会ができればプログラミングなどの話題で盛り上がれる人が集まってワイワイ楽しくできるのではないかと話して、その場のノリでとりあえず実装してみることにしました。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt-room.png&#34; title=&#34;完成したワールド&#34; alt=&#34;完成したワールド&#34; /&gt;&lt;figcaption&gt;完成したワールド&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;今回作りたかったのはスライドを表示するためのスクリーンと、ページ送りに使うボタンを実装したワールドです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt-control-panel.png&#34; title=&#34;発表者用コントロールパネル&#34; alt=&#34;発表者用コントロールパネル&#34; /&gt;&lt;figcaption&gt;発表者用コントロールパネル&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;ではアバターやワールドを自由に作ることができるのですが、&lt;span class=&#34;ascii&#34;&gt;VRC&lt;/span&gt;が提供するコンポーネント以外のスクリプトは利用できません。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザとしては得意なことを活用しづらい土壌です。&lt;br /&gt;
幸いスライドを表示する手段はゲーム内で&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;から画像を取得し表示する&lt;span class=&#34;ascii&#34;&gt;VRC_Panorama&lt;/span&gt;というコンポーネントを利用することにより確保できましたが、&lt;span class=&#34;ascii&#34;&gt;VRC_Panorama&lt;/span&gt;が取得できる画像はワールド作成時に決め打ちで指定された&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;のリストに含まれるもののみです。&lt;br /&gt;
そのため、スライド画像への&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;のリストを直接&lt;span class=&#34;ascii&#34;&gt;VRC_Panorama&lt;/span&gt;に渡していると、イベントを開催する際よくある飛び入り参加やスライドの用意が遅れた参加者に対応できなくなってしまいます。&lt;/p&gt;
&lt;p&gt;その問題を解決するために、イベント開始時からのページ数とスライドの画像&lt;span class=&#34;ascii&#34;&gt;URL&lt;/span&gt;をマップする&lt;span class=&#34;ascii&#34;&gt;WebAPI&lt;/span&gt;を用意しました。&lt;br /&gt;
具体的には、&lt;code&gt;/slides/{pageCount}&lt;/code&gt; のような形のエンドポイントを持った&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を用意し、そこから実際の画像へリダイレクトをかけるという方法を取りました。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt-image.png&#34; title=&#34;実装イメージ図&#34; alt=&#34;実装イメージ図&#34; /&gt;&lt;figcaption&gt;実装イメージ図&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h1 id=&#34;webフレームワーク&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#webフレームワーク&#34; title=&#34;webフレームワーク&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フレームワーク&lt;/h1&gt;
&lt;p&gt;今回は自分で使うだけだしということでさらっとやってみたかったので&lt;span class=&#34;ascii&#34;&gt;Spock&lt;/span&gt;を利用しました。もう少し誰でも使えるサービスにしたいと考えているので&lt;span class=&#34;ascii&#34;&gt;Servant&lt;/span&gt;に載せ替えてかっちり作り直そうかと思い移植しているところです。&lt;/p&gt;
&lt;h1 id=&#34;はじめてのhaskellペアプロ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#はじめてのhaskellペアプロ&#34; title=&#34;はじめてのhaskellペアプロ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;はじめての&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ペアプロ&lt;/h1&gt;
&lt;p&gt;じつは&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;会をやろうと思いついた友人の&lt;a href=&#34;https://twitter.com/b0xp2&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;BOXP&lt;/span&gt;&lt;/a&gt;は&lt;span class=&#34;ascii&#34;&gt;Clojure&lt;/span&gt;ユーザで、せっかくだからと&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;の開発を手伝ってくれました。&lt;br /&gt;
あまり&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に馴染みはなかったものの、いわゆる関数型プログラミング的な概念はバッチリなのでスススっと書いてくれました。&lt;br /&gt;
書いてくれる上での障壁になったのは、型関連の要素&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;data&lt;/code&gt;や&lt;code&gt;type&lt;/code&gt;や&lt;code&gt;newtype&lt;/code&gt;がぱっと見わからなかった、型コンストラクタ、値コンストラクタの概念）に馴染みが薄かったことでした。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Discord&lt;/span&gt;で画面共有しながら説明を行ったのですが、やはり同じ画面を見ながら説明するのはとてもやりやすいと感じました。&lt;br /&gt;
本人からのメッセージはこちら。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;プログラミング&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を昔読んでかじったことがある程度で素人もいいところでしたが、当人のサポートもあり思いついた数日後には実装が終わっていました。 はるくんの話にもある通り&lt;span class=&#34;ascii&#34;&gt;Discord&lt;/span&gt;で画面共有しながらペアプロし、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でのテストコードの書き方も一から教えてもらいながら書きました。これは願ってもない体験だったので根気よく教えてくれたことに非常に感謝しています。&lt;/p&gt;
&lt;p&gt;また、個人的には実装以外でのブレストや実際の会場でのデバッグを&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;上でできた事もとてもよかったなと思っています。 単純に実装を確認するためには二人以上で&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;に入る必要があるというのもありましたが、完全リモートでも身振り手振りありでブレストができたことや、アバターのおかげで環境に囚われないコミュニケーションができていたことも&lt;span class=&#34;ascii&#34;&gt;Good&lt;/span&gt;でした。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;デプロイ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#デプロイ&#34; title=&#34;デプロイ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;デプロイ&lt;/h1&gt;
&lt;p&gt;今回は自分で使うだけな上に常時稼働している必要もなく、コストを最小限に抑えたかったので&lt;span class=&#34;ascii&#34;&gt;Heroku&lt;/span&gt;にデプロイしました。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Dockerfile&lt;/span&gt;を書き、スタティックリンク周りで悩みながらもイメージを生成して&lt;span class=&#34;ascii&#34;&gt;Heroku&lt;/span&gt;のレジストリに&lt;span class=&#34;ascii&#34;&gt;Push&lt;/span&gt;し、後はいつもの&lt;span class=&#34;ascii&#34;&gt;Heroku&lt;/span&gt;という感じでうまくいきました。&lt;/p&gt;
&lt;p&gt;余談ですが、最近参加した&lt;span class=&#34;ascii&#34;&gt;Gotanda.hs&lt;/span&gt;というイベントで&lt;code&gt;cabal build --enable-executable-static&lt;/code&gt;でいい感じにシングルバイナリが生成できるというお話を聞いたので、最近&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;ばっかり使ってたのを改めて適材適所で使い分けていきたいなーと思っています。&lt;/p&gt;
&lt;h1 id=&#34;実際に開催してみて&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#実際に開催してみて&#34; title=&#34;実際に開催してみて&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;実際に開催してみて&lt;/h1&gt;
&lt;p&gt;ここは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ほぼ全く関係ないですが……&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-in-vrchat/vrc-lt.png&#34; /&gt; &lt;span class=&#34;ascii&#34;&gt;VRC-LT&lt;/span&gt;という名前で&lt;span class=&#34;ascii&#34;&gt;6&lt;/span&gt;回ほど開催しているのですが、場所の制約を受けずに勉強会ができ、その後の懇親会も会場の撤収時刻や終電を気にせず話したい人はとことん話し続ける事ができるというところが非常に良かったです。&lt;br /&gt;
ホワイトボードはまだ未実装ですが、空間に書けるペンも配布されているのでその手のアイテムも取り入れれば懇親会での話も更にはずむのではないでしょうか。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;VRChat&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;PC&lt;/span&gt;のみでも利用することができます。 &lt;span class=&#34;ascii&#34;&gt;VRC-LT&lt;/span&gt;はほぼ月イチペースで不定期開催ですので、もしよろしければ参加していただけると嬉しいです。 開催時のアーカイブ等も以下の&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;サイトにて公開中です。合わせてご覧ください。 &lt;a href=&#34;https://vrc-lt.github.io&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://vrc-lt.github.io&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;リポジトリ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#リポジトリ&#34; title=&#34;リポジトリ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;リポジトリ&lt;/h1&gt;
&lt;p&gt;そんなこんなで開発中のリポジトリはこちらになります。&lt;br /&gt;
拙いところもいっぱいですが&lt;span class=&#34;ascii&#34;&gt;Issue&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;PR&lt;/span&gt;などで気になった点を教えていただければ幸いです！&lt;br /&gt;
&lt;a href=&#34;https://github.com/vrc-lt/VRC-Slide-Server&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://github.com/vrc-lt/VRC-Slide-Server&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/haskell-day-2019.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Day 2019を開催しました！&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/20/GHC_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_%E6%A6%82%E8%A6%B3_%E3%81%A8_PowerShell</id><title type="text">GHC 環境構築 概観 と PowerShell</title><updated>2019-12-02T16:50:59+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/20/GHC_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_%E6%A6%82%E8%A6%B3_%E3%81%A8_PowerShell"/><summary type="html">Haskell の開発環境を構築する方法は何通りかあり、新しいツールが出ると「今はこれだ」とほめるブログも公開されますがそれが初学者を混乱させることがよくあります。 本記事ではビルドツールのインストールにしぼり、開発支援、例えば ghc-mod・haskell-ide-engine・hhp には言及しません。 いくつか典型的な構築方法を確認した後、新たに私が作成したツールを紹介しより初学者を混乱に落とし入れます。 重鎮 Haskell Platform www.haskell.org Haskell 解説書史1の第1波から第3波までのデファクトスタンダードであった重鎮 Haskell Plat…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-02-haskell-with-gh-actions.html</id><title type="text">Haskell で GitHub Actions する</title><updated>2019-12-02T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-02-haskell-with-gh-actions.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;本記事は「&lt;a href=&#34;https://qiita.com/advent-calendar/2019/haskell&#34;&gt;Haskell Advent Calendar 2019&lt;/a&gt;」の2日目の記事です．&lt;/p&gt;
&lt;h1 id=&#34;section&#34;&gt;&lt;/h1&gt;
&lt;p&gt;2019/11/13 に GA された GitHub Actions を使って，Haskell プロジェクト，とりわけ Haskell Stack を使ったプロジェクトを CI/CD します．&lt;/p&gt;
&lt;p&gt;ちなみに，試すために導入した PR はこれです:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/octbook/pull/1&#34;&gt;自動ビルドを追加 by matsubara0507 · Pull Request #1 · matsubara0507/octbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは適当な設定ファイルから GitHub の Organization や Organization の Team 機能にユーザーを招待したりキックしたりするための CLI ツールです．&lt;/p&gt;
&lt;h2 id=&#34;cabal-の場合&#34;&gt;Cabal の場合&lt;/h2&gt;
&lt;p&gt;はわりかし簡単． Haskell のセットアップは公式がすでに用意してくれてるのでこれを使えば良い:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/actions/setup-haskell&#34;&gt;actions/setup-haskell: Set up your GitHub Actions workflow with a specific version of Haskell (GHC and Cabal)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ghc ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-16.04&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.2.2&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.4.4&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.6.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.8.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@master&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Setup Haskell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.cabal }}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Haskell パッケージ系のリポジトリなら，こんな感じに matrix の設定をすると良い． で，キャッシュする場合は，この matrix ごとに &lt;code&gt;~/.cabal/store&lt;/code&gt; だけをキャッシュすれば十分らしい（教えてもらった）:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;   ...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Cache .cabal&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/cache@preview&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.cabal/store&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.ghc }}-cabal-${{ hashFiles(&amp;#39;**/fallible.cabal&amp;#39;) }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        restore-keys&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;          ${{ matrix.ghc }}-cabal-&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Setup Haskell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.cabal }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-15&#34;&gt;&lt;a href=&#34;#cb2-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Install dependencies&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-16&#34;&gt;&lt;a href=&#34;#cb2-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;      run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-17&#34;&gt;&lt;a href=&#34;#cb2-17&#34;&gt;&lt;/a&gt;        cabal v2-update&lt;/span&gt;
&lt;span id=&#34;cb2-18&#34;&gt;&lt;a href=&#34;#cb2-18&#34;&gt;&lt;/a&gt;        cabal v2-build --only-dependencies&lt;/span&gt;
&lt;span id=&#34;cb2-19&#34;&gt;&lt;a href=&#34;#cb2-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build &amp;amp; test&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-20&#34;&gt;&lt;a href=&#34;#cb2-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;      run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-21&#34;&gt;&lt;a href=&#34;#cb2-21&#34;&gt;&lt;/a&gt;        cabal v2-build&lt;/span&gt;
&lt;span id=&#34;cb2-22&#34;&gt;&lt;a href=&#34;#cb2-22&#34;&gt;&lt;/a&gt;        cabal v2-test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cabal の方はちゃんと調査してないのでこんでお終い（すいません）．&lt;/p&gt;
&lt;h2 id=&#34;stack-の場合&#34;&gt;Stack の場合&lt;/h2&gt;
&lt;p&gt;こっからが本題．&lt;/p&gt;
&lt;p&gt;Stack はキャッシュすべきディレクトリ &lt;code&gt;~/.stack&lt;/code&gt; がでかすぎる． 下記は試しに GitHub Actions 上で &lt;code&gt;du&lt;/code&gt; して見た結果だ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ du -sh ~/.stack/*
4.0K    /home/runner/.stack/config.yaml
1.3G    /home/runner/.stack/pantry
553M    /home/runner/.stack/pantry.sqlite3
0       /home/runner/.stack/pantry.sqlite3.pantry-write-lock
1.8G    /home/runner/.stack/programs
16M     /home/runner/.stack/setup-exe-cache
64K     /home/runner/.stack/setup-exe-src
462M    /home/runner/.stack/snapshots
192K    /home/runner/.stack/stack.sqlite3
0       /home/runner/.stack/stack.sqlite3.pantry-write-lock&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;現在，&lt;code&gt;actions/cache@v1&lt;/code&gt; では一度にキャッシュできるディレクトリの最大サイズは400MBしかない（今後緩和される可能性はあるが）． &lt;code&gt;actions/cache&lt;/code&gt; は内部で gzip かなんかで圧縮しているので，この数字まんまではない． 試しに，このまんまキャッシュしてみたら次のような警告が出た:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Post job cleanup.
/bin/tar -cz -f /home/runner/work/_temp/2706cc23-8789-4ed4-b4ec-4e7143b1cc98/cache.tgz -C /home/runner/.stack .
##[warning]Cache size of 814014541 bytes is over the 400MB limit, not saving cache.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;800MB強，意外と少ない！&lt;/p&gt;
&lt;p&gt;余談だが，&lt;del&gt;そのうち&lt;/del&gt; v1.0.2 から&lt;a href=&#34;https://github.com/actions/cache/pull/85&#34;&gt;毎回キャッシュサイズが見れるようになる&lt;/a&gt;はず（今でも &lt;code&gt;ACTIONS_STEP_DEBUG&lt;/code&gt; を Secret に設定すると見れる）．&lt;/p&gt;
&lt;h3 id=&#34;system-ghc-を使う&#34;&gt;system-ghc を使う&lt;/h3&gt;
&lt;p&gt;stack は &lt;code&gt;--system-ghc&lt;/code&gt; オプションを使うことで stack がインストールした GHC の代わりに，ホストマシンの GHC を直接使ってくれる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;jobs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;runs-on&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ubuntu-18.04&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.6.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cache-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;v4&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Setup Haskell&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ matrix.cabal }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; mstksg/setup-stack@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Install dependencies&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --system-ghc build --only-dependencies&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build binary&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --system-ghc install --local-bin-path=./bin&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんと system-ghc を使うことで &lt;code&gt;~/.stack/programs&lt;/code&gt; が保存されなくなった（ここには stack がインストールした GHC が保存されてた）． これで，半分弱の削減に成功．残り約500MB．&lt;/p&gt;
&lt;h3 id=&#34;必殺奥義-分割キャッシュ&#34;&gt;必殺奥義: 分割キャッシュ&lt;/h3&gt;
&lt;p&gt;実は，キャッシュの最大サイズ 400MB は &lt;strong&gt;一つのディレクトリ毎の最大サイズ&lt;/strong&gt; だ． なので，別々のディレクトリを別々にキャッシュすれば，最大 2GB までキャッシュできる（これがリポジトリ単位での最大サイズ）．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.stack/pantry&lt;/code&gt; というのが単体で 1.3GB ある． なので，これだけとそれ以外をキャッシュするようにしてみる． ちなみに，&lt;a href=&#34;https://docs.haskellstack.org/en/stable/pantry&#34;&gt;Pantry というのが Stack の依存パッケージのキャッシュシステム&lt;/a&gt;だ．&lt;/p&gt;
&lt;p&gt;ここで問題が1つ． actions/cache はディレクトリを1つ指定して，それを圧縮しキャッシュしする． 複数のディレクトリを指定したり，中の一部のファイルだけを除外したりなどはできない（少なくとも現在のバージョンでは）． もちろん，一旦 &lt;code&gt;mv&lt;/code&gt; してキャッシュし，restore したら &lt;code&gt;mv&lt;/code&gt; し直せば良い． が，めんどいね． 単純なことはソフトウェアで解決しよう． ソフトウェアエンジニアの精神です（？）．&lt;/p&gt;
&lt;p&gt;ということで，それをやってくれるアクションがこちら:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/actions/tree/master/move-files&#34;&gt;actions/move-files at master · matsubara0507/actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ついに TypeScript デビューした． はい，actions/cache を参考にしてきていい感じに書き直しただけです． &lt;code&gt;mkdir&lt;/code&gt; や &lt;code&gt;mv&lt;/code&gt; は &lt;a href=&#34;https://github.com/actions/toolkit/tree/master/packages/io&#34;&gt;actions/toolkit&lt;/a&gt; にあるので簡単に実装できた:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode typescript&#34;&gt;&lt;code class=&#34;sourceCode typescript&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;im&#34;&gt;as&lt;/span&gt; core &lt;span class=&#34;im&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;@actions/core&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;im&#34;&gt;as&lt;/span&gt; io &lt;span class=&#34;im&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;@actions/io&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;im&#34;&gt;as&lt;/span&gt; utils &lt;span class=&#34;im&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;./utils/actionUtils&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; source &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;utils&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;resolvePath&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;va&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getInput&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;source_dir&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; required&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;        )&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;// 残念ながら inputs は文字列しか渡せないので改行で分割してる&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; files &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; core&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;            .&lt;span class=&#34;fu&#34;&gt;getInput&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;source_files&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; required&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;            .&lt;span class=&#34;fu&#34;&gt;split&lt;/span&gt;(&lt;span class=&#34;ss&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;\r?\n&lt;/span&gt;&lt;span class=&#34;ss&#34;&gt;/&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;            .&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt;(pat &lt;span class=&#34;kw&#34;&gt;=&amp;gt;&lt;/span&gt; pat)&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;            .&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt;(pat &lt;span class=&#34;kw&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;pat&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;trim&lt;/span&gt;())&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; target &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;utils&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;resolvePath&lt;/span&gt;(&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;va&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;getInput&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;target_dir&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; required&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;        )&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;cf&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;mkdirP&lt;/span&gt;(target)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;va&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;debug&lt;/span&gt;(&lt;span class=&#34;vs&#34;&gt;`mkdir -p &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;${&lt;/span&gt;target&lt;span class=&#34;sc&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;vs&#34;&gt;`&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;va&#34;&gt;files&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;forEach&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;function&lt;/span&gt;(file) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-24&#34;&gt;&lt;a href=&#34;#cb6-24&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-25&#34;&gt;&lt;a href=&#34;#cb6-25&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; path &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;concat&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; file)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-26&#34;&gt;&lt;a href=&#34;#cb6-26&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;cf&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;mv&lt;/span&gt;(path&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; target)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-27&#34;&gt;&lt;a href=&#34;#cb6-27&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;va&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;debug&lt;/span&gt;(&lt;span class=&#34;vs&#34;&gt;`mv &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;${&lt;/span&gt;path&lt;span class=&#34;sc&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;vs&#34;&gt; to &lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;${&lt;/span&gt;target&lt;span class=&#34;sc&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;vs&#34;&gt;`&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-28&#34;&gt;&lt;a href=&#34;#cb6-28&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;catch&lt;/span&gt; (error) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-29&#34;&gt;&lt;a href=&#34;#cb6-29&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;va&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;warning&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;message&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-30&#34;&gt;&lt;a href=&#34;#cb6-30&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-31&#34;&gt;&lt;a href=&#34;#cb6-31&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-32&#34;&gt;&lt;a href=&#34;#cb6-32&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;catch&lt;/span&gt; (error) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-33&#34;&gt;&lt;a href=&#34;#cb6-33&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;va&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;warning&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;at&#34;&gt;message&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-34&#34;&gt;&lt;a href=&#34;#cb6-34&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-35&#34;&gt;&lt;a href=&#34;#cb6-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-36&#34;&gt;&lt;a href=&#34;#cb6-36&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-37&#34;&gt;&lt;a href=&#34;#cb6-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;()&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-38&#34;&gt;&lt;a href=&#34;#cb6-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-39&#34;&gt;&lt;a href=&#34;#cb6-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;im&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;im&#34;&gt;default&lt;/span&gt; run&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使うときはこんな感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Move .stack/pantry to temp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/actions/move-files@master&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;source_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack-temp/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        source_files&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;          pantry&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;target_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は，GitHub Actions には隠し機能（現状ドキュメントには書いてない）として &lt;code&gt;post&lt;/code&gt; と &lt;code&gt;post-if&lt;/code&gt; というのがある（&lt;code&gt;actions.yml&lt;/code&gt; に設定できる）:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;Move Files&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;move files to other direcotory&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;source_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;source_files&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;target_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;runs&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;using&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;node12&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;dist/move/index.js&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;dist/restore/index.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;co&#34;&gt; # move.ts とは全く逆のことをするだけ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;post-if&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;success()&amp;#39;&lt;/span&gt;&lt;span class=&#34;co&#34;&gt;          # move が成功したときにだけ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは &lt;a href=&#34;https://github.com/actions/cache&#34;&gt;actions/cache&lt;/a&gt; や &lt;a href=&#34;https://github.com/actions/checkout&#34;&gt;actions/checkout&lt;/a&gt; がやっているやつで，ジョブステップの最後にデストラクタのように指定したアクションを実行してくれる機能だ． ちなみに，実行したステップとは逆順にポストステップは実行する．&lt;/p&gt;
&lt;p&gt;これと actions/cache を組み合わせることで，自由にキャッシュしたいディレクトリを分割してキャッシュすることができるようになった！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Cache .stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; cache-stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/cache@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ runner.os }}-stack-${{ hashFiles(&amp;#39;**/stack.yaml.lock&amp;#39;) }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        restore-keys&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;          ${{ runner.os }}-stack-&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Cache .stack/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; cache-pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/cache@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack-temp/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ runner.os }}-pantry-${{ hashFiles(&amp;#39;**/stack.yaml.lock&amp;#39;) }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        restore-keys&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;          ${{ runner.os }}-pantry-&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Move .stack/pantry to temp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-25&#34;&gt;&lt;a href=&#34;#cb9-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/actions/move-files@master&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-26&#34;&gt;&lt;a href=&#34;#cb9-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-27&#34;&gt;&lt;a href=&#34;#cb9-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;source_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack-temp/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-28&#34;&gt;&lt;a href=&#34;#cb9-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        source_files&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-29&#34;&gt;&lt;a href=&#34;#cb9-29&#34;&gt;&lt;/a&gt;          pantry&lt;/span&gt;
&lt;span id=&#34;cb9-30&#34;&gt;&lt;a href=&#34;#cb9-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;target_dir&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-31&#34;&gt;&lt;a href=&#34;#cb9-31&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-32&#34;&gt;&lt;a href=&#34;#cb9-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-33&#34;&gt;&lt;a href=&#34;#cb9-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちょっとわかりにくいですが，別々にキャッシュしたディレクトリを &lt;code&gt;move-files&lt;/code&gt; で合体させるイメージ．&lt;/p&gt;
&lt;h3 id=&#34;キャッシュバージョンを付ける&#34;&gt;キャッシュバージョンを付ける&lt;/h3&gt;
&lt;p&gt;今回の PR のコミット履歴を見るとわかるのだが迷走してる． なぜかというと，actions/cache の「cache save は cache key が &lt;strong&gt;ヒットしなかったときにだけ&lt;/strong&gt; 行う」という性質に気づくのに時間がかかったから． &lt;code&gt;key&lt;/code&gt; にはヒットせず &lt;code&gt;restore-keys&lt;/code&gt; でヒットしたときには restore をして更にキャッシュを更新する． しかし，key に変更が無いとズーーーット古いキャッシュを使い続けてしまった． 変だと思った．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/actions/cache/issues/2&#34;&gt;現状キャッシュを手動でクリアする方法が無い&lt;/a&gt;． まぁなんでも良かったので cache-version というサフィックスを付けることにした笑:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;strategy&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;matrix&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ghc&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;8.6.5&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cabal&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;cache-version&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;v4&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;steps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/checkout@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fetch-depth&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Cache .stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; cache-stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;uses&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; actions/cache@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-15&#34;&gt;&lt;a href=&#34;#cb10-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;with&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-16&#34;&gt;&lt;a href=&#34;#cb10-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-17&#34;&gt;&lt;a href=&#34;#cb10-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; ${{ runner.os }}-stack-${{ hashFiles(&amp;#39;**/stack.yaml.lock&amp;#39;) }}-${{ matrix.cache-version }}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-18&#34;&gt;&lt;a href=&#34;#cb10-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;        restore-keys&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-19&#34;&gt;&lt;a href=&#34;#cb10-19&#34;&gt;&lt;/a&gt;          ${{ runner.os }}-stack-&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;少なくとも，キャッシュを試行錯誤してるときには便利だ．&lt;/p&gt;
&lt;h3 id=&#34;ビフォーアフター&#34;&gt;ビフォーアフター&lt;/h3&gt;
&lt;p&gt;もともと25分以上かかかっていたビルドが:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/haskell-with-gh-actions/before.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;なんと2分まで減った！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/haskell-with-gh-actions/after.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id=&#34;おまけ-github-packages&#34;&gt;おまけ: GitHub Packages&lt;/h2&gt;
&lt;p&gt;Haskell プログラムのバイナリを配布するために，僕は普段 Docker Image にして Docker Hub に置いてた． しかし，先日 GitHub の 2019年のもう一つの目玉機能「GitHub Packages」も GA されたので，こっちに置いてみることにした（なんと Docker レジストリにもなる）．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/octbook/packages&#34;&gt;&lt;img src=&#34;/assets/haskell-with-gh-actions/image.jpg&#34;&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ちなみに，現状パブリックリポジトリのパッケージであっても &lt;code&gt;docker pull&lt;/code&gt; するのに認証が必要である． その点がとても残念(改善されることを祈る)．&lt;/p&gt;
&lt;h3 id=&#34;ログイン&#34;&gt;ログイン&lt;/h3&gt;
&lt;p&gt;意外と手間取った． どうやら MFA 設定してるとトークンを使う他ないらしい． しかも，新しく（？）追加された &lt;code&gt;write:packages&lt;/code&gt; というスコープをオンしないとダメっぽい．&lt;/p&gt;
&lt;h3 id=&#34;github-actions-からプッシュ&#34;&gt;GitHub Actions からプッシュ&lt;/h3&gt;
&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build binary&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; stack --system-ghc install --local-bin-path=./bin&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Build Docker Image&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; docker build -t octbook . --build-arg local_bin_path=./bin&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Push Docker Image&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; github.ref == &amp;#39;refs/heads/master&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;      run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;        echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u matsubara0507 --password-stdin&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;        docker tag octbook docker.pkg.github.com/matsubara0507/octbook/cli&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;        docker push docker.pkg.github.com/matsubara0507/octbook/cli:latest&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; Push Docker Image (tag)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; startsWith(github.ref, &amp;#39;refs/tags/&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;      run&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;: &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;        echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u matsubara0507 --password-stdin&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;        docker tag octbook docker.pkg.github.com/matsubara0507/octbook/cli:${GITHUB_REF#refs/tags/}&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;        docker push docker.pkg.github.com/matsubara0507/octbook/cli:${GITHUB_REF#refs/tags/}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;if: github.ref == &amp;#39;refs/heads/master&amp;#39;&lt;/code&gt; とすることで master ブランチのときだけ，&lt;code&gt;if: startsWith(github.ref, &amp;#39;refs/tags/&amp;#39;)&lt;/code&gt; とすることで tag のときだけ，それぞれのステップを評価させることができる．&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;code&gt;GITHUB_TOKEN&lt;/code&gt; という Secret はデフォルトで用意されてる． &lt;a href=&#34;https://help.github.com/en/actions/automating-your-workflow-with-github-actions/authenticating-with-the-github_token#permissions-for-the-github_token&#34;&gt;スコープについてはここに書いてある&lt;/a&gt;． packages の read/write があるのでそのまま利用できるね．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;まぁきっと数ヶ月後ぐらいにはキャッシュ容量の制限が緩和されてこんなことしなくても良くなると思うけど．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/11/30/215950</id><title type="text">状態機械を合成してデッドロックを検出できる Go 言語パッケージを作ってみました</title><updated>2019-11-30T21:59:50+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/11/30/215950"/><summary type="html">はじめに マルチスレッドで動作するプログラムの設計は難しい問題です。個々のスレッドの動作は単純に見えても、複数が並行して動作する場合の動作は組み合わせ論的に複雑になります。また、タイミングに依存する不具合は狙って再現することが難しく、通常の単体テストによる検出にも限界があります。 そんなとき、有効な手法がモデル検査です。システムの取りうる状態をあらかじめ網羅的に探索することで、「実際に動作させた際にごく低い確率で踏むバグ」であっても、動作させることなく設計段階で発見することが可能になります。 ところでちょうど先日、デッドロック発見器を自作するハンズオンに参加する機会がありました。内容は非常にシ…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/haskell-day-2019.html</id><title type="text">Haskell Day 2019を開催しました！</title><updated>2019-11-29T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/haskell-day-2019.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;先日&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;11&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;9&lt;/span&gt;日、&lt;a href=&#34;https://techplay.jp/space&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;TECH PLAY SHIBUYA&lt;/span&gt;&lt;/a&gt;にて&lt;a href=&#34;https://techplay.jp/event/727059&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt;&lt;/a&gt;を開催しました。&lt;br /&gt;
今回は、各発表の概要や、アンケートの結果をお伝えしたいと思います。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#発表&#34; title=&#34;発表&#34;&gt;発表&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#関数型function-typeを見つめるプログラミング&#34; title=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;関数型&lt;span class=&#34;ascii&#34;&gt;(function type)&lt;/span&gt;を見つめるプログラミング&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hkdhigher-kinded-datatype&#34; title=&#34;hkdhigher-kinded-datatype&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HKD(Higher Kinded Datatype)&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#しんさんきぼうのderivingストラテジー&#34; title=&#34;しんさんきぼうのderivingストラテジー&#34;&gt;「しんさんきぼう」の&lt;span class=&#34;ascii&#34;&gt;Deriving&lt;/span&gt;ストラテジー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellメタプログラミングによるegisonのパターンマッチの実装&#34; title=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;メタプログラミングによる&lt;span class=&#34;ascii&#34;&gt;Egison&lt;/span&gt;のパターンマッチの実装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#関数と型で理解する自動微分&#34; title=&#34;関数と型で理解する自動微分&#34;&gt;関数と型で理解する自動微分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ghcjs-によるwebフロントエンド開発&#34; title=&#34;ghcjs-によるwebフロントエンド開発&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt; による&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フロントエンド開発&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskellで作る競技型イベントの裏側&#34; title=&#34;haskellで作る競技型イベントの裏側&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る競技型イベントの裏側&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34; title=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;大規模数値計算を支える &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ── &lt;span class=&#34;ascii&#34;&gt;Pragmatic Haskell in Large-Scale Numerical Computation&lt;/span&gt;──&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cadenza-building-fast-functional-languages-on-the-jvm&#34; title=&#34;cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Cadenza: Building fast functional languages on the JVM&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lt&#34; title=&#34;lt&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#アンケート結果&#34; title=&#34;アンケート結果&#34;&gt;アンケート結果&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-以外のプログラミングに関する質問&#34; title=&#34;haskell-以外のプログラミングに関する質問&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 以外のプログラミングに関する質問&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#エンジニアの経験年数はどれくらいですか&#34; title=&#34;エンジニアの経験年数はどれくらいですか&#34;&gt;エンジニアの経験年数はどれくらいですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#得意なプログラミング言語はなんですか&#34; title=&#34;得意なプログラミング言語はなんですか&#34;&gt;得意なプログラミング言語はなんですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#得意好きな技術領域はどれですか&#34; title=&#34;得意好きな技術領域はどれですか&#34;&gt;得意・好きな技術領域はどれですか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#最近注目している技術があれば記述してください&#34; title=&#34;最近注目している技術があれば記述してください&#34;&gt;最近注目している技術があれば記述してください&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-に関する質問&#34; title=&#34;haskell-に関する質問&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-をいつ頃始めましたか&#34; title=&#34;haskell-をいつ頃始めましたか&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; をいつ頃始めましたか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-を初めてどれくらい経ちますか&#34; title=&#34;haskell-を初めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; を初めてどれくらい経ちますか？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#読んだことのある日本語の-haskell-本は&#34; title=&#34;読んだことのある日本語の-haskell-本は&#34;&gt;読んだことのある日本語の &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 本は？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;おわりに&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#あわせて読みたい&#34; title=&#34;あわせて読みたい&#34;&gt;あわせて読みたい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;発表&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#発表&#34; title=&#34;発表&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;発表&lt;/h1&gt;
&lt;p&gt;まずは各種発表の紹介から。&lt;/p&gt;
&lt;h2 id=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#関数型function-typeを見つめるプログラミング&#34; title=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;関数型&lt;span class=&#34;ascii&#34;&gt;(function type)&lt;/span&gt;を見つめるプログラミング&lt;/h2&gt;
&lt;p&gt;「関数型」 — すなわち&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でいうところの&lt;code&gt;a -&amp;gt; b&lt;/code&gt;で表される、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数について、ちょっと見方を変えた新しい発見を教えてくれました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nobsun/hday2019/blob/master/doc/ftype.pdf&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/nobsun.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;hkdhigher-kinded-datatype&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#hkdhigher-kinded-datatype&#34; title=&#34;hkdhigher-kinded-datatype&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;HKD(Higher Kinded Datatype)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Higher Kinded Datatype (HKD)&lt;/span&gt;という、昨今&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界で流行りの型定義方法を解説しています。&lt;br /&gt;
レコード型を定義する際&lt;span class=&#34;ascii&#34;&gt;HKD&lt;/span&gt;にすることで、より柔軟に扱うことができるようになります。&lt;br /&gt;
さらに、&lt;a href=&#34;http://hackage.haskell.org/package/barbies&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;barbies&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/extensible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;&lt;/a&gt;といった、&lt;span class=&#34;ascii&#34;&gt;HKD&lt;/span&gt;の利用を飛躍的に促進するパッケージも紹介されました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/fumieval.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;しんさんきぼうのderivingストラテジー&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#しんさんきぼうのderivingストラテジー&#34; title=&#34;しんさんきぼうのderivingストラテジー&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;「しんさんきぼう」の&lt;span class=&#34;ascii&#34;&gt;Deriving&lt;/span&gt;ストラテジー&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の&lt;code&gt;deriving&lt;/code&gt;機能 — 型を定義したとき、型クラスのインスタンスまで自動で定義してくれるあの機能ですね — の、適用範囲を広げる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の言語拡張をいろいろ紹介してくれました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2019-deriving/#/&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/aiya000.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellメタプログラミングによるegisonのパターンマッチの実装&#34; title=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;メタプログラミングによる&lt;span class=&#34;ascii&#34;&gt;Egison&lt;/span&gt;のパターンマッチの実装&lt;/h2&gt;
&lt;p&gt;プログラミング言語&lt;a href=&#34;https://www.egison.org/ja/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Egison&lt;/span&gt;&lt;/a&gt;の核となる機能である強力なパターンマッチを、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の各種拡張を駆使することで、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードに自然に埋め込めるような形で実装した、という話です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.egison.org/download/20191109HaskellDay.pdf&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/egison/egison-haskell&#34;&gt;紹介しているライブラリーのソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/egison.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;関数と型で理解する自動微分&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#関数と型で理解する自動微分&#34; title=&#34;関数と型で理解する自動微分&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;関数と型で理解する自動微分&lt;/h2&gt;
&lt;p&gt;関数の自動微分を行うパッケージ&lt;a href=&#34;http://hackage.haskell.org/package/ad&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ad&lt;/span&gt;&lt;/a&gt;の仕組みを自力で実装してみることで解説してくれました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/lotz84/guan-shu-toxing-deli-jie-suruzi-dong-wei-fen&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/lotz.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;ghcjs-によるwebフロントエンド開発&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghcjs-によるwebフロントエンド開発&#34; title=&#34;ghcjs-によるwebフロントエンド開発&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt; による&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;フロントエンド開発&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/miso&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;miso&lt;/span&gt;&lt;/a&gt;というおいしそうな名前のアプリケーションフレームワークと、&lt;span class=&#34;ascii&#34;&gt;Firebase&lt;/span&gt;と連携する&lt;span class=&#34;ascii&#34;&gt;miso&lt;/span&gt;のサンプルを、ライブコーディングを通して紹介してくれました。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;miso&lt;/span&gt;を使えば、&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt;を使って&lt;span class=&#34;ascii&#34;&gt;Elm Architecture&lt;/span&gt;風の設計に基づいてアプリケーションを作ったり、さらにそのコードを利用してサーバーサイドレンダリングをしたりできます。&lt;/p&gt;
&lt;p&gt;ℹ️資料はまだ公開されていません！当日はライブコーディングが大半の時間を占めていたため、同等の解説を文章にして公開したいというチェシャ猫さんの意向によるものです。&lt;br /&gt;
現在執筆中のためお待ちください。🙇&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/y-taka-23/miso-firebase-tutorial&#34;&gt;発表中に使用したソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/y_taka_23.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;haskellで作る競技型イベントの裏側&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskellで作る競技型イベントの裏側&#34; title=&#34;haskellで作る競技型イベントの裏側&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作る競技型イベントの裏側&lt;/h2&gt;
&lt;p&gt;「&lt;span class=&#34;ascii&#34;&gt;mixi git challenge&lt;/span&gt;」というイベントにおいてユーザーが投稿した解答を採点するサーバーを、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Elm&lt;/span&gt;で一から書き直した、という事例を発表してくれました。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/rio&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;rio&lt;/span&gt;&lt;/a&gt;や&lt;a href=&#34;http://hackage.haskell.org/package/servant&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;servant&lt;/span&gt;&lt;/a&gt;といった著名なパッケージを使うだけでなく、足りないところを自力で補って新しいパッケージとして公開したり、さらに作成したアプリケーション自体を&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;として公開したりすることで、大きな資産を残していただけました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/noob00/haskell-191796924&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matsubara0507/git-plantation&#34;&gt;紹介しているアプリケーションのソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/matsubara0507.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34; title=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;大規模数値計算を支える &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; ── &lt;span class=&#34;ascii&#34;&gt;Pragmatic Haskell in Large-Scale Numerical Computation&lt;/span&gt;──&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.deepflow.co.jp/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;DeepFlow&lt;/span&gt;株式会社&lt;/a&gt;における&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の事例の紹介です。&lt;br /&gt;
超高速で大規模な数値計算システムを、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の多様な言語拡張を駆使して作っているそうです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Tagless Final&lt;/span&gt;を活用することで知っているべき領域を区分して仕事を分けることに成功しているという点が印象的でした。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/konn/da-gui-mo-shu-zhi-ji-suan-wozhi-eru-haskell-nil-nil-pragmatic-haskell-in-large-scale-numerical-computation-nil-nil&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/mr_konn.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#cadenza-building-fast-functional-languages-on-the-jvm&#34; title=&#34;cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Cadenza: Building fast functional languages on the JVM&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ekmett.github.io/cadenza/cadenza/index.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;cadenza&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;Truffle&lt;/span&gt;（&lt;span class=&#34;ascii&#34;&gt;GraalVM&lt;/span&gt;に含まれている、高速なインタープリター作成フレームワーク）製の関数型言語の紹介です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Truffle&lt;/span&gt;がもたらす強力な&lt;span class=&#34;ascii&#34;&gt;JIT&lt;/span&gt;と「&lt;span class=&#34;ascii&#34;&gt;Normalization by Evaluation&lt;/span&gt;」という技術を応用することで、型検査と実行時両方における高いスピードを得ることが狙いだそうです。 将来的には依存型言語における型チェックや、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のランタイムの高速化に寄与したいとのことです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1bwYO66xUKeHyR4YCNm_1C82JlDNQLUXv/view&#34;&gt;資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ekmett/cadenza&#34;&gt;紹介しているアプリケーションのソースコードはこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/ekmett.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;lt&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#lt&#34; title=&#34;lt&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;LT&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;今回は&lt;span class=&#34;ascii&#34;&gt;Hakell Day&lt;/span&gt;史上初めての試みとして、&lt;span class=&#34;ascii&#34;&gt;Lightning Talk&lt;/span&gt;を当日公募しました。&lt;br /&gt;
残念ながら&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;分間という短い制限時間に収められない発表が大半でしたので、ぜひ👇の資料を読んでみてください！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;順番が間違っていたら済みません！ご指摘を！&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1TiDWz3zLUwEWgpzXfgVZFIib6JtYriB03TVgHsimJC0/edit#slide=id.gc6f73a04f_0_0&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;3D Model in Haskell - Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;3D&lt;/span&gt;モデルに触れる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://speakerdeck.com/cyclone_t/iot-cases-with-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;IoT&lt;/span&gt;やってます&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/jabaraster/haskell-day-2019-lt-tomoyuki-kawano&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Quora&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;への愛を語る&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitpitch.com/coord-e/slide-type-class-impl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で作ってわかる型クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/1YGKjl8S-LlfuB8yrHnKSK5G5MGsP9xd3/view&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Abstract Typeclasses - How To Design a Future-Proof Typeclass&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mew.org/~kazu/material/2019-gc.pdf&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;GC&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;アンケート結果&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#アンケート結果&#34; title=&#34;アンケート結果&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;アンケート結果&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day&lt;/span&gt; の各セッションや、参加者のバックグランドなどについてアンケートをとりました。 なので、後者の方の集計結果を載せたいと思います（前者はセッション発表者へのフィードバック）。&lt;/p&gt;
&lt;h2 id=&#34;haskell-以外のプログラミングに関する質問&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-以外のプログラミングに関する質問&#34; title=&#34;haskell-以外のプログラミングに関する質問&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 以外のプログラミングに関する質問&lt;/h2&gt;
&lt;p&gt;大きく分けて &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問とそうでない質問がありました。 まずは &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 以外に関する質問の方を集計結果を紹介します。&lt;/p&gt;
&lt;h3 id=&#34;エンジニアの経験年数はどれくらいですか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#エンジニアの経験年数はどれくらいですか&#34; title=&#34;エンジニアの経験年数はどれくらいですか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;エンジニアの経験年数はどれくらいですか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question1.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;得意なプログラミング言語はなんですか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#得意なプログラミング言語はなんですか&#34; title=&#34;得意なプログラミング言語はなんですか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;得意なプログラミング言語はなんですか？&lt;/h3&gt;
&lt;p&gt;ちなみに、言語のリストは &lt;a href=&#34;https://haskellweekly.news/survey/2019.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Survey 2019&lt;/span&gt;&lt;/a&gt; を参考にしました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question2.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;得意好きな技術領域はどれですか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#得意好きな技術領域はどれですか&#34; title=&#34;得意好きな技術領域はどれですか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;得意・好きな技術領域はどれですか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question3.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;最近注目している技術があれば記述してください&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#最近注目している技術があれば記述してください&#34; title=&#34;最近注目している技術があれば記述してください&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;最近注目している技術があれば記述してください&lt;/h3&gt;
&lt;p&gt;自由記述形式にしたところ、ほとんど重複が無かったので箇条書きにします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;FP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;匿名暗号通貨&lt;span class=&#34;ascii&#34;&gt;(Monero,Zcash,Dash,Koto)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Cardano ADA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GraphQL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;extensible&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Enigma&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;worker&lt;/span&gt;ベースの非同期プログラミング&lt;/li&gt;
&lt;li&gt;フロント界隈&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Next.js&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;自然言語処理&lt;/li&gt;
&lt;li&gt;型レベルプログラミング&lt;/li&gt;
&lt;li&gt;自動微分&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;AWS&lt;/span&gt;によるサーバーレスアーキテクチャでのフルスタック&lt;span class=&#34;ascii&#34;&gt;Web&lt;/span&gt;アプリケーション開発&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Rust&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Kubernetes&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;TLA+&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;algebraic effects and handlers&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;深層学習コンパイラ&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;AR&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;定理証明支援系&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;haskell-に関する質問&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-に関する質問&#34; title=&#34;haskell-に関する質問&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問&lt;/h2&gt;
&lt;p&gt;ちなみに、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; に関する質問は &lt;span class=&#34;ascii&#34;&gt;Haskell Day 2018&lt;/span&gt; でもアンケートしました。&lt;/p&gt;
&lt;h3 id=&#34;haskell-をいつ頃始めましたか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-をいつ頃始めましたか&#34; title=&#34;haskell-をいつ頃始めましたか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; をいつ頃始めましたか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question4.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;haskell-を初めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-を初めてどれくらい経ちますか&#34; title=&#34;haskell-を初めてどれくらい経ちますか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; を初めてどれくらい経ちますか？&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question5.jpg&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;読んだことのある日本語の-haskell-本は&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#読んだことのある日本語の-haskell-本は&#34; title=&#34;読んだことのある日本語の-haskell-本は&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;読んだことのある日本語の &lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt; 本は？&lt;/h3&gt;
&lt;p&gt;参照&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://wiki.haskell.jp/Links#書籍&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://wiki.haskell.jp/Links#&lt;/span&gt;書籍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/img/2019/haskell-day-2019/question6.jpg&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おわりに&lt;/h1&gt;
&lt;p&gt;以上の発表に加えて今回は、下記のスポンサー企業の皆様や&lt;span class=&#34;ascii&#34;&gt;@fumieval&lt;/span&gt;くんのおかげで、大変満足度の高い懇親会ができました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mvrck.co.jp/&#34;&gt;マーベリック株式会社&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://herp.co.jp/&#34;&gt;株式会社&lt;span class=&#34;ascii&#34;&gt;HERP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.iij.ad.jp/&#34;&gt;株式会社インターネットイニシアティブ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cryptact.com/&#34;&gt;株式会社クリプタクト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/haskell-day-2019/after-party.jpg&#34; alt=&#34;懇親会で振る舞われた料理&#34; /&gt;&lt;figcaption&gt;懇親会で振る舞われた料理&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;発表について。&lt;br /&gt;
昨年は「&lt;a href=&#34;https://haskell-jp.connpass.com/event/92617/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ちょっと興味あるからちょっとできるまで&lt;/a&gt;」というテーマを意識して、発表の難易度別に時間帯が分かれるよう調整しましたが、残念ながらうまくいきませんでした。&lt;br /&gt;
そこで難易度調整の難しさを痛感したため、今回は敢えて難易度調整を行わなかったのです。&lt;br /&gt;
結果、全体として難しい発表に偏ってしまった点は少し反省です。&lt;a href=&#34;https://eng-blog.iij.ad.jp/archives/3467&#34;&gt;私が会社で開いている&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;勉強会&lt;/a&gt;に毎回参加いただいている同僚も、総じて難しくて追いつくのが大変だった、と仰ってました。&lt;br /&gt;
次回は特別に難易度を下げた発表枠をいくつか作り、内容を事前に精査する、なんてプランを考えています。&lt;/p&gt;
&lt;p&gt;会場について。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;TECHPLAY SHIBUYA&lt;/span&gt;は素晴らしいですね！&lt;br /&gt;
我々のようなお金がないコミュニティーが今回の規模のイベントを行うのにうってつけでした。&lt;br /&gt;
元々イベントを開催する前提で作られており、受付と演壇が近いため受付しながら発表を聞くことができるのも、持ち回りで受付をしている我々にとって好都合でした。&lt;br /&gt;
来年も是非使わせていただきたいです🙏&lt;/p&gt;
&lt;p&gt;最後に。&lt;br /&gt;
発表者のみなさんはもちろん、支えていただいたスタッフ、スポンサー企業、会場まで足を運んでいただいた参加者の皆様、その他この会の実現に関わったすべての方々に、この場を借りて感謝の意を示したいと思います。&lt;br /&gt;
みなさんのご協力おかげで、大きなトラブルもなく、楽しいイベントが開催できました。ありがとうございます。&lt;br /&gt;
今後も日本&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ユーザーグループ（&lt;span class=&#34;ascii&#34;&gt;a.k.a. Haskell-jp&lt;/span&gt;）をよろしくお願いします！&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;hask(_ _)eller&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;あわせて読みたい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#あわせて読みたい&#34; title=&#34;あわせて読みたい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;あわせて読みたい&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;参加者による参加レポート&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hiratara.hatenadiary.jp/entry/2019/11/09/110030&#34;&gt;今日は &lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt; の日です &lt;span class=&#34;ascii&#34;&gt;-&lt;/span&gt; 北海道苫小牧市出身の初老&lt;span class=&#34;ascii&#34;&gt;PG&lt;/span&gt;が書くブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ncaq.net/2019/11/09/20/56/00/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt;に参加しました &lt;span class=&#34;ascii&#34;&gt;- ncaq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Day 2019&lt;/span&gt; に参加してきた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.jp/blog/posts/2018/haskell-day-2018.html&#34;&gt;去年の開催レポート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/haskell-in-vrchat.html&#34; lang=&#34;ja&#34;&gt;VRのためにHaskellを使った話&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hiw-copilot.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、Copilotという内部DSLについて&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/21/FFI_%E3%81%A7_Haskell_%E3%81%8B%E3%82%89_Rust_%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B</id><title type="text">FFI で Haskell から Rust を利用する</title><updated>2019-11-22T13:28:53+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/21/FFI_%E3%81%A7_Haskell_%E3%81%8B%E3%82%89_Rust_%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B"/><summary type="html">Rust で作ったライブラリーを静的リンクして Haskell（GHC）から使う例と説明を書いた。 github.com</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/10/23/%E6%9C%80%E8%BF%91%E3%81%AE%E8%87%AA%E5%88%86%E3%81%AE_Haskell_%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%EF%BC%88Windows%EF%BC%89</id><title type="text">最近の自分の Haskell 開発環境（Windows）</title><updated>2019-11-21T09:09:44+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/10/23/%E6%9C%80%E8%BF%91%E3%81%AE%E8%87%AA%E5%88%86%E3%81%AE_Haskell_%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%EF%BC%88Windows%EF%BC%89"/><summary type="html">id:syocy のブログを見たので Windows で自分がどうしているかをメモしておく。 syocy.hatenablog.com Stack 最近は ghcup があるがシェルスクリプト製で自分は PowerShell ユーザーなので stack を使っている。（ghcup はなんで Haskell 製じゃないんだ1？） GHC 8.8 を使うには resolver は ghc-8.8 や nightly を指定する。まだ LTS にはなっていない。 エディター エディターは Spacemacs を使っている。前は IntelliJ IDEA に HaskForce プラグインを入れて使…</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/11/mac-mojava.html</id><title type="text">[mac] Mojavaクリーンインストール</title><updated>2019-11-16T09:38:23.124+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/11/mac-mojava.html"/><summary type="text">Mojavaへのアップデートを契機にmac book airを初期化して環境をクリーンセットアップしました。
自分にとって使いやすい環境の設定手順および、インストールしたアプリ群の情報をメモがわりに残しておきます。



システム環境設定

トラックパッド

軌跡の速さを速くする 
「スクロールとズーム」内の「スクロールの方向」を「ナチュラル」にする
「その他のジェスチャー」内の全てのチェックを外す

アクセシビリティ

マウスとトラックパッド

トラックパッドオプション

「ドラッグを有効にする」にチェック

→ダブルタップでドラッグできるようになる

「ドラッグロックなし」を選択

→トラックパッドから手を離すとドラッグ解除





キーボード

F1, F2などのキーを標準のファンクションキーとして利用する：チェック

Dock

 最近使ったアプリケーションをDock に追加</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-11-15-line-charts-with-elm.html</id><title type="text">Elm で line charts する</title><updated>2019-11-15T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-11-15-line-charts-with-elm.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Elm で作っているスコアボードにスコアの線グラフを追加したかったので &lt;a href=&#34;https://package.elm-lang.org/packages/terezka/line-charts/&#34;&gt;&lt;code&gt;terezka/line-charts&lt;/code&gt;&lt;/a&gt; というパッケージを使って追加した． っていうメモ書き。 追加の PR はこれです:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/git-plantation/pull/49&#34;&gt;スコアボードにグラフを描写するページを追加 by matsubara0507 · Pull Request #49 · matsubara0507/git-plantation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最終的に出来上がったグラフがこんな感じ:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/line-charts-with-elm/graph.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;実は色をランダムに生成している部分がキモ(?)です． ちなみに，本記事で扱う &lt;code&gt;terezka/line-charts&lt;/code&gt; パッケージのバージョンは 2.0 です．&lt;/p&gt;
&lt;h2 id=&#34;terezkaline-charts&#34;&gt;terezka/line-charts&lt;/h2&gt;
&lt;p&gt;どんなグラフが書けるかは作者が用意してる&lt;a href=&#34;https://terezka.github.io/line-charts&#34;&gt;サンプルページ&lt;/a&gt;を見ると良い． ただし，&lt;code&gt;see source&lt;/code&gt; ボタンで右からニュッっと出てくるソースコードは Elm 0.19 では動かない点に注意． サンプルページのコードはおそらく&lt;a href=&#34;https://github.com/terezka/line-charts/blob/2.0.0/docs/src&#34;&gt;ココ&lt;/a&gt;にある．&lt;/p&gt;
&lt;p&gt;今回は競技プログラミングのスコア変遷をグラフ化したかったので &lt;a href=&#34;https://github.com/terezka/line-charts/blob/2.0.0/docs/src/Stepped.elm&#34;&gt;&lt;code&gt;Steeped&lt;/code&gt;&lt;/a&gt; というグラフを使うことにする(段々になっているやつ)．&lt;/p&gt;
&lt;h3 id=&#34;linechart.viewcustom-を使ってみる&#34;&gt;&lt;code&gt;LineChart.viewCustom&lt;/code&gt; を使ってみる&lt;/h3&gt;
&lt;p&gt;グラフを描写するには &lt;code&gt;LineChart.viewCustom&lt;/code&gt; 関数を使う:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewCustom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;  : &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Series&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Svg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1引数めがどうのように描写するかの設定で，2引数目は描写する(プロットする)データのリストをである． &lt;code&gt;Config data msg&lt;/code&gt; 型は次のようになっている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Axis&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;y&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Axis&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;container&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Container&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;intersection&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Axis&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Intersection&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;interpolation&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Interpolation&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;legends&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Legends&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;events&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Events&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;area&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Area&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;grid&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Grid&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-11&#34;&gt;&lt;a href=&#34;#cb2-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;line&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Line&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-12&#34;&gt;&lt;a href=&#34;#cb2-12&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;dots&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Dots&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-13&#34;&gt;&lt;a href=&#34;#cb2-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;junk&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Junk&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-14&#34;&gt;&lt;a href=&#34;#cb2-14&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それぞれサブモジュールの設定をしている(例えば &lt;code&gt;container&lt;/code&gt; フィールドは &lt;code&gt;LineChart.Container&lt;/code&gt; モジュール):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; はX軸とY軸の設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;container&lt;/code&gt; はグラフを描写する外枠の設定(たぶん)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersection&lt;/code&gt; は両軸の交点の設定(真ん中にするとか左下にするとか)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interpolation&lt;/code&gt; は点と点を結ぶ線の引き方を設定(直線か曲線かなど)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;legends&lt;/code&gt; はグラフの凡例のを設定(どの線が何のグラフかなど)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;events&lt;/code&gt; はグラフ上でのイベント(&lt;code&gt;Msg&lt;/code&gt;)を設定(クリックとかマウスホバーとか)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;area&lt;/code&gt; は線の下の部分の描写の仕方を設定
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; だと何も描写しないのでただの線グラフになる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normal&lt;/code&gt; だと同じ色で塗りつぶしてくれる(引数は &lt;code&gt;opacity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid&lt;/code&gt; はグラフのグリッドを設定(そのまんま)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line&lt;/code&gt; は線の幅やホバーした時の動作を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dots&lt;/code&gt; は点の大きさやホバーした時の動作を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;junk&lt;/code&gt; は点や線にホバーした時にモーダル(?)かなんかを表示する設定(たぶん)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は基本的にサンプルコードのまんまで，軸や &lt;code&gt;junk&lt;/code&gt; の設定を少しだけいじった．&lt;/p&gt;
&lt;h3 id=&#34;プロットデータを用意する&#34;&gt;プロットデータを用意する&lt;/h3&gt;
&lt;p&gt;2引数目の &lt;code&gt;Series data&lt;/code&gt; はプロットしたいデータ型(&lt;code&gt;data&lt;/code&gt;)に描写するための情報を付与したデータ型だ． 次の関数などで変換する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;line&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Series&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;dash&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Shape&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Series&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;line&lt;/code&gt; は直線で &lt;code&gt;dash&lt;/code&gt; はたぶん破線． &lt;code&gt;Color&lt;/code&gt; は色を，&lt;code&gt;Shape&lt;/code&gt; は &lt;code&gt;LineChart.Dots&lt;/code&gt; にある関数で点の形を，&lt;code&gt;String&lt;/code&gt; は線の凡例名を与える． で，実際のプロットデータは &lt;code&gt;List data&lt;/code&gt; だ． &lt;code&gt;data&lt;/code&gt; から何をX軸にして，何をY軸にするかは &lt;code&gt;Config&lt;/code&gt; の &lt;code&gt;x&lt;/code&gt;・&lt;code&gt;y&lt;/code&gt; で指定する(&lt;code&gt;variable&lt;/code&gt;)．&lt;/p&gt;
&lt;p&gt;今回は，各チームのスコアデータの時間毎での遷移を描写したいので，X軸に正解時間をY軸に総ポイントを割り当てる． そのためのデータ型を用意した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ScoreHistory&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;point&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;                &lt;span class=&#34;co&#34;&gt;-- 総ポイント&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;latest&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- 最後にクリアステータス&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;problem_id&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;correct&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;           &lt;span class=&#34;co&#34;&gt;-- クリアしてると True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;corrected_at&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- まだクリアしてないと Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Status&lt;/code&gt; はもともとある型で，サーバーサイドからスコア(&lt;code&gt;Score&lt;/code&gt;)を取得する際に用いる． このサーバーからのスコアから &lt;code&gt;Series ScoreHistory&lt;/code&gt; を構築する関数を用意した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Score&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;team&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;point&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stats&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;buildScoreHistories&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Score&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LineChart&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Series&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ScoreHistory&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;buildScoreHistories&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;stats&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;correct&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;sortBy&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;corrected_at&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;scanl&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;::&lt;/span&gt;) []&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;buildScoreHistory&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-14&#34;&gt;&lt;a href=&#34;#cb5-14&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;LineChart&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Dots&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;circle&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;team&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-15&#34;&gt;&lt;a href=&#34;#cb5-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-16&#34;&gt;&lt;a href=&#34;#cb5-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;buildScoreHistory&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ScoreHistory&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-17&#34;&gt;&lt;a href=&#34;#cb5-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;buildScoreHistory&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stats&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-18&#34;&gt;&lt;a href=&#34;#cb5-18&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;point&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;sum&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;findProblemPoint&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;stats&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-19&#34;&gt;&lt;a href=&#34;#cb5-19&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;latest&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;stats&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-20&#34;&gt;&lt;a href=&#34;#cb5-20&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb5-21&#34;&gt;&lt;a href=&#34;#cb5-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-22&#34;&gt;&lt;a href=&#34;#cb5-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- どの問題が何点かは `Model.problems` にしか書いてない&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-23&#34;&gt;&lt;a href=&#34;#cb5-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;findProblemPoint&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;API&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-24&#34;&gt;&lt;a href=&#34;#cb5-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;findProblemPoint&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-25&#34;&gt;&lt;a href=&#34;#cb5-25&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;problems&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-26&#34;&gt;&lt;a href=&#34;#cb5-26&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;find&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;problem_id&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-27&#34;&gt;&lt;a href=&#34;#cb5-27&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;difficulty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-28&#34;&gt;&lt;a href=&#34;#cb5-28&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;scanl&lt;/code&gt; で綺麗になってるのが気持ちいい． また，&lt;code&gt;variable&lt;/code&gt; は次のように設定した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;chart&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;chart&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;LineChart&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;viewCustom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;        { &lt;span class=&#34;fu&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Axis&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;custom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;                { &lt;span class=&#34;fu&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Title&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;variable&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;point&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pixels&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;380&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;padded&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;axisLine&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AxisLine&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;full&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Colors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;gray&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ticks&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ticks&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;float&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- これは軸に表示する数字の間隔&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;Axis&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;custom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;                { &lt;span class=&#34;fu&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Title&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Time&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;variable&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;                    &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;toFloat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;                      &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (\&lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1000&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- 確かデフォルト millisec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;                      &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;andThen&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;corrected_at&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;                      &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;latest&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pixels&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1270&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Range&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;padded&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;axisLine&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AxisLine&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;full&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Colors&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;gray&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-24&#34;&gt;&lt;a href=&#34;#cb6-24&#34;&gt;&lt;/a&gt;                &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ticks&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ticks&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;zone&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-25&#34;&gt;&lt;a href=&#34;#cb6-25&#34;&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id=&#34;cb6-26&#34;&gt;&lt;a href=&#34;#cb6-26&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-27&#34;&gt;&lt;a href=&#34;#cb6-27&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さて，ここまではいい感じにできた． 問題は &lt;code&gt;buildScoreHistories&lt;/code&gt; の &lt;code&gt;Color&lt;/code&gt; にどうやってチームごとに違う色を渡すか． &lt;code&gt;LineChart.Colors&lt;/code&gt; には事前に色が用意されていたが全部で22色ぐらいしかない． できればチーム数に応じて可変にしたい．&lt;/p&gt;
&lt;h2 id=&#34;color-を付け変える&#34;&gt;Color を付け変える&lt;/h2&gt;
&lt;p&gt;グラフ描写に使うグラフの色はチーム数によって可変にしたい． 色を任意個数だけ生成する方法はないか調べてみたところ，&lt;a href=&#34;https://package.elm-lang.org/packages/tesk9/palette&#34;&gt;&lt;code&gt;tesk9/palette&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;Palette.Cubehelix.generate&lt;/code&gt; を使えば実現できそうだ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; ただし &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;256&lt;/span&gt; の間だけ有効&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;generate&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで問題が一つ． line-charts は別の &lt;code&gt;Color&lt;/code&gt; パッケージに依存しており，&lt;code&gt;Color&lt;/code&gt; モジュールが衝突して使うことができない！&lt;/p&gt;
&lt;p&gt;困った． とりあえず，フォークして差し替えるしかない． 差し替えたものがコチラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/line-charts/tree/color-palette&#34;&gt;matsubara0507/line-charts at color-palette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm のビルドツールにはパッケージをいい感じにフォーク先などに変更する方法がない． ざっくり調べてみたところ，フォークしたもの elm-packages にあげて使うか，プロジェクト内にフォークしたリポジトリを直接置いて参照するか． Elm-jp でも相談してみたところ，後者の方が良さそうなのでそうすることにした．&lt;/p&gt;
&lt;h3 id=&#34;elm-のパッケージをフォークしたのにa差し替える&#34;&gt;Elm のパッケージをフォークしたのにa差し替える&lt;/h3&gt;
&lt;p&gt;まずは普通に &lt;code&gt;git submodule&lt;/code&gt; をします:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir elm-lib
$ git submodule add git@github.com:matsubara0507/line-charts.git elm-lib/line-charts
$ elm-lib/line-charts
$ git checkout color-palette&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そしてこのディレクトリも見るように &lt;code&gt;elm.json&lt;/code&gt; を書き換えます:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode diff&#34;&gt;&lt;code class=&#34;sourceCode diff&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;@@ -1,30 +1,40 @@&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;  {&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;      &amp;quot;type&amp;quot;: &amp;quot;application&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;      &amp;quot;source-directories&amp;quot;: [&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-         &amp;quot;elm-src&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+         &amp;quot;elm-src&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+         &amp;quot;elm-lib/line-charts/src&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;      ],&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，適当に &lt;code&gt;import LineChart&lt;/code&gt; を追記して &lt;code&gt;elm make&lt;/code&gt; するとどうなるでしょうか？ 残念ながらうまくいきません:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elm make elm-src/Main.elm --output=static/main.js
-- UNKNOWN IMPORT -------- elm-lib/line-charts/src/Internal/Axis/Values/Time.elm

The Internal.Axis.Values.Time module has a bad import:

    import Time.Extra

I cannot find that module! Is there a typo in the module name?

The &amp;quot;source-directories&amp;quot; field of your elm.json tells me to look in directories
like elm-src, but it is not in any of them. Maybe it is in a package that is not
installed yet?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Time.Extra&lt;/code&gt; は line-charts が依存しているパッケージで，それが &lt;code&gt;elm.json&lt;/code&gt; に書かれてないというエラーメッセージです． サブモジュール側の依存パッケージは自動で解決してくれない(単純にローカルのソースコードが増えてるだけなので，そりゃそうって感じだ)． なので，自分で書き足す必要がある:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode diff&#34;&gt;&lt;code class=&#34;sourceCode diff&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;diff --git a/elm.json b/elm.json&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;index 30d0662..7c32604 100644&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;--- a/elm.json&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;+++ b/elm.json&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;@@ -1,36 +1,36 @@&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;     &amp;quot;dependencies&amp;quot;: {&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;         &amp;quot;direct&amp;quot;: {&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;             &amp;quot;avh4/elm-color&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;             &amp;quot;bartavelle/json-helpers&amp;quot;: &amp;quot;2.0.2&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;debois/elm-dom&amp;quot;: &amp;quot;1.3.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;             &amp;quot;elm/browser&amp;quot;: &amp;quot;1.0.1&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;             &amp;quot;elm/core&amp;quot;: &amp;quot;1.0.2&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;             &amp;quot;elm/html&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;             &amp;quot;elm/http&amp;quot;: &amp;quot;2.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;             &amp;quot;elm/json&amp;quot;: &amp;quot;1.1.3&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;elm/svg&amp;quot;: &amp;quot;1.0.1&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;             &amp;quot;elm/time&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;             &amp;quot;elm/url&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;             &amp;quot;elm-community/list-extra&amp;quot;: &amp;quot;8.2.2&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;justinmimbs/time-extra&amp;quot;: &amp;quot;1.1.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;             &amp;quot;justinmimbs/timezone-data&amp;quot;: &amp;quot;2.1.4&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;             &amp;quot;krisajenkins/remotedata&amp;quot;: &amp;quot;6.0.1&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;terezka/line-charts&amp;quot;: &amp;quot;2.0.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;myrho/elm-round&amp;quot;: &amp;quot;1.0.4&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;ryannhg/date-format&amp;quot;: &amp;quot;2.3.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;         },&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;         &amp;quot;indirect&amp;quot;: {&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;debois/elm-dom&amp;quot;: &amp;quot;1.3.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;             &amp;quot;elm/bytes&amp;quot;: &amp;quot;1.0.8&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;             &amp;quot;elm/file&amp;quot;: &amp;quot;1.0.5&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;             &amp;quot;elm/parser&amp;quot;: &amp;quot;1.1.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;elm/svg&amp;quot;: &amp;quot;1.0.1&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-33&#34;&gt;&lt;a href=&#34;#cb11-33&#34;&gt;&lt;/a&gt;             &amp;quot;elm/virtual-dom&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id=&#34;cb11-34&#34;&gt;&lt;a href=&#34;#cb11-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;justinmimbs/date&amp;quot;: &amp;quot;3.2.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-35&#34;&gt;&lt;a href=&#34;#cb11-35&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;justinmimbs/time-extra&amp;quot;: &amp;quot;1.1.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-36&#34;&gt;&lt;a href=&#34;#cb11-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;myrho/elm-round&amp;quot;: &amp;quot;1.0.4&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-37&#34;&gt;&lt;a href=&#34;#cb11-37&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;-            &amp;quot;ryannhg/date-format&amp;quot;: &amp;quot;2.3.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-38&#34;&gt;&lt;a href=&#34;#cb11-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;+            &amp;quot;justinmimbs/date&amp;quot;: &amp;quot;3.2.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-39&#34;&gt;&lt;a href=&#34;#cb11-39&#34;&gt;&lt;/a&gt;         }&lt;/span&gt;
&lt;span id=&#34;cb11-40&#34;&gt;&lt;a href=&#34;#cb11-40&#34;&gt;&lt;/a&gt;     },&lt;/span&gt;
&lt;span id=&#34;cb11-41&#34;&gt;&lt;a href=&#34;#cb11-41&#34;&gt;&lt;/a&gt;     &amp;quot;test-dependencies&amp;quot;: {&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで無事 &lt;code&gt;elm make&lt;/code&gt; をすることができるようになった．&lt;/p&gt;
&lt;h3 id=&#34;palette.cubehelix-を使ってみる&#34;&gt;&lt;code&gt;Palette.Cubehelix&lt;/code&gt; を使ってみる&lt;/h3&gt;
&lt;p&gt;いよいよ &lt;code&gt;Palette.Cubehelix&lt;/code&gt; を使ってみる． そもそも Cubehelix とはなんなのか．&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/&#34;&gt;ググった感じこれっぽい&lt;/a&gt;． 宇宙を撮影した画像を描写するときのためのカラースキーマーっぽい(なにが課題なのかはよくわからなんだw)． &lt;code&gt;Palette.Cubehelix.generate :: Int -&amp;gt; List Color&lt;/code&gt; を使うことで最大で256色を返してくれる． 更にどんな感じの色を返してくれるかは &lt;code&gt;generateAdvanced&lt;/code&gt; の方を使い，&lt;code&gt;AdvancedConfig&lt;/code&gt; 型の値を自作することでコントロールできる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AdvancedConfig&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;start&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;rotationDirection&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;RotationDirection&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;rotations&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;gamma&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;色々試したところ各引数はこんな感じだった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; は HSL の Hue + Saturation を元に起点を決める&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotationDirection&lt;/code&gt; は回転方向 (RGB or BGR)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotation&lt;/code&gt; は回転角を 0-1.5 で指定（小さいほど似た色になる）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma&lt;/code&gt; は明暗な色のバランスを 0-2 で指定（0は明るい、2は暗い色が長くなる）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HSLとは RGB とは違う色の表現のし方で，色相（Hue）・彩度（Saturation）・輝度（Lightness）を指定する． 直感的なイメートして，黒から白へこうぐるっと指定した螺旋でカラーパレットを表現する感じ．&lt;/p&gt;
&lt;p&gt;物は試し，repl で色々と試すと良い(色だけに):&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;toHex&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Palette&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;generateAdvanced&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Color&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;fromHSL&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;rotationDirection&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Palette&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;RGB&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;rotations&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;gamma&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;[&lt;span class=&#34;st&#34;&gt;&amp;quot;#000000&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#311410&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#3C3F0D&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#2B6F39&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#3E8590&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#8984CC&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#D490C6&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#EAB8B1&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#E5E6CA&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;#FFFFFF&amp;quot;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;   : &lt;span class=&#34;dt&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんとこれを Slack に貼ると色を確認できる(賢い)． で，最終的には最初と最後の黒白を抜いて適当に使った．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;submodule のやつしんどいし，なんか自動で &lt;code&gt;elm.json&lt;/code&gt; を書き換えてくれる CLI ツールでも作ろうかしら．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019.html</id><title type="text">Haskell Day 2019 に参加してきた</title><updated>2019-11-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;11月9日にあった「&lt;a href=&#34;https://techplay.jp/event/727059&#34;&gt;Haskell Day 2019&lt;/a&gt;」に参加してきたのでメモ書きです． 裏方もほんの少しだけ手伝ったけど，裏方については公式のブログで(誰かが)書くと思うので割愛． ただ，全部オープンな場でやりとりしてるの気になる方は Haskell-jp slack を見に行くか Haskell-jp の GitHub を漁るといいと思う．&lt;/p&gt;
&lt;h3 id=&#34;関数型function-typeを見つめるプログラミング&#34;&gt;関数型(function type)を見つめるプログラミング&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nobsun&#34;&gt;山下&lt;/a&gt;氏の発表． &lt;a href=&#34;https://github.com/nobsun/hday2019/blob/master/doc/ftype.pdf&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;関数型(プログラミング)の話かとずっと思ってたら関数「型」の話だった(よく読め)． 今回で唯一の Basics なセッション． 特別動くコードは出てこないとのこと． 話の中で &lt;code&gt;A -&amp;gt; B&lt;/code&gt; という関数型があるときに，ドメイン(&lt;code&gt;A&lt;/code&gt; 側)がさらに関数型なのは多くの人たちも慣れて来てる(他の言語の人たちも含め)が，コドメイン(&lt;code&gt;B&lt;/code&gt; 側)が関数型になるのはしっくりこない人が多いらしい．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f :: (X -&amp;gt; Y) -&amp;gt; Z -- は平気
g :: X -&amp;gt; (Y -&amp;gt; Z) -- はダメらしい(もちろん Haskell はカッコいらない)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まぁ確かに，他の言語ではあんまり使わないですね． 自分は学生の頃に，なんかのプログラミング言語に慣れる前に C/C++/Java/Ruby/Haskell を学んだから困った記憶ないけど． ちなみに「拡張適用演算子」っていう用語は山下氏の造語らしい．&lt;/p&gt;
&lt;h3 id=&#34;hkdhigher-kinded-datatype&#34;&gt;HKD(Higher Kinded Datatype)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fumieval&#34;&gt;fumieval&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;Haskell のレコードの各フィールドに共通の性質を付加したいことはしばしばある． 多相な型パラメータ &lt;code&gt;h :: Type -&amp;gt; Type&lt;/code&gt; を付けてあげれば実現可能． &lt;a href=&#34;https://hackage.haskell.org/package/barbies&#34;&gt;barbies&lt;/a&gt;パッケージを使うと自動でやってくれるし，fumieval 氏が作った &lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; パッケージはその機能もサポートしてる(2014~)． 僕は2017年ぐらいから愛用していますありがとうございます．&lt;/p&gt;
&lt;p&gt;他にも &lt;code&gt;TangleT&lt;/code&gt; という機能を紹介してましたが，なんとこのサイトを生成してる Hakyll プログラムにも &lt;code&gt;TangleT&lt;/code&gt; を使ってます笑． &lt;code&gt;TangleT&lt;/code&gt; はレコードのフィールド間に依存関係がある場合に有用で，フィールドの評価順を制御できるようになる． これと，静的サイトのレンダリング順を組み合わせたらいいんじゃね？ってなってやってみた(別段効果があったわけじゃないけど)．&lt;/p&gt;
&lt;h3 id=&#34;しんさんきぼうghcのderivingテクノロジー&#34;&gt;「しんさんきぼう」GHCのderivingテクノロジー&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/aiya000&#34;&gt;aiya000&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://aiya000.github.io/Maid/haskell-day-2019-deriving/#/&#34;&gt;発表資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表題の通り，型クラスのインスタンス宣言を容易にしてくれる &lt;code&gt;deriving&lt;/code&gt; 機能の最近の話． 標準のを含め，現在 GHC には &lt;code&gt;deriving&lt;/code&gt; は4種類もあり，特に &lt;code&gt;DerivingVia&lt;/code&gt; GHC 拡張はすごいぞ！って感じです． で，さらに4種類の &lt;code&gt;deriving&lt;/code&gt; を整理して綺麗に記述するために &lt;code&gt;DerivingStrategies&lt;/code&gt; という GHC 拡張があるとのこと．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DerivingStrategies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeBody&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeBody&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt;          (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)                &lt;span class=&#34;co&#34;&gt;-- 標準&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; stock    (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)                  &lt;span class=&#34;co&#34;&gt;-- 標準&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; anyclass (&lt;span class=&#34;dt&#34;&gt;Visible&lt;/span&gt;)             &lt;span class=&#34;co&#34;&gt;-- DeriveAnyClass&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt;  (&lt;span class=&#34;dt&#34;&gt;Enum&lt;/span&gt;)                &lt;span class=&#34;co&#34;&gt;-- GeneralizedNewtypeDeriving&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt;          (&lt;span class=&#34;dt&#34;&gt;Bounded&lt;/span&gt;) via &lt;span class=&#34;dt&#34;&gt;Person&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- DerivingVia&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(発表資料より引用)ここまでのコードは書いたことも見たこともないけど笑&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;code&gt;DerivingVia&lt;/code&gt; は僕も前に「&lt;a href=&#34;https://speakerdeck.com/konn/ben-dang-hasugoi-newtype&#34;&gt;本当はすごい newtype&lt;/a&gt;」っていう資料を読んでびっくりした記憶． 今回紹介した git-plantation では CLI の「なんらかの型の ID を列挙する」引数から「なんらかの型」を探す部分の ID 側に &lt;code&gt;DerivingVia&lt;/code&gt; を使った． 思うにただの &lt;code&gt;Int&lt;/code&gt; や &lt;code&gt;String&lt;/code&gt; になりやすい ID 系の型は &lt;code&gt;DerivingVia&lt;/code&gt; との相性がいい気がする．&lt;/p&gt;
&lt;h3 id=&#34;haskellメタプログラミングによるegisonのパターンマッチの実装&#34;&gt;HaskellメタプログラミングによるEgisonのパターンマッチの実装&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/egisatoshi&#34;&gt;江木&lt;/a&gt;氏の発表． &lt;a href=&#34;https://www.egison.org/download/20191109HaskellDay.pdf&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;egisatoshi 氏が学生時代(?)から作成し続けてるプログラミング言語 &lt;a href=&#34;https://www.egison.org&#34;&gt;Egison&lt;/a&gt; の強力なパターンマッチング機能を Haskell に導入した話． &lt;a href=&#34;https://github.com/egison/egison-haskell&#34;&gt;リポジトリは多分これ&lt;/a&gt;． Egison の機能を他の言語に突っ込むというのは Scheme ですでにやっていたが，Haskell の場合は型付けをしなくちゃいけないらしく苦労したとのこと． もう，すっごい GHC の型拡張機能をふんだんに使ってました(多くの人に手伝ってもらったらしい)．&lt;/p&gt;
&lt;p&gt;なお，スライドはめっちゃ長く，時間が足りなかったので全部のページを丁寧に説明してはなかった笑． あとで読んでだって．&lt;/p&gt;
&lt;p&gt;僕は Egison を学生の頃から知ってて，ずーっと何かに使えないかなぁって考えてるけど思いつかない． Egison パターンマッチングは，再帰の「全探索する部分」と「条件付けて絞り込む部分」の前者をサボることができるようになるらしい． つまり，順番を無視するために似たようなパターンを記述しなくて済むようになる． 順番を無視したい場合，うーん，CLI の引数とか？ 今度試してみるか(なんか違う気もする)．&lt;/p&gt;
&lt;p&gt;あ，ちなみに，最後にステマ(?)してた Egison Jornal は全部買ってます． 面白いです．&lt;/p&gt;
&lt;h3 id=&#34;関数と型で理解する自動微分&#34;&gt;関数と型で理解する自動微分&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lotz84&#34;&gt;lotz&lt;/a&gt; 氏の発表． &lt;a href=&#34;https://speakerdeck.com/lotz84/guan-shu-toxing-deli-jie-suruzi-dong-wei-fen&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;ぱっと見，一番好評だった気がする． 急に導関数が欲しくなる時がありますよね？ってことで自動で導関数を導出する方法を紹介します，って感じの話です(?)． Haskell で自動微分するためには &lt;a href=&#34;https://github.com/ekmett/ad&#34;&gt;ad&lt;/a&gt; パッケージを使うといいらしい． ちなみにこのパッケージは，今回の Haskell Day のスペシャルゲストとしていらしゃった ekmett 氏が作ったものだ． で，動作を理解するために &lt;code&gt;diff&lt;/code&gt; 関数を自作してみたっていう流れでした．&lt;/p&gt;
&lt;p&gt;本来，型エラーになって欲しい部分が型エラーにならないので，幽霊型や存在型を使って実現している． といった Haskell 型機能のアドバンスドな話から，自動微分というアカデミックな話まで，盛りだくさんでした． というか話が上手．&lt;/p&gt;
&lt;h3 id=&#34;ghcjs-による-web-フロントエンド開発&#34;&gt;GHCJS による Web フロントエンド開発&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/y-taka-23&#34;&gt;チャシャ猫&lt;/a&gt;氏の発表． &lt;a href=&#34;https://guide.elm-lang.jp/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt; を表現した GHCJS の &lt;a href=&#34;https://github.com/dmjio/miso&#34;&gt;Miso&lt;/a&gt; パッケージをライブコーデイング形式で紹介． 基本ライブコーディングだった結果，スライドはないのかな．&lt;/p&gt;
&lt;h3 id=&#34;haskell-で作る競技型イベントの裏側&#34;&gt;Haskell で作る競技型イベントの裏側&lt;/h3&gt;
&lt;p&gt;僕の発表． &lt;a href=&#34;https://www.slideshare.net/noob00/haskell-191796924&#34;&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;去年の6月ぐらいから少しずーつ作ってた &lt;a href=&#34;https://github.com/matsubara0507/git-plantation&#34;&gt;git-plantation&lt;/a&gt; の紹介． 話題が逸れるから言わなかったけど「作り直すか〜」ってやり始めたのは技術書典5のネタ用でした笑． もちろん，作り直す意義は発表した通りですよ．&lt;/p&gt;
&lt;p&gt;extensible・Servant・Elm・STM・Dhall など前回・今回の Haskell Day で出たような話題をふんだんに使ってるので「詳しくは〜」って形で引用させてもらった． この発表以外の多くは，Haskell の強力な「型」でいろんな問題を解決したよって感じの話でしたが，僕はその解決した機能をふんだんに使ってリアルアプリケーションをサクッと作ったって感じなのです． 巨人の肩に乗ろう．&lt;/p&gt;
&lt;h3 id=&#34;大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation&#34;&gt;大規模数値計算を支える Haskell ── Pragmatic Haskell in Large-Scale Numerical Computation&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/konn&#34;&gt;石井&lt;/a&gt;氏の発表． &lt;del&gt;内容があれなので写真は最初のスライドだけで，的なこと言ってたのでスライドは公開されないんじゃないかな&lt;/del&gt;&lt;a href=&#34;https://speakerdeck.com/konn/da-gui-mo-shu-zhi-ji-suan-wozhi-eru-haskell-nil-nil-pragmatic-haskell-in-large-scale-numerical-computation-nil-nil&#34;&gt;公開されました&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;GoS2014(?)で ekmett 氏にメンターをしてもらったとのこと．すごい． で，発表の内容は社長(?)が前に言っていた「&lt;a href=&#34;https://twitter.com/hiroki_f/status/1135160082373652480&#34;&gt;弊社のプロダクトはモナドで各々知っているべき領域を区分して仕事を分けています。ですので、全部知ってなくても、仕事ができます。&lt;/a&gt;」というツイートの詳しい話(代弁)． どうやら，物理系ソルバを(Haskellで)記述してる人たちが，それに注力できるように本質的な部分以外は Haskell の魔法(モナド)で隠蔽しているという感じの話らしい． 今回はその魔法についてたくさん紹介してくれた． 例えば，前にも出てきた依存型や拡張可能レコード，他にも Tagless final など． 高度な Haskell (というか GHC)の機能を Real World に消化しておりすごかった(小並感)．&lt;/p&gt;
&lt;h3 id=&#34;special-talk-cadenza-building-fast-functional-languages-on-the-jvm&#34;&gt;Special Talk: Cadenza: Building fast functional languages on the JVM&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ekmett/&#34;&gt;ekmett&lt;/a&gt; 氏の特別講演． これまたライブコーデイングでした(まさかの被り)． タイトルでも言及してる &lt;a href=&#34;https://github.com/ekmett/cadenza&#34;&gt;Cadenza ってのはこれっぽい&lt;/a&gt;． JVM の方は最近よく耳にする(?) &lt;a href=&#34;https://www.graalvm.org/&#34;&gt;GraalVM&lt;/a&gt; のことだった． ライブコーデイングの内容は単純型付きラムダ計算をささっと作ってるみたいだった．&lt;/p&gt;
&lt;h3 id=&#34;lt&#34;&gt;LT&lt;/h3&gt;
&lt;p&gt;だいたい間に合ってない笑 特にメモも何も取ってなかったのでリンクの列挙だけ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/as-capabl&#34;&gt;アズなんとかさん&lt;/a&gt;氏の「&lt;a href=&#34;https://docs.google.com/presentation/d/1TiDWz3zLUwEWgpzXfgVZFIib6JtYriB03TVgHsimJC0&#34;&gt;3D Model in Haskell&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cyclone-t&#34;&gt;CycloneT&lt;/a&gt;氏の「HaskellでIoTやってます」
&lt;ul&gt;
&lt;li&gt;業務の紹介なのでスライドは公開されてないかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jabaraster&#34;&gt;河野&lt;/a&gt;氏の「&lt;a href=&#34;https://docs.google.com/presentation/d/1xcdZ42lF64b_S0wZfi1Er-3YTs8H_Ob15BO3kpuRSMU&#34;&gt;QuoraでHaskellへの愛を語る&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/coord-e&#34;&gt;coord_e&lt;/a&gt; 氏の「&lt;a href=&#34;https://gitpitch.com/coord-e/slide-type-class-impl&#34;&gt;Haskellで作ってわかる型クラス&lt;/a&gt;」
&lt;ul&gt;
&lt;li&gt;型クラス機能自体を作る方の話だった笑(間に合ってはない)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/minoki&#34;&gt;mod_poppo&lt;/a&gt; 氏の「&lt;a href=&#34;https://drive.google.com/file/d/1YGKjl8S-LlfuB8yrHnKSK5G5MGsP9xd3/view&#34;&gt;Abstract Typeclasses&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kazu-yamamoto&#34;&gt;kazu_yamamoto&lt;/a&gt; 氏の「&lt;a href=&#34;http://www.mew.org/~kazu/material/2019-gc.pdf&#34;&gt;GHCのGC&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;さて，来年のネタ仕込みを始めるか(発表するかはさておき)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/11-10-megaparsec8.html</id><title type="text">Megaparsec 8</title><updated>2019-11-10T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/11-10-megaparsec8.html"/><summary type="html">&lt;p&gt;Great original post: &lt;a href=&#34;https://markkarpov.com/post/megaparsec-8.html&#34;&gt;Megaparsec 8&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一年が経ち、Megaparsecの新しいメジャーバージョンが再び登場する時がきました。 今回の変更は、これまでのメジャーリリースの中で最も破壊的ではない変更です。 実際、ほとんどのユーザはアップグレードのために何もする必要はないと思います。&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;これには次の理由があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;それほど多くのissue が開かれておらず、バグも報告されていません。それはMegaparsecが最近、そしてほとんど満足のいく方法で「うまくいく」という事実と関係があると思います。&lt;/li&gt;
&lt;li&gt;ライブラリは現在幅広く使用されています。この記事の執筆時点で、Megaparsecに直接依存する&lt;a href=&#34;https://packdeps.haskellers.com/reverse/megaparsec&#34;&gt;Hackageのパッケージは146個&lt;/a&gt;あります。Megaparsecの上に構築することを選択した&lt;a href=&#34;https://hackage.haskell.org/package/replace-megaparsec&#34;&gt;新しい刺激的なライブラリ&lt;/a&gt;も現れました。&lt;a href=&#34;https://github.com/idris-lang/Idris-dev&#34;&gt;Idris&lt;/a&gt;や&lt;a href=&#34;https://github.com/dhall-lang/dhall-haskell&#34;&gt;Dhall&lt;/a&gt;などのプロジェクトでは、Megaparsecを使用してパースの問題を解決しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらはライブラリが枯れ、成熟したことを示しているので、動作しているものを壊さないようにしましょう。 とはいえ、常に改善の余地があります。&lt;/p&gt;
&lt;h2 id=&#34;nixによる品質保証&#34;&gt;Nixによる品質保証&lt;/h2&gt;
&lt;p&gt;バージョン8の作業を開始する前に、Nixを使用して品質保証を強化することにしました。 現在のMegaparsecに依存するプロジェクトの数を把握し、Nixを使用して&lt;a href=&#34;https://github.com/tweag/ormolu&#34;&gt;Ormolu&lt;/a&gt;のバグを発見したという成功体験から、依存パッケージによって引き起こされる破壊的変更、パフォーマンスの変更、およびバグのチェックにNixを用いることにしました。&lt;/p&gt;
&lt;p&gt;結果をMegaparsecのリポジトリにある&lt;a href=&#34;https://github.com/mrkkrp/megaparsec/blob/master/HACKING.md&#34;&gt;HACKING.md&lt;/a&gt;に文書化しました。 開発時のshellとは別に、Nix expressionは以下のターゲットグループを提供します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base&lt;/code&gt; は &lt;code&gt;parser-combinators&lt;/code&gt; や &lt;code&gt;hspec-megaparsec&lt;/code&gt; などの密接に関連したパッケージとそのテストです。&lt;code&gt;nix-build -A base --no-out-link&lt;/code&gt; を実行することにより、開発者はこれらすべてをビルドし、テストすることができます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deps&lt;/code&gt; は選択された依存関係のもとでビルドの破壊とテストスイートの失敗が起きないことを確認します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;benches&lt;/code&gt; はベンチマークのコレクションです。これには、Megaparsecのマイクロベンチマークと、ライブラリが実際のタスクでどのように実行されるかを示すいくつかのパッケージが含まれます。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらコマンドのそれぞれで、特定のパッケージまたはベンチマークに「ズームイン」できます。 たとえば、&lt;code&gt;nix-build -A benches.parsers-bench&lt;/code&gt; を実行して、&lt;code&gt;parsers-bench&lt;/code&gt; のベンチマークを確認できます。 要するに、ほとんどのパッケージは新しい変更でも引き続き動作し、修正が容易ではないものでも動作します。 実際、システムを使い続けるためには不備のあるパッケージにパッチを適用する必要があり、そのための&lt;a href=&#34;https://github.com/mrkkrp/megaparsec/tree/31b917b1297950c22925f9ee7f7a588834293103/nix/patches&#34;&gt;アップグレード用のパッチ&lt;/a&gt;も利用可能です。&lt;/p&gt;
&lt;p&gt;ロジックやパフォーマンスの低下は見つかりませんでした。&lt;/p&gt;
&lt;h2 id=&#34;パースエラー位置の制御&#34;&gt;パースエラー位置の制御&lt;/h2&gt;
&lt;p&gt;新機能について話しましょう。 プリミティブ &lt;code&gt;failure&lt;/code&gt; と &lt;code&gt;fancyFailure&lt;/code&gt; は &lt;code&gt;parseError&lt;/code&gt; に置き換わりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parseError ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 現在の &amp;#39;failure&amp;#39; と &amp;#39;fancyFailure&amp;#39; は普通の関数:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;failure&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 期待しないアイテム (あれば)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 期待するアイテム&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;failure us ps &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-11&#34;&gt;&lt;a href=&#34;#cb1-11&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb1-12&#34;&gt;&lt;a href=&#34;#cb1-12&#34;&gt;&lt;/a&gt;  parseError (&lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; o us ps)&lt;/span&gt;
&lt;span id=&#34;cb1-13&#34;&gt;&lt;a href=&#34;#cb1-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-14&#34;&gt;&lt;a href=&#34;#cb1-14&#34;&gt;&lt;/a&gt;fancyFailure&lt;/span&gt;
&lt;span id=&#34;cb1-15&#34;&gt;&lt;a href=&#34;#cb1-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb1-16&#34;&gt;&lt;a href=&#34;#cb1-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e) &lt;span class=&#34;co&#34;&gt;-- ^ Fancy error components&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-17&#34;&gt;&lt;a href=&#34;#cb1-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb1-18&#34;&gt;&lt;a href=&#34;#cb1-18&#34;&gt;&lt;/a&gt;fancyFailure xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-19&#34;&gt;&lt;a href=&#34;#cb1-19&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb1-20&#34;&gt;&lt;a href=&#34;#cb1-20&#34;&gt;&lt;/a&gt;  parseError (&lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; o xs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これはプリミティブの数を減らすという話ではありません (減らすことも良いことですが)。 &lt;code&gt;parseError&lt;/code&gt; の主な特徴は、パーサの状態から現在のオフセットを必要とすることなく、任意のオフセットでパースエラーを報告できることです。 これは、パースエラーにしたい位置を既に超えてしまっている場合でも、入力のその位置でパースエラーを作成したい場合に重要です。 これまでは、まず &lt;code&gt;getOffset&lt;/code&gt; を介して正しいオフセットを取得し、次にパースエラーを報告する直前に &lt;code&gt;setOffset&lt;/code&gt; でオフセットを設定することでしか達成できませんでした。 これは見苦しいだけでなく、エラーが発生しやすくなり、正しいオフセットの復元を忘れることがあります。 &lt;code&gt;mmark&lt;/code&gt;の&lt;a href=&#34;https://github.com/mmark-md/mmark/blob/8f5534d8068c2b7a139b893639ee5920bcaedd84/Text/MMark/Parser.hs#L787-L790&#34;&gt;実例&lt;/a&gt;を次に示します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;  o&amp;#39; &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;  setOffset o&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;  (void &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; hidden &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; string) &lt;span class=&#34;st&#34;&gt;&amp;quot;[]&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- ↑ これが失敗した場合、これをオフセット「o」で報告する必要があります&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;  setOffset (o&amp;#39; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここでは完全な状況を説明しませんが、&lt;code&gt;&#34;[]&#34;&lt;/code&gt;(&lt;code&gt;+ 2&lt;/code&gt;の部分)のパース後にオフセットの増分を考慮するのを忘れたため、このコードにはしばらくバグがあったと言えば十分でしょう。 次のように書けば、同じことをよりうまく表現できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;  region (setErrorOffset o) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;    (void &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; hidden &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; string) &lt;span class=&#34;st&#34;&gt;&amp;quot;[]&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 備考&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;region ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e)&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ &amp;#39;ParseError&amp;#39; の処理方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ 処理を適用する「region」&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;region&lt;/code&gt;は&lt;code&gt;getOffset&lt;/code&gt; / &lt;code&gt;setOffset&lt;/code&gt; ハックと同じ目的で使用されます。 副作用として、エラーが起きた場合にはパースエラーを更新する関数によって現在のオフセットが変更されます。 &lt;code&gt;region&lt;/code&gt; は &lt;code&gt;parseError&lt;/code&gt; を使用して、古いハックを廃止できます。&lt;/p&gt;
&lt;pre class=&#34;haskel&#34;&gt;&lt;code&gt;region f m = do
  r &amp;lt;- observing m
  case r of
    Left err -&amp;gt; parseError (f err)
    Right x -&amp;gt; return x&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;いいね.&lt;/p&gt;
&lt;h2 id=&#34;マルチエラーパーサのより良いストーリー&#34;&gt;マルチエラーパーサのより良いストーリー&lt;/h2&gt;
&lt;p&gt;プロジェクトの最初期から、マルチエラーパーサをサポートする方向にゆっくりと動いていました。 バージョン7では、&lt;code&gt;ParseError&lt;/code&gt;の代わりに&lt;code&gt;ParseErrorBundle&lt;/code&gt;を返すようになりました。 マルチエラーをサポートするための準備はすべてが整っていましたが、複数のパースエラーを報告するための方法がまだ提供されていませんでした。&lt;/p&gt;
&lt;p&gt;マルチエラーパーサに求められる事前条件は、入力に問題のある部分をスキップして、正常であることがわかっている位置からパースを再開できることです。 この部分は、&lt;code&gt;withRecovery&lt;/code&gt;プリミティブ（Megaparsec 4.4.0以降で使用可能）を使用して実現されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | @&amp;#39;withRecovery&amp;#39; r p@ は、パーサー @p@ が失敗した場合でも解析を続行できます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- この場合、実際の &amp;#39;ParseError&amp;#39; を引数とする @r@ が呼び出されます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- よくある使い方として、特定のオブジェクトのパースの失敗を意味する値を返すことで、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- その入力の一部を消費し次のオブジェクトの開始位置に移動します。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- @r@ が失敗すると、元のエラーメッセージが &amp;#39;withRecovery&amp;#39; なしで報告されることに注意してください。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- パーサ @r@ を回復してもエラーメッセージに影響することはありません。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-8&#34;&gt;&lt;a href=&#34;#cb5-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-9&#34;&gt;&lt;a href=&#34;#cb5-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-10&#34;&gt;&lt;a href=&#34;#cb5-10&#34;&gt;&lt;/a&gt;withRecovery&lt;/span&gt;
&lt;span id=&#34;cb5-11&#34;&gt;&lt;a href=&#34;#cb5-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;co&#34;&gt;-- ^ 失敗の回復方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-12&#34;&gt;&lt;a href=&#34;#cb5-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a             &lt;span class=&#34;co&#34;&gt;-- ^ オリジナルのパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-13&#34;&gt;&lt;a href=&#34;#cb5-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a             &lt;span class=&#34;co&#34;&gt;-- ^ 失敗から回復できるパーサ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Megaparsec 8 までのユーザーは、成功と失敗の可能性を含む直和型になるように型&lt;code&gt;a&lt;/code&gt;を選択する必要がありました。 たとえば、&lt;code&gt;Either (ParseError s e) Result&lt;/code&gt; です。 パースエラーを収集し、後で表示する前に手動で&lt;code&gt;ParseErrorBundle&lt;/code&gt;に追加する必要がありました。 言うまでもなく、これらはすべて、ユーザーフレンドリーではない高度な使用例です。&lt;/p&gt;
&lt;p&gt;Megaparsec 8 は、遅延パースエラーのサポートを追加します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | 後で報告するために &amp;#39;ParseError&amp;#39;を登録します。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- このアクションはパースを終了せず、パースの最後に考慮される&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 「遅延」&amp;#39;ParseError&amp;#39;のコレクションに特定の「ParseError」を&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 追加する以外は効果がありません。 このコレクションが空の場合のみ、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- パーサは成功します。 これは、複数のパースエラーを一度に報告する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 主な方法です。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;registerParseError ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | &amp;#39;failure&amp;#39;に似ていますが、 遅延&amp;#39;ParseError&amp;#39;のためのものです。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;registerFailure&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb6-14&#34;&gt;&lt;a href=&#34;#cb6-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 期待しないアイテム (あれば)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-15&#34;&gt;&lt;a href=&#34;#cb6-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 期待するアイテム&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-16&#34;&gt;&lt;a href=&#34;#cb6-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb6-17&#34;&gt;&lt;a href=&#34;#cb6-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-18&#34;&gt;&lt;a href=&#34;#cb6-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | &amp;#39;fancyFailure&amp;#39;に似ていますが、 遅延&amp;#39;ParseError&amp;#39;のためのものです。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-19&#34;&gt;&lt;a href=&#34;#cb6-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-20&#34;&gt;&lt;a href=&#34;#cb6-20&#34;&gt;&lt;/a&gt;registerFancyFailure&lt;/span&gt;
&lt;span id=&#34;cb6-21&#34;&gt;&lt;a href=&#34;#cb6-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb6-22&#34;&gt;&lt;a href=&#34;#cb6-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e) &lt;span class=&#34;co&#34;&gt;-- ^ Fancy error components&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-23&#34;&gt;&lt;a href=&#34;#cb6-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらのエラーは &lt;code&gt;withRecovery&lt;/code&gt; のエラー処理コールバックに登録でき、結果の型は &lt;code&gt;Maybe Result&lt;/code&gt; になります。 これにより、遅延エラーが最終的な &lt;code&gt;ParseErrorBundle&lt;/code&gt; に含まれるようになり、遅延エラーのコレクションが空でない場合に パーサが最終的に失敗するようになります。&lt;/p&gt;
&lt;p&gt;以上のことから、マルチエラーパーサを書く習慣がユーザ間でより一般的になることを願っています。&lt;/p&gt;
&lt;h2 id=&#34;その他&#34;&gt;その他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いつものように、変更の完全なリストについては、&lt;a href=&#34;https://github.com/mrkkrp/megaparsec/blob/master/CHANGELOG.md&#34;&gt;chagelog&lt;/a&gt; を参照してください。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://markkarpov.com/megaparsec/megaparsec.html&#34;&gt;公式チュートリアル&lt;/a&gt;を含むすべてのテキストをバージョン8と互換性があるように更新しました。新しい機能の使用方法を説明するセクションを含めるように拡張しました。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hspec-megaparsec&lt;/code&gt; などのサテライトパッケージが更新され、バージョン8で動作するようになりました。&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-10-31-join-hacktoberfest-2019.html</id><title type="text">Hacktoberfest 2019 なので PR を4つ以上出してみた</title><updated>2019-10-31T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-10-31-join-hacktoberfest-2019.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;毎年恒例，去年に引き続き Hacktoberfest に参加しました．&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/join-hacktoberfest-2019/status.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;すごい量になっているけど個人のリポジトリや参加してる Org アカウントにも PR を作ってやっていたのでこんな量になった. 実際に、自分の所属となんも関係のない PR は以下の4つ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/phadej/github/pull/407&#34;&gt;Update EditRepo type by matsubara0507 · Pull Request #407 · phadej/github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/drone/drone-go/pull/47&#34;&gt;Change &lt;code&gt;RepoPatch.Counter&lt;/code&gt; type to &lt;code&gt;int64&lt;/code&gt; from &lt;code&gt;int&lt;/code&gt; by matsubara0507 · Pull Request #47 · drone/drone-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elm-jp/guide/pull/170&#34;&gt;「型: 型を読む」の原文を追従して翻訳 by matsubara0507 · Pull Request #170 · elm-jp/guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/orangain/textlint-plugin-review/pull/16&#34;&gt;Update textlint version to 11.4 by matsubara0507 · Pull Request #16 · orangain/textlint-plugin-review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;phadejgithub&#34;&gt;phadej/github&lt;/h2&gt;
&lt;p&gt;このリポジトリは Haskell の GitHub API クライアントライブラリだ． 愛用している． ただ，GitHub API の開発速度はそこそこ速く，機能が追いついてないことが多々あり，自分はよく&lt;a href=&#34;https://github.com/matsubara0507/github/tree/myext&#34;&gt;フォークして必要なものを雑に足したブランチ&lt;/a&gt;を利用している． もっとマメに本家へ PR を出せば良いのだが，ついついサボってしまい… ということで，一つだけだが出してみた．&lt;/p&gt;
&lt;p&gt;この PR はリポジトリを編集する API に使うための PATCH 用のデータ型が古くなっており，僕が必要なフィールドが足りなかったので作った差分だ． ついでに，リポジトリ自体の型やリポジトリを作る型のフィールドも古くなっていることに気づいた． 僕は必要ではないし，めんどくさかったから最初はそのまま出したが，「直した方がいいですか？」と尋ねたら「ぜひ」と返ってきたので直した． ちょっと差分が大きくなってしまったのでコメントを書いているうちにマージされた笑&lt;/p&gt;
&lt;h2 id=&#34;dronedrone-go&#34;&gt;drone/drone-go&lt;/h2&gt;
&lt;p&gt;これは &lt;a href=&#34;https://drone.io&#34;&gt;Drone CI&lt;/a&gt; という OSS の CI/CD プラットフォームの，本家が提供している Go 言語の API クライアントだ． 同様の &lt;a href=&#34;https://github.com/matsubara0507/drone-haskell&#34;&gt;Haskell 用 API クライアント&lt;/a&gt;を整備していた(ドキュメントが少ないので Go の実装を参照している)ら型が間違っているような気がしたので PR にした．&lt;/p&gt;
&lt;p&gt;PR に拙い英語でコメントしている通り，&lt;code&gt;Counter&lt;/code&gt; というフィールドは &lt;code&gt;Repo&lt;/code&gt; 型では &lt;code&gt;int64&lt;/code&gt; だが，&lt;code&gt;RepoPatch&lt;/code&gt; では &lt;code&gt;int&lt;/code&gt; だった． &lt;a href=&#34;https://github.com/drone/drone/blob/0b4e5156ae1111463145e522e206eacb6d036960/handler/api/repos/update.go#L30-L40&#34;&gt;API サーバー側の実装&lt;/a&gt;を見てみると &lt;code&gt;int64&lt;/code&gt; として扱っていたので &lt;code&gt;RepoPatch&lt;/code&gt; 側を修正する PR を出した． 無事マージされるといいなぁ．&lt;/p&gt;
&lt;h2 id=&#34;elm-jpguide&#34;&gt;elm-jp/guide&lt;/h2&gt;
&lt;p&gt;これは &lt;a href=&#34;https://guide.elm-lang.org/&#34;&gt;Elm Guide&lt;/a&gt; というサイトの翻訳リポジトリだ． 翻訳元は Elm の作者がメンテナンスしている，Elm のチュートリアルである． Elm-jp という日本ユーザーグループで翻訳をしている(僕も所属してるので無関係ではなかった)．&lt;/p&gt;
&lt;p&gt;最近，大量の本家との差分を &lt;a href=&#34;https://github.com/negiboudu&#34;&gt;negiboudu&lt;/a&gt; 氏が取り込んでくれた． その結果，差分ができたので1ページだけ翻訳したという PR だ． ちなみに，まだまだあるので誰でも翻訳 PR お待ちしております．&lt;/p&gt;
&lt;h2 id=&#34;orangaintextlint-plugin-review&#34;&gt;orangain/textlint-plugin-review&lt;/h2&gt;
&lt;p&gt;これは文章用の linter ツール，textlint の &lt;a href=&#34;https://github.com/kmuto/review&#34;&gt;Re:VIEW&lt;/a&gt; プラグインのリポジトリだ． Re:VIEW は技術書典用の頒布物作成の折に使っており，textlint で軽い静的検査をしている． 技術書典7のときに，このプラグインで「plugin-review が依存している textlint が古い」という警告が出ているので直した． そのときのものを PR にしただけだ．&lt;/p&gt;
&lt;p&gt;ちょっと差分がでかいし，長く更新がないのでマージされないような気がする しかし，まぁ同じような警告が気になった人が辿り着いて助けになればいいなぁぐらいの温度感．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;いろんなジャンルのリポジトリに PR が出せて満足． あとでTシャツの出さなきゃ．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/10-07-cabal-fmt.html</id><title type="text">cabal-fmt の紹介</title><updated>2019-10-07T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/10-07-cabal-fmt.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/cabal-fmt&#34;&gt;cabal-fmt&lt;/a&gt; でできること。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cabal&lt;/strong&gt; ファイルの整形&lt;/li&gt;
&lt;li&gt;フォルダを指定して自動でモジュールを expand できる&lt;/li&gt;
&lt;li&gt;以下のフィールドをアルファベット順で自動的に並べ替え&amp;amp;重複を削除
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;exposed-modules&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;other-modules&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default-extensions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;other-extensions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build-depends&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;λ cabal-fmt --version
0.1.1.1

λ cabal -V
cabal-install version 3.0.0.0
compiled using version 3.0.0.0 of the Cabal library

# 使い方
λ cabal-fmt &amp;lt;proj&amp;gt;.cabal -i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作者の記事: &lt;a href=&#34;http://oleg.fi/gists/posts/2019-08-11-cabal-fmt.html&#34;&gt;ANN: cabal-fmt&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;具体例&#34;&gt;具体例&lt;/h2&gt;
&lt;h3 id=&#34;適用前&#34;&gt;適用前&lt;/h3&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;cabal-version: 2.4
name:test
version:0.1.0.0
tested-with:
  GHC ==8.8.1 || ==8.6.5 || ==8.4.4 || ==8.2.2 || ==8.0.2 || ==7.10.3
  GHCJS ==8.4

executable site
  main-is:          site.hs
  other-modules:
    Config
    Hakyll.Ext
  hs-source-dirs:   app
  ghc-options:
    -Wcompat -Wall
    -Wnoncanonical-monad-instances
    -Wincomplete-uni-patterns -Wincomplete-record-updates -Wredundant-constraints -Wtabs -threaded
  build-depends:
      base, lens
    , blaze-html, conduit-combinators
    , containers      , filepath
          , bytestring
    , extensible
    
    
    , yaml, time

  if !os(windows)
    build-depends: hakyll-sass

  default-language: Haskell2010&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;適用後&#34;&gt;適用後&lt;/h3&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;cabal-version: 2.4
name:          test
version:       0.1.0.0
tested-with:
    GHC ==7.10.3
     || ==8.0.2
     || ==8.2.2
     || ==8.4.4
     || ==8.6.5
     || ==8.8.1
  , GHCJS ==8.4

executable site
  main-is:          site.hs
  other-modules:
    Config
    Hakyll.Ext

  hs-source-dirs:   app
  ghc-options:
    -Wcompat -Wall -Wnoncanonical-monad-instances
    -Wincomplete-uni-patterns -Wincomplete-record-updates
    -Wredundant-constraints -Wtabs -threaded

  build-depends:
    , base
    , blaze-html
    , bytestring
    , conduit-combinators
    , containers
    , extensible
    , filepath
    , lens
    , time
    , yaml

  if !os(windows)
    build-depends: hakyll-sass

  default-language: Haskell2010
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;λ cabal v2-update
λ cabal v2-install cabal-fmt

λ cabal-fmt --help
λ cabal-fmt - .cabal file reformatter

Usage: cabal-fmt [-i|--inplace] [--Werror | --Wno-error | --indent N | --tabular
                 | --no-tabular] [FILE...] [--version]
  Reformat .cabal files

Available options:
  -i,--inplace             process files in-place
  --Werror                 Treat warnings as errors
  --indent N               Indentation
  --tabular                Tabular formatting
  FILE...                  input files
  -h,--help                Show this help text
  --version                Show version&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;
&lt;p&gt;基本的には以下のコマンドで終わりです。(&lt;code&gt;&amp;lt;proj&amp;gt;&lt;/code&gt; は各自のファイル名に置き換えてください)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;λ cabal-fmt &amp;lt;proj&amp;gt;.cabal -i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; オプション (&lt;code&gt;--inplace&lt;/code&gt;) で既存ファイルを上書きするので、結果だけ見たい場合は外しましょう。&lt;/p&gt;
&lt;h3 id=&#34;モジュールの自動展開&#34;&gt;モジュールの自動展開&lt;/h3&gt;
&lt;p&gt;僕が &lt;code&gt;cabal-fmt&lt;/code&gt; を使う理由の最大のポイントはモジュールの自動展開機能です。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;library
  -- cabal-fmt: expand src
  exposed-modules:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;記法としては、上記のようにしてモジュールを探索するディレクトリ (今回の場合は &lt;strong&gt;src&lt;/strong&gt;) を指定します。&lt;/p&gt;
&lt;p&gt;実際に使ってみましょう。ここでは例として &lt;strong&gt;test-dir&lt;/strong&gt; を作りますが、実際には &lt;strong&gt;src&lt;/strong&gt;, &lt;strong&gt;app&lt;/strong&gt;, &lt;strong&gt;test&lt;/strong&gt; などが展開の対象となることが多いと思います。&lt;/p&gt;
&lt;p&gt;また、意図的に &lt;strong&gt;C.md&lt;/strong&gt; としている点にも注意してください。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;λ mkdir test-dir
λ touch test-dir/A.hs test-dir/B.hs test-dir/C.md
λ tree test-dir
test-dir
├── A.hs
├── B.hs
└── C.md&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;適用する &lt;strong&gt;cabal&lt;/strong&gt; ファイル (&lt;strong&gt;test.cabal&lt;/strong&gt;) の中身は以下の通りです。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:    test
version: 0.1.0.0

library
  -- cabal-fmt: expand test-dir
  exposed-modules:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この状態で &lt;code&gt;cabal-fmt test.cabal -i&lt;/code&gt; を実行すると結果は以下のようになります。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:    test
version: 0.1.0.0

library
  -- cabal-fmt: expand test-dir
  exposed-modules:
    A
    B
    C
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;.hs&lt;/code&gt; ファイルだけ列挙して欲しいところですが、指定したディレクトリ以下の全てを列挙します。そのため、公開したいモジュールと非公開のモジュールはディレクトリを分けて運用するなど、少しだけ工夫する必要があります。&lt;/p&gt;
&lt;p&gt;一応、除外したいモジュールを &lt;code&gt;-Module&lt;/code&gt; の形式で指定することもできます。&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:    test
version: 0.1.0.0

library
  -- cabal-fmt: expand test-dir -C
  exposed-modules:&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;適用後&lt;/p&gt;
&lt;pre class=&#34;cabal&#34;&gt;&lt;code&gt;name:    test
version: 0.1.0.0

library
  -- cabal-fmt: expand test-dir -C
  exposed-modules:
    A
    B
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この方法を使えば &lt;strong&gt;hspec-discover&lt;/strong&gt; や &lt;strong&gt;tasty-discover&lt;/strong&gt; のためのファイルなどを除外することができます。&lt;/p&gt;
&lt;h2 id=&#34;cabal-format-コマンド&#34;&gt;cabal format コマンド&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cabal&lt;/code&gt; についてあまり詳しく無いので良くわかりませんが、一応 &lt;strong&gt;cabal format&lt;/strong&gt; というコマンドが存在します。(&lt;a href=&#34;https://github.com/haskell/cabal/issues/2460&#34;&gt;&lt;code&gt;cabal format&lt;/code&gt; is not listed in –help message #2460&lt;/a&gt;)&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;λ cabal format --help
Reformat the .cabal file using the standard style.

Usage: cabal format [FILE]

Flags for format:
 -h --help Show this help text&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実際にこのコマンドでも整形だけなら可能みたいです。ただし、&lt;a href=&#34;https://github.com/haskell/cabal/issues/5734&#34;&gt;&lt;code&gt;cabal format&lt;/code&gt; inlines and removes &lt;code&gt;common&lt;/code&gt; stanzas #5734&lt;/a&gt; にもある通り &lt;code&gt;common&lt;/code&gt; stanza が削除されたりします。&lt;/p&gt;
&lt;p&gt;そのため、&lt;strong&gt;cabal format&lt;/strong&gt; コマンドよりも &lt;strong&gt;cabal-fmt&lt;/strong&gt; を利用した方が良いと思います。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;便利なので最近良く使ってます。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://oleg.fi/gists/posts/2019-08-11-cabal-fmt.html&#34;&gt;ANN: cabal-fmt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/10-04-NoStarIsType.html</id><title type="text">NoStarIsType 言語拡張が必要になるとき</title><updated>2019-10-04T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/10-04-NoStarIsType.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;λ ghc &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;V&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Glorious&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Glasgow&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Haskell&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Compilation&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;System&lt;/span&gt;, version &lt;span class=&#34;fl&#34;&gt;8.8&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;    • &lt;span class=&#34;dt&#34;&gt;Expected&lt;/span&gt; kind ‘&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k0’, but ‘10’ has kind ‘&lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;’&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;    • &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; ‘&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; 10’&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XNoStarIsType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;型レベル四則演算&#34;&gt;型レベル四則演算&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/GHC-TypeLits.html&#34;&gt;GHC.TypeLits&lt;/a&gt; に用意されている関数を使って型レベル自然数の四則演算を行ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XDataKinds&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XTypeOperators&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.TypeLits&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;9&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;    • &lt;span class=&#34;dt&#34;&gt;Expected&lt;/span&gt; kind ‘&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k0’, but ‘10’ has kind ‘&lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;’&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt;    • &lt;span class=&#34;dt&#34;&gt;In&lt;/span&gt; the &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; ‘&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; 10’&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;掛け算だけエラーになりましたね・・・。それぞれの演算子のカインドを確認してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(+) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k (&lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(-) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;dt&#34;&gt;Mod&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Mod&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k (&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(*) ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1つだけ変ですね。これは &lt;code&gt;*&lt;/code&gt; が &lt;strong&gt;Bool&lt;/strong&gt; や &lt;strong&gt;Maybe&lt;/strong&gt; などのよくある基本的な型 (lifted boxed types) のカインドの記号として割り当てられているためです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1つ前の &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/migration/8.6&#34;&gt;GHC 8.6&lt;/a&gt; から &lt;strong&gt;StarIsType&lt;/strong&gt; 言語拡張がデフォルトで有効になり、&lt;code&gt;*&lt;/code&gt; カインドは &lt;code&gt;Type&lt;/code&gt; カインドのシノニムとして定義されるようになりました。なので明示的に &lt;strong&gt;StarIsType&lt;/strong&gt; を無効にすると直ります。(この辺りの話題については既に &lt;a href=&#34;https://www.reddit.com/r/haskell_jp/comments/8t8p4j/typeoperators_nostaristype%E3%81%AE%E5%BB%B6%E6%9C%9F%E3%81%AE%E6%8F%90%E6%A1%88/&#34;&gt;“TypeOperators =&amp;gt; NoStarIsType”の延期の提案&lt;/a&gt; などにまとまっているため、気になる方はご参照ください)&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XNoStarIsType&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;k (&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;(*) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ということでこれで無事に型レベルの掛け算ができるようになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;λ &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;kind!&lt;/code&gt; のエイリアスとして &lt;code&gt;k!&lt;/code&gt; コマンド欲しい。&lt;/p&gt;
&lt;h2 id=&#34;追記&#34;&gt;追記&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;k!&lt;/code&gt; コマンドのマージリクエストが作られました &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/merge_requests/1934&#34;&gt;Allow completion for GHCi commands with option &lt;code&gt;!&lt;/code&gt; (#17345)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ありがとうございます :)&lt;/p&gt;
&lt;p&gt;GHC に組み込まれるまでは、&lt;code&gt;~/.ghci&lt;/code&gt; や &lt;code&gt;&amp;lt;proj&amp;gt;/.ghci&lt;/code&gt; に以下の内容を記述しておけば &lt;code&gt;:kind!&lt;/code&gt; のエイリアスとして &lt;code&gt;:k!&lt;/code&gt; が使えるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:def! k! (\e -&amp;gt; return (&amp;quot;:kind! &amp;quot; ++ e))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行結果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; :k! 1+1
1+1 :: Nat
= 2&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/8.8.1/docs/html/users_guide/glasgow_exts.html?highlight=nostaristype#extension-StarIsType&#34;&gt;StarIsType - Glasgow Haskell Compiler User’s Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/wikis/migration/8.6&#34;&gt;GHC 8.6.x Migration Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/haskell_jp/comments/8t8p4j/typeoperators_nostaristype%E3%81%AE%E5%BB%B6%E6%9C%9F%E3%81%AE%E6%8F%90%E6%A1%88/&#34;&gt;“TypeOperators =&amp;gt; NoStarIsType”の延期の提案&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/hiw-copilot.html</id><title type="text">HIW 2019で発表された、Copilotという内部DSLについて</title><updated>2019-10-01T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/hiw-copilot.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2019/hiw-gibbon.html&#34;&gt;前回&lt;/a&gt;から引き続き、&lt;a href=&#34;https://icfp19.sigplan.org/home/hiw-2019#About&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Implementors&lt;/span&gt;’ &lt;span class=&#34;ascii&#34;&gt;Workshop 2019&lt;/span&gt;&lt;/a&gt;への参加レポートとして、私の印象に残った発表を紹介します。&lt;br /&gt;
今回は、&lt;a href=&#34;https://copilot-language.github.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語のコードを生成する&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;についての発表です。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#copilot-3.0-a-haskell-runtime-verification-framework-for-uavs&#34; title=&#34;copilot-3.0-a-haskell-runtime-verification-framework-for-uavs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot 3.0: a Haskell runtime verification framework for UAVs&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#copilotを試してみる&#34; title=&#34;copilotを試してみる&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;を試してみる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;copilot-3.0-a-haskell-runtime-verification-framework-for-uavs&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#copilot-3.0-a-haskell-runtime-verification-framework-for-uavs&#34; title=&#34;copilot-3.0-a-haskell-runtime-verification-framework-for-uavs&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot 3.0: a Haskell runtime verification framework for UAVs&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;発表者&lt;span class=&#34;ascii&#34;&gt;: Frank Dedden&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Royal Netherlands Aerospace Center&lt;/span&gt;&lt;/em&gt;&lt;span class=&#34;ascii&#34;&gt;, Alwyn Goodloe&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;NASA Langley Research Center&lt;/span&gt;&lt;/em&gt;&lt;span class=&#34;ascii&#34;&gt;, Ivan Perez&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;NIA / NASA Formal Methods&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語のソースコードを生成する、&lt;a href=&#34;https://copilot-language.github.io/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;&lt;/a&gt;の紹介です。&lt;br /&gt;
似た謳い文句の内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;として&lt;a href=&#34;http://hackage.haskell.org/package/ivory&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ivory&lt;/span&gt;&lt;/a&gt;がありますが、&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;は、ハードウェアの実行時検証を行う&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語のコードを生成することに、より特化しています。&lt;br /&gt;
「センサーから信号を受け取って、一定の条件を満たした場合に何らかの処理を実行する」という処理を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で宣言的に記述すると、メモリの消費量・実行時間において常に一定な&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語のコードを生成することが出来ます。&lt;/p&gt;
&lt;p&gt;メモリが限られていて、リアルタイムな処理が必要なハードウェアにとって「邪魔にならない監視」を実現するための必須条件なのでしょう。&lt;br /&gt;
現状&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;GC&lt;/span&gt;が必要であるといった制約もあり、リアルタイムな処理や厳格なメモリー管理が必要な機器での採用は難しいですが、&lt;span class=&#34;ascii&#34;&gt;Ivory&lt;/span&gt;や今回発表された&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;はあくまでも「&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語のコードを生成するだけ」なので、生成する&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ではメモリー管理をする必要がありません。&lt;br /&gt;
にっくきスペースリークに悩まされる心配もないのです。&lt;br /&gt;
こういった&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製内部&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の持つ強い型付けによるメリットを享受しながら、変換した言語の実行時におけるパフォーマンスを出しやすい、といういいとこ取りなメリットがあるので、もっと広まってほしいユースケースですね。&lt;/p&gt;
&lt;h1 id=&#34;copilotを試してみる&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#copilotを試してみる&#34; title=&#34;copilotを試してみる&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;を試してみる&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;ℹ️ 実際に使用したコードは&lt;a href=&#34;https://github.com/haskell-jp/blog/tree/master/examples/2019/hiw-copilot&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Blog&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;のリポジトリー&lt;/a&gt;にあります。&lt;/li&gt;
&lt;li&gt;ℹ️ 使用した&lt;span class=&#34;ascii&#34;&gt;copilot&lt;/span&gt;パッケージのバージョンは、&lt;span class=&#34;ascii&#34;&gt;3.0.1&lt;/span&gt;です。&lt;/li&gt;
&lt;li&gt;ℹ️ サンプルコードの解説については、&lt;span class=&#34;ascii&#34;&gt;notogawa&lt;/span&gt;さんのアドバイスも参考になりました&lt;small&gt;（&lt;a href=&#34;https://haskell.jp/slack-log/html/C4M4TT8JJ/46.html#message-1554858057.072700&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;slack-log&lt;/span&gt;ではこのあたり&lt;/a&gt;。執筆時点で&lt;span class=&#34;ascii&#34;&gt;CSS&lt;/span&gt;が当たってないため読みづらいですが一応）&lt;/small&gt;。ありがとうございます！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;せっかくなんで&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;を試してみましょう。&lt;br /&gt;
公式サイトにあったサンプルコードそのまんまですが、生成される&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;のコードを眺めてみます。&lt;/p&gt;
&lt;p&gt;👇のコマンドでサンプルコードが入ったリポジトリーを&lt;span class=&#34;ascii&#34;&gt;git clone&lt;/span&gt;した後、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; clone https://github.com/haskell-jp/blog&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;bu&#34;&gt;cd&lt;/span&gt; blog/examples/2019/hiw-copilot&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;👇のコマンドでビルド・&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;言語によるコードの生成できるはずです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; build copilot&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ex&#34;&gt;stack&lt;/span&gt; exec runghc heater.hs&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こちらが生成元の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のコードです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell:heater.hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Language.Copilot&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Copilot.Compile.C99&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; ((&amp;gt;), (&amp;lt;), div)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;temp ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Word8&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-7&#34; title=&#34;7&#34;&gt;temp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; extern &lt;span class=&#34;st&#34;&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;ot&#34;&gt;ctemp ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Float&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-10&#34; title=&#34;10&#34;&gt;ctemp &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (unsafeCast temp) &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; (&lt;span class=&#34;fl&#34;&gt;150.0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;255.0&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-11&#34; title=&#34;11&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-12&#34; title=&#34;12&#34;&gt;spec &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-13&#34; title=&#34;13&#34;&gt;  trigger &lt;span class=&#34;st&#34;&gt;&amp;quot;heaton&amp;quot;&lt;/span&gt;  (ctemp &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;18.0&lt;/span&gt;) [arg ctemp]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-14&#34; title=&#34;14&#34;&gt;  trigger &lt;span class=&#34;st&#34;&gt;&amp;quot;heatoff&amp;quot;&lt;/span&gt; (ctemp &lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;21.0&lt;/span&gt;) [arg ctemp]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-15&#34; title=&#34;15&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-16&#34; title=&#34;16&#34;&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; reify spec &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; compile &lt;span class=&#34;st&#34;&gt;&amp;quot;heater&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まず、&lt;code&gt;temp&lt;/code&gt;と&lt;code&gt;ctemp&lt;/code&gt;という識別子に定義した式が、センサーが発信する、連続的に変化する値を表しています。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;の言葉はこれを&lt;code&gt;Stream&lt;/code&gt;と呼んでいます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;spec&lt;/code&gt;という識別子で定義している式が、「どのセンサーから信号を受け取って、どんな条件を満たした場合にどの処理を実行するか」規定しているようです。&lt;br /&gt;
👆の場合、&lt;code&gt;ctemp&lt;/code&gt;という&lt;code&gt;Stream&lt;/code&gt;が&lt;code&gt;18.0&lt;/code&gt;を下回ったら&lt;code&gt;heaton&lt;/code&gt;というイベントを発火し、&lt;code&gt;21.0&lt;/code&gt;を超えたら&lt;code&gt;heatoff&lt;/code&gt;というイベントを発火する、と定めているわけですね。&lt;br /&gt;
そして&lt;code&gt;main&lt;/code&gt;関数で実行している&lt;code&gt;reify spec &amp;gt;&amp;gt;= compile &#34;heater&#34;&lt;/code&gt;という箇所で、&lt;code&gt;.h&lt;/code&gt;ファイルと&lt;code&gt;.c&lt;/code&gt;ファイルを書き込んでいます。&lt;/p&gt;
&lt;p&gt;そして、生成されたヘッダーファイル&lt;code&gt;heater.h&lt;/code&gt;がこう👇&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode c:heater.h&#34;&gt;&lt;code class=&#34;sourceCode c&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;uint8_t&lt;/span&gt; temperature;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; heatoff(&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt; heatoff_arg0);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; heaton(&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt; heaton_arg0);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; step(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;);&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で、肝心の&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;のコード本体&lt;code&gt;heater.c&lt;/code&gt;がこちらです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode c:heater.c&#34;&gt;&lt;code class=&#34;sourceCode c&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;pp&#34;&gt;#include &lt;/span&gt;&lt;span class=&#34;im&#34;&gt;&amp;quot;heater.h&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;dt&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;uint8_t&lt;/span&gt; temperature_cpy;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; heatoff_guard(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ((((&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt;)(temperature_cpy)) * ((&lt;span class=&#34;fl&#34;&gt;150.0&lt;/span&gt;) / (&lt;span class=&#34;fl&#34;&gt;255.0&lt;/span&gt;))) - (&lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;)) &amp;gt; (&lt;span class=&#34;fl&#34;&gt;21.0&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-11&#34; title=&#34;11&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt; heatoff_arg0(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-14&#34; title=&#34;14&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; (((&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt;)(temperature_cpy)) * ((&lt;span class=&#34;fl&#34;&gt;150.0&lt;/span&gt;) / (&lt;span class=&#34;fl&#34;&gt;255.0&lt;/span&gt;))) - (&lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-15&#34; title=&#34;15&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-16&#34; title=&#34;16&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-17&#34; title=&#34;17&#34;&gt;&lt;span class=&#34;dt&#34;&gt;bool&lt;/span&gt; heaton_guard(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; ((((&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt;)(temperature_cpy)) * ((&lt;span class=&#34;fl&#34;&gt;150.0&lt;/span&gt;) / (&lt;span class=&#34;fl&#34;&gt;255.0&lt;/span&gt;))) - (&lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;)) &amp;lt; (&lt;span class=&#34;fl&#34;&gt;18.0&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-19&#34; title=&#34;19&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-20&#34; title=&#34;20&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-21&#34; title=&#34;21&#34;&gt;&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt; heaton_arg0(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-22&#34; title=&#34;22&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; (((&lt;span class=&#34;dt&#34;&gt;float&lt;/span&gt;)(temperature_cpy)) * ((&lt;span class=&#34;fl&#34;&gt;150.0&lt;/span&gt;) / (&lt;span class=&#34;fl&#34;&gt;255.0&lt;/span&gt;))) - (&lt;span class=&#34;fl&#34;&gt;50.0&lt;/span&gt;);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-23&#34; title=&#34;23&#34;&gt;}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-24&#34; title=&#34;24&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-25&#34; title=&#34;25&#34;&gt;&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt; step(&lt;span class=&#34;dt&#34;&gt;void&lt;/span&gt;) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-26&#34; title=&#34;26&#34;&gt;  (temperature_cpy) = (temperature);&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-27&#34; title=&#34;27&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((heatoff_guard)()) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-28&#34; title=&#34;28&#34;&gt;    (heatoff)(((heatoff_arg0)()));&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-29&#34; title=&#34;29&#34;&gt;  };&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-30&#34; title=&#34;30&#34;&gt;  &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; ((heaton_guard)()) {&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-31&#34; title=&#34;31&#34;&gt;    (heaton)(((heaton_arg0)()));&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-32&#34; title=&#34;32&#34;&gt;  };&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-33&#34; title=&#34;33&#34;&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;先ほど&lt;code&gt;Stream&lt;/code&gt;として定義した値のうち、&lt;code&gt;temp&lt;/code&gt;は、&lt;code&gt;temperature&lt;/code&gt;というグローバル変数と、それを一時的に保存する&lt;code&gt;temperature_cpy&lt;/code&gt;という二つの変数に翻訳されました。&lt;br /&gt;
&lt;code&gt;spec&lt;/code&gt;において&lt;code&gt;trigger&lt;/code&gt;という関数で列挙した「どのセンサーから信号を受け取って、どんな条件を満たした場合にどの処理を実行するか」というルールは、&lt;code&gt;step&lt;/code&gt;という関数に現れたようです。&lt;br /&gt;
この関数を利用する側では、&lt;code&gt;heaton&lt;/code&gt;関数と&lt;code&gt;heatoff&lt;/code&gt;関数を別途定義した上で、&lt;code&gt;temperature&lt;/code&gt;にセンサーから受け取った値を代入して&lt;code&gt;step&lt;/code&gt;を呼ぶことによって、&lt;code&gt;temperature&lt;/code&gt;の値が条件に一致したとき、&lt;code&gt;heaton&lt;/code&gt;関数と&lt;code&gt;heatoff&lt;/code&gt;関数を実行してハードウェアの制御ができるのでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;側で定義したもう一つの&lt;code&gt;Stream&lt;/code&gt;、&lt;code&gt;ctemp&lt;/code&gt;は、&lt;code&gt;heaton_guard&lt;/code&gt;、&lt;code&gt;heaton_arg0&lt;/code&gt;、&lt;code&gt;heatoff_guard&lt;/code&gt;、&lt;code&gt;heatoff_arg0&lt;/code&gt;、それぞれの関数に書かれた、&lt;code&gt;temperature_cpy&lt;/code&gt;の値を変換する式に現れているようです。&lt;/p&gt;
&lt;p&gt;正直なところこの程度であれば、直接&lt;span class=&#34;ascii&#34;&gt;C&lt;/span&gt;で書いた方が余計なカッコもないし読みやすそうではあります。&lt;br /&gt;
&lt;code&gt;temp&lt;/code&gt;を&lt;code&gt;ctemp&lt;/code&gt;に変換する式&lt;code&gt;(150.0 / 255.0) - 50.0&lt;/code&gt;が変換後のソースコードでは冗長に適用されていることから、もっと最適化できそうですし。&lt;br /&gt;
とはいえ、わざわざ&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;を作ったからには、より複雑で、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でなければ書いてられないようなケースが、&lt;span class=&#34;ascii&#34;&gt;Copilot&lt;/span&gt;の開発者の現場ではあるのでしょう&lt;small&gt;（なんせ&lt;span class=&#34;ascii&#34;&gt;NASA&lt;/span&gt;の方も関わっているぐらいですから！）&lt;/small&gt;。&lt;br /&gt;
詳しいユースケースや、ビルド時のフローといった運用方法を聞きたいところですね。&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/haskell-day-2019.html&#34; lang=&#34;ja&#34;&gt;Haskell Day 2019を開催しました！&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/haskell-symposium.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;Haskell Symposium 2019 レポート&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/haskell-symposium.html</id><title type="text">Haskell Symposium 2019 レポート</title><updated>2019-10-01T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/haskell-symposium.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;p&gt;&lt;a href=&#34;https://icfp19.sigplan.org/home/haskellsymp-2019&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Symposium 2019&lt;/span&gt;&lt;/a&gt;に&lt;span class=&#34;ascii&#34;&gt;IIJ&lt;/span&gt;として参加してきました。&lt;/p&gt;
&lt;p&gt;聴講した発表についての概要をまとめましたので、どの論文を読んでみるか決めるなどの際にご活用ください。内容については私の聞きまちがい・読みまちがいなどあると思いますのでご了承ください。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#haskell-symposiumとは&#34; title=&#34;haskell-symposiumとは&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Symposium&lt;/span&gt;とは&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bidirectional-type-class-instances&#34; title=&#34;bidirectional-type-class-instances&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Bidirectional Type Class Instances&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#generic-and-flexible-defaults-for-verified-law-abiding-type-class-instances&#34; title=&#34;generic-and-flexible-defaults-for-verified-law-abiding-type-class-instances&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Generic and Flexible Defaults for Verified, Law-Abiding Type-Class Instances&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#modular-effects-in-haskell-through-effect-polymorphism-and-explicit-dictionary-applications---a-new-approach-and-the-μverifast-verifier-as-a-case-study&#34; title=&#34;modular-effects-in-haskell-through-effect-polymorphism-and-explicit-dictionary-applications---a-new-approach-and-the-μverifast-verifier-as-a-case-study&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Modular effects in Haskell through effect polymorphism and explicit dictionary applications - A new approach and the&lt;/span&gt; μ&lt;span class=&#34;ascii&#34;&gt;VeriFast verifier as a case study&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#verifying-effectful-haskell-programs-in-coq&#34; title=&#34;verifying-effectful-haskell-programs-in-coq&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Verifying Effectful Haskell Programs in Coq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#solving-haskell-equality-constraints-using-coq&#34; title=&#34;solving-haskell-equality-constraints-using-coq&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Solving Haskell equality constraints using Coq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#formal-verification-of-spacecraft-control-programs-an-experience-report&#34; title=&#34;formal-verification-of-spacecraft-control-programs-an-experience-report&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Formal Verification of Spacecraft Control Programs: An Experience Report&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#g2q-haskell-constraint-solving&#34; title=&#34;g2q-haskell-constraint-solving&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;G2Q: Haskell Constraint Solving&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#making-a-faster-curry-with-extensional-types&#34; title=&#34;making-a-faster-curry-with-extensional-types&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Making a Faster Curry with Extensional Types&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#multi-stage-programs-in-context&#34; title=&#34;multi-stage-programs-in-context&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Multi-Stage Programs in Context&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#working-with-source-plugins&#34; title=&#34;working-with-source-plugins&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Working with Source Plugins&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stclang-state-thread-composition-as-a-foundation-for-monadic-dataflow-parallelism&#34; title=&#34;stclang-state-thread-composition-as-a-foundation-for-monadic-dataflow-parallelism&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;STCLang: State Thread Composition as a Foundation for Monadic Dataflow Parallelism&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#synthesizing-functional-reactive-programs&#34; title=&#34;synthesizing-functional-reactive-programs&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Synthesizing Functional Reactive Programs&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-essence-of-live-coding-change-the-program-keep-the-state&#34; title=&#34;the-essence-of-live-coding-change-the-program-keep-the-state&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;The essence of live coding: Change the program, keep the state!&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#monad-transformers-and-modular-algebraic-effects-what-binds-them-together&#34; title=&#34;monad-transformers-and-modular-algebraic-effects-what-binds-them-together&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Monad Transformers and Modular Algebraic Effects: What Binds Them Together&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#scoping-monadic-relational-database-queries&#34; title=&#34;scoping-monadic-relational-database-queries&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Scoping Monadic Relational Database Queries&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;haskell-symposiumとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#haskell-symposiumとは&#34; title=&#34;haskell-symposiumとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Symposium&lt;/span&gt;とは&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://icfp19.sigplan.org/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;International Conference on Functional Programming&lt;/span&gt;&lt;/a&gt;（&lt;span class=&#34;ascii&#34;&gt;ICFP&lt;/span&gt;）に合わせて開催される&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する国際会議です。&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;に関する研究を発表したり、実践的な経験や将来の言語の開発について議論したり、その他の宣言的プログラミングを促進したりします。&lt;/p&gt;
&lt;h1 id=&#34;bidirectional-type-class-instances&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#bidirectional-type-class-instances&#34; title=&#34;bidirectional-type-class-instances&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Bidirectional Type Class Instances&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Koen Pauwels (KU Leuven), Georgios Karachalias (KU Leuven), Michiel Derhaeg (Guardsquare), Tom Schrijvers (KU Leuven)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/8/Bidirectional-Type-Class-Instances&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/8/Bidirectional-Type-Class-Instances&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://arxiv.org/abs/1906.12242&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://arxiv.org/abs/1906.12242&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GADT&lt;/span&gt;と型クラスはそれぞれ便利だが混ぜると問題が起きる場合がある。&lt;/p&gt;
&lt;p&gt;次のような&lt;code&gt;Term&lt;/code&gt;があるとき、その&lt;code&gt;Show&lt;/code&gt;インスタンスを考える。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Con&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Tup&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; (b, c)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のように&lt;code&gt;Show&lt;/code&gt;インスタンスを定義すると型エラーになる。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Term&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Con&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;  &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Tup&lt;/span&gt; x y) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; [&lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; x, &lt;span class=&#34;st&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;, &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; y, &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code&gt;Could not deduce (Show b) arising from a use of `show&amp;#39;
from the context (Show a) or from (a ~ (b, c))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは&lt;code&gt;Show (b, c)&lt;/code&gt;ならば&lt;code&gt;Show b&lt;/code&gt;という関係がないために起こる。&lt;/p&gt;
&lt;p&gt;一方タプルについての&lt;code&gt;Show&lt;/code&gt;は、&lt;code&gt;Show a&lt;/code&gt;かつ&lt;code&gt;Show b&lt;/code&gt;ならば&lt;code&gt;Show (a, b)&lt;/code&gt;という関係である。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; (a, b) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  …&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この「ならば」を両方向にすれば問題は解決できるのではないかというのが、この論文の主張である。&lt;/p&gt;
&lt;h1 id=&#34;generic-and-flexible-defaults-for-verified-law-abiding-type-class-instances&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#generic-and-flexible-defaults-for-verified-law-abiding-type-class-instances&#34; title=&#34;generic-and-flexible-defaults-for-verified-law-abiding-type-class-instances&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Generic and Flexible Defaults for Verified, Law-Abiding Type-Class Instances&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Ryan Scott (Indiana University), Ryan R. Newton (Indiana University)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/3/Generic-and-Flexible-Defaults-for-Verified-Law-Abiding-Type-Class-Instances&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/3/Generic-and-Flexible-Defaults-for-Verified-Law-Abiding-Type-Class-Instances&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://ryanglscott.github.io/papers/verified-classes.pdf&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://ryanglscott.github.io/papers/verified-classes.pdf&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;型クラスの法則は依存型を使えば証明できるが、インスタンスごとに書くのはめんどうなので&lt;code&gt;Generics&lt;/code&gt;で出来るようにしようという話である。&lt;/p&gt;
&lt;h1 id=&#34;modular-effects-in-haskell-through-effect-polymorphism-and-explicit-dictionary-applications---a-new-approach-and-the-μverifast-verifier-as-a-case-study&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#modular-effects-in-haskell-through-effect-polymorphism-and-explicit-dictionary-applications---a-new-approach-and-the-μverifast-verifier-as-a-case-study&#34; title=&#34;modular-effects-in-haskell-through-effect-polymorphism-and-explicit-dictionary-applications---a-new-approach-and-the-μverifast-verifier-as-a-case-study&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Modular effects in Haskell through effect polymorphism and explicit dictionary applications - A new approach and the&lt;/span&gt; μ&lt;span class=&#34;ascii&#34;&gt;VeriFast verifier as a case study&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Dominique Devriese (Vrije Universiteit Brussel)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要・論文：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/1/Modular-effects-in-Haskell-through-effect-polymorphism-and-explicit-dictionary-applic&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/1/Modular-effects-in-Haskell-through-effect-polymorphism-and-explicit-dictionary-applic&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;様々な種類の効果が複雑に絡み合うアプリケーションを整理するために、「効果を伴う処理を持った辞書」を明示的に渡す方式の提案である。&lt;/p&gt;
&lt;p&gt;提案した方式によって&lt;span class=&#34;ascii&#34;&gt;VeriFast&lt;/span&gt;を再実装してみることで、実際に発生した問題と解決方法を解説している。&lt;/p&gt;
&lt;h1 id=&#34;verifying-effectful-haskell-programs-in-coq&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#verifying-effectful-haskell-programs-in-coq&#34; title=&#34;verifying-effectful-haskell-programs-in-coq&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Verifying Effectful Haskell Programs in Coq&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Jan Christiansen (Flensburg University of Applied Sciences), Sandra Dylus (University of Kiel), Niels Bunkenburg (University of Kiel)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/4/Verifying-Effectful-Haskell-Programs-in-Coq&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/4/Verifying-Effectful-Haskell-Programs-in-Coq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342592&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342592&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Coq&lt;/span&gt;による、効果を伴うプログラムの証明に関する話。&lt;/p&gt;
&lt;p&gt;効果について直接証明することはせず、&lt;span class=&#34;ascii&#34;&gt;Free&lt;/span&gt;モナドを用いての証明を試みても、そのまま&lt;span class=&#34;ascii&#34;&gt;Coq&lt;/span&gt;に翻訳すると停止性チェックによってエラーになってしまう。&lt;/p&gt;
&lt;p&gt;そのために行った工夫に加え、具体例として、&lt;code&gt;trace&lt;/code&gt;や（部分関数による）エラーなど、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;において暗黙に発生する効果を考慮したモデル化について検討した。&lt;/p&gt;
&lt;h1 id=&#34;solving-haskell-equality-constraints-using-coq&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#solving-haskell-equality-constraints-using-coq&#34; title=&#34;solving-haskell-equality-constraints-using-coq&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Solving Haskell equality constraints using Coq&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Zubin Duggal&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要・論文：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/15/Solving-Haskell-equality-constraints-using-Coq&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/15/Solving-Haskell-equality-constraints-using-Coq&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;data kinds&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;type families&lt;/span&gt;といった&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;拡張によって厳格なデータ型を定義できるが、それに対する操作を定義すると&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;には解けない型レベルの等式が生成されることがある。&lt;/p&gt;
&lt;p&gt;制約カインドの型に対する型クラスとして&lt;code&gt;Proven&lt;/code&gt;を提供し、この制約がある箇所を&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;型検査プラグインが検出して対応する&lt;span class=&#34;ascii&#34;&gt;Coq&lt;/span&gt;コードのテンプレートを生成する。&lt;/p&gt;
&lt;p&gt;その&lt;span class=&#34;ascii&#34;&gt;Coq&lt;/span&gt;コードに証明がなければ警告を表示する。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ProofName&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Symbol&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proven&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;prf ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ProofName&lt;/span&gt;) (&lt;span class=&#34;ot&#34;&gt;c ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constraint&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; {}&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-6&#34; title=&#34;6&#34;&gt;&lt;span class=&#34;ot&#34;&gt;applyProof ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; prf c a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proven&lt;/span&gt; prf c &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (c &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-7&#34; title=&#34;7&#34;&gt;applyProof x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-9&#34; title=&#34;9&#34;&gt;lemma3 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; applyProof &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;nonzero_pop&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;NNonZero&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Popcount&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;) &lt;span class=&#34;dt&#34;&gt;Refl&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いくつか制約があるが&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の型を&lt;span class=&#34;ascii&#34;&gt;Coq&lt;/span&gt;に自動的に変換している。&lt;/p&gt;
&lt;h1 id=&#34;formal-verification-of-spacecraft-control-programs-an-experience-report&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#formal-verification-of-spacecraft-control-programs-an-experience-report&#34; title=&#34;formal-verification-of-spacecraft-control-programs-an-experience-report&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Formal Verification of Spacecraft Control Programs: An Experience Report&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Andrey Mokhov (Newcastle University), Georgy Lukyanov (Newcastle University), Jakob Lechner (RUAG Space Austria GmbH)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/5/Formal-Verification-of-Spacecraft-Control-Programs-An-Experience-Report&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/5/Formal-Verification-of-Spacecraft-Control-Programs-An-Experience-Report&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342593&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342593&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;REDFIN&lt;/span&gt;という固定小数演算と整数演算のための処理系があるのだが、そのアセンブリーコードに対して形式検証をしたという報告である。&lt;/p&gt;
&lt;h1 id=&#34;g2q-haskell-constraint-solving&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#g2q-haskell-constraint-solving&#34; title=&#34;g2q-haskell-constraint-solving&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;G2Q: Haskell Constraint Solving&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;William T. Hallahan (Yale University), Anton Xue (Yale University), Ruzica Piskac (Yale University)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/2/G2Q-Haskell-Constraint-Solving&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/2/G2Q-Haskell-Constraint-Solving&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342590&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342590&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;G2Q&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースに&lt;span class=&#34;ascii&#34;&gt;quasi quote&lt;/span&gt;で埋め込む&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;である。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で書いた条件式を&lt;span class=&#34;ascii&#34;&gt;symbolic execution&lt;/span&gt;して、&lt;span class=&#34;ascii&#34;&gt;SMT solver&lt;/span&gt;に渡す式に変換して、&lt;span class=&#34;ascii&#34;&gt;SMT solver&lt;/span&gt;に条件を満たす関数を導出させる。&lt;/p&gt;
&lt;h1 id=&#34;making-a-faster-curry-with-extensional-types&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#making-a-faster-curry-with-extensional-types&#34; title=&#34;making-a-faster-curry-with-extensional-types&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Making a Faster Curry with Extensional Types&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Paul Downen (University of Oregon), Zachary Sullivan, Zena M. Ariola (University of Oregon), Simon Peyton Jones (Microsoft)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/6/Making-a-Faster-Curry-with-Extensional-Types&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/6/Making-a-Faster-Curry-with-Extensional-Types&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://ix.cs.uoregon.edu/~pdownen/publications/eta.pdf&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://ix.cs.uoregon.edu/~pdownen/publications/eta.pdf&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パフォーマンスのためにη変換してほしいところを明示したいことがある。&lt;/p&gt;
&lt;p&gt;例えば、次のような意味論上は等価な関数&lt;code&gt;f1&lt;/code&gt;と&lt;code&gt;f2&lt;/code&gt;があるとする。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-1&#34; title=&#34;1&#34;&gt;f1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h x x &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; \y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; e y z&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb6-2&#34; title=&#34;2&#34;&gt;f2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; \y &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; h x x &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; e y z&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際は&lt;code&gt;f1&lt;/code&gt;は引数&lt;code&gt;x&lt;/code&gt;を取った後クロージャー生成のためにヒープ確保するのに対して、&lt;code&gt;f2&lt;/code&gt;はアリティが&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;の関数と解釈されて中間のクロージャーが必要なくなる。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~&amp;gt;&lt;/code&gt;というアリティの情報を持った関数型を新たに導入して&lt;code&gt;-&amp;gt;&lt;/code&gt;の代わりに使えるようにする。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TYPE (a :: RuntimeRep (FunRep 2))&lt;/code&gt;というような新たなポリモーフィズムを導入する。ここでの&lt;code&gt;2&lt;/code&gt;がアリティ。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Int&lt;/code&gt;に対して&lt;code&gt;Int#&lt;/code&gt;があるように基本的にはパフォーマンスが必要なライブラリーなど内部的に使用する想定。&lt;/p&gt;
&lt;h1 id=&#34;multi-stage-programs-in-context&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#multi-stage-programs-in-context&#34; title=&#34;multi-stage-programs-in-context&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Multi-Stage Programs in Context&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Matthew Pickering (University of Bristol), Nicolas Wu (Imperial College London), Csongor Kiss (Imperial College London)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/9/Multi-Stage-Programs-in-Context&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/9/Multi-Stage-Programs-in-Context&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342597&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342597&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;次のような準引用があったときに、組み合わせると元々あったはずの情報が欠落する場合がある。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;qshow ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Code&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-2&#34; title=&#34;2&#34;&gt;qshow &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [q| show |]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;qread ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Code&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-5&#34; title=&#34;5&#34;&gt;qread &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [q| read |]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;trim ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Code&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb7-8&#34; title=&#34;8&#34;&gt;trim &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [q| $(qshow) . $(qread) |]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;qshow&lt;/code&gt;と&lt;code&gt;qread&lt;/code&gt;にあった&lt;code&gt;Int&lt;/code&gt;という情報が、組み合わせて&lt;code&gt;trim&lt;/code&gt;とすると欠落してコンパイルエラーになってしまう。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;splice&lt;/span&gt;するときに&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;ソースコードの構文木ではなく&lt;span class=&#34;ascii&#34;&gt;Core&lt;/span&gt;に対するものを出力すればそれは型が明示されているし問題がない。&lt;/p&gt;
&lt;p&gt;しかも、&lt;span class=&#34;ascii&#34;&gt;splice&lt;/span&gt;後の型検査を省略できるのでコンパイルの高速化にも寄与する。&lt;/p&gt;
&lt;h1 id=&#34;working-with-source-plugins&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#working-with-source-plugins&#34; title=&#34;working-with-source-plugins&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Working with Source Plugins&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Matthew Pickering (University of Bristol), Nicolas Wu (Imperial College London), Boldizsár Németh (Eötvös Loránd University)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/11/Working-with-Source-Plugins&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/11/Working-with-Source-Plugins&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342599&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342599&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;souce plugins&lt;/span&gt;のしくみや、書き方、実装時のテクニックの紹介である。&lt;/p&gt;
&lt;h1 id=&#34;stclang-state-thread-composition-as-a-foundation-for-monadic-dataflow-parallelism&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#stclang-state-thread-composition-as-a-foundation-for-monadic-dataflow-parallelism&#34; title=&#34;stclang-state-thread-composition-as-a-foundation-for-monadic-dataflow-parallelism&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;STCLang: State Thread Composition as a Foundation for Monadic Dataflow Parallelism&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Sebastian Ertel, Justus Adam (Technische Universität Dresden), Norman A. Rink (TU Dresden), Andrés Goens, Jeronimo Castrillon (TU Dresden)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/12/STCLang-State-Thread-Composition-as-a-Foundation-for-Monadic-Dataflow-Parallelism&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/12/STCLang-State-Thread-Composition-as-a-Foundation-for-Monadic-Dataflow-Parallelism&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342600&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342600&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同じ時刻の&lt;span class=&#34;ascii&#34;&gt;HIW&lt;/span&gt;の発表を聴講していたためこちらは聴講していません。&lt;/p&gt;
&lt;h1 id=&#34;synthesizing-functional-reactive-programs&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#synthesizing-functional-reactive-programs&#34; title=&#34;synthesizing-functional-reactive-programs&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Synthesizing Functional Reactive Programs&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Bernd Finkbeiner, Felix Klein (Saarland University), Ruzica Piskac (Yale University, Mark Santolucito (Yale University)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/13/Synthesizing-Functional-Reactive-Programs&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/13/Synthesizing-Functional-Reactive-Programs&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342601&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342601&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同じ時刻の&lt;span class=&#34;ascii&#34;&gt;HIW&lt;/span&gt;の発表を聴講していたためこちらは聴講していません。&lt;/p&gt;
&lt;h1 id=&#34;the-essence-of-live-coding-change-the-program-keep-the-state&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#the-essence-of-live-coding-change-the-program-keep-the-state&#34; title=&#34;the-essence-of-live-coding-change-the-program-keep-the-state&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;The essence of live coding: Change the program, keep the state!&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Manuel Bärenz (sonnen eServices GmbH)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要・論文：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/14/The-essence-of-live-coding-Change-the-program-keep-the-state-&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/14/The-essence-of-live-coding-Change-the-program-keep-the-state-&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同じ時刻の&lt;span class=&#34;ascii&#34;&gt;HIW&lt;/span&gt;の発表を聴講していたためこちらは聴講していません。&lt;/p&gt;
&lt;h1 id=&#34;monad-transformers-and-modular-algebraic-effects-what-binds-them-together&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#monad-transformers-and-modular-algebraic-effects-what-binds-them-together&#34; title=&#34;monad-transformers-and-modular-algebraic-effects-what-binds-them-together&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Monad Transformers and Modular Algebraic Effects: What Binds Them Together&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Tom Schrijvers (KU Leuven), Maciej Piróg (University of Wroc&lt;/span&gt;ł&lt;span class=&#34;ascii&#34;&gt;aw), Nicolas Wu (Imperial College London), Mauro Jaskelioff (CONICET)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/7/Monad-Transformers-and-Modular-Algebraic-Effects-What-Binds-Them-Together&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/7/Monad-Transformers-and-Modular-Algebraic-Effects-What-Binds-Them-Together&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342595&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342595&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;モナドトランスフォーマーと代数的効果との対比である。&lt;/p&gt;
&lt;p&gt;モナドトランスフォーマーから代数的効果への変換またその逆のときにどういう手法があって、それぞれを構成する要素がどう対応しているかを説明している。&lt;/p&gt;
&lt;p&gt;モナドトランスフォーマーと代数的効果だとモナドトランスフォーマーの方が表現できるものが大きいのでモナドトランスフォーマーから代数的効果へはどんなものでも変換できるわけではない。&lt;/p&gt;
&lt;p&gt;例えば&lt;code&gt;catch&lt;/code&gt;や&lt;code&gt;local&lt;/code&gt;は代数的効果にできない。&lt;/p&gt;
&lt;h1 id=&#34;scoping-monadic-relational-database-queries&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#scoping-monadic-relational-database-queries&#34; title=&#34;scoping-monadic-relational-database-queries&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Scoping Monadic Relational Database Queries&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;著者：&lt;span class=&#34;ascii&#34;&gt;Anton Ekblad (Chalmers University of Technology)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;概要：&lt;a href=&#34;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/10/Scoping-Monadic-Relational-Database-Queries&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://icfp19.sigplan.org/details/haskellsymp-2019-papers/10/Scoping-Monadic-Relational-Database-Queries&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;論文：&lt;a href=&#34;https://dl.acm.org/citation.cfm?id=3342598&#34; class=&#34;uri&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;https://dl.acm.org/citation.cfm?id=3342598&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;モナドは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;界隈で非常に普及しているので&lt;span class=&#34;ascii&#34;&gt;SQL&lt;/span&gt;に対する&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;としてモナドの構造を採用したい。&lt;/p&gt;
&lt;p&gt;このとき&lt;span class=&#34;ascii&#34;&gt;SQL&lt;/span&gt;の結合を表現すると、&lt;span class=&#34;ascii&#34;&gt;SQL&lt;/span&gt;としてはスコープ外にもかかわらず&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;としてはスコープ内となって使える変数ができてしまう。&lt;/p&gt;
&lt;p&gt;これを&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;としてもエラーとしたい。&lt;/p&gt;
&lt;p&gt;例えば、次のような例で実行時エラーとなってしまう。ここで&lt;code&gt;a0&lt;/code&gt;は&lt;code&gt;tableA&lt;/code&gt;の列とする。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode sql&#34;&gt;&lt;code class=&#34;sourceCode sql&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;SELECT&lt;/span&gt; a0, b0&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-3&#34; title=&#34;3&#34;&gt;  tableA&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-4&#34; title=&#34;4&#34;&gt;    &lt;span class=&#34;kw&#34;&gt;LEFT&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;JOIN&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-5&#34; title=&#34;5&#34;&gt;      (&lt;span class=&#34;kw&#34;&gt;SELECT&lt;/span&gt; b0 &lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; tableB &lt;span class=&#34;kw&#34;&gt;WHERE&lt;/span&gt; a0 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; b1)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb8-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;ON&lt;/span&gt; tableA.a2 &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; tableb.b2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;SELECT b0 FROM tableB WHERE a0 == b1&lt;/code&gt;の部分でスコープ外の&lt;code&gt;a0&lt;/code&gt;を参照しているためエラーとなる。&lt;/p&gt;
&lt;p&gt;単純なモナド&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;だと次のようになりコンパイルが通る。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-2&#34; title=&#34;2&#34;&gt;  a0 &lt;span class=&#34;op&#34;&gt;:*:&lt;/span&gt; a1 &lt;span class=&#34;op&#34;&gt;:*:&lt;/span&gt; a2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; from table0&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-3&#34; title=&#34;3&#34;&gt;  leftJoin &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-4&#34; title=&#34;4&#34;&gt;    b0 &lt;span class=&#34;op&#34;&gt;:*:&lt;/span&gt; b1 &lt;span class=&#34;op&#34;&gt;:*:&lt;/span&gt; b2 &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; from table1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-5&#34; title=&#34;5&#34;&gt;    ristrict &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; a0 &lt;span class=&#34;op&#34;&gt;.==&lt;/span&gt; b1&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb9-6&#34; title=&#34;6&#34;&gt;  on &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; a2 &lt;span class=&#34;op&#34;&gt;.==&lt;/span&gt; b2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ristrict $ a0 .== b1&lt;/code&gt;の部分において&lt;code&gt;a0&lt;/code&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;としてはスコープ内にある。&lt;/p&gt;
&lt;p&gt;この問題を次のような型レベル関数を駆使することで&lt;span class=&#34;ascii&#34;&gt;EDSL&lt;/span&gt;においてもコンパイル時エラーとすることができた。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;family&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cols&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;family&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Outer&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;family&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UnAggr&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb10-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;family&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FromRow&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/hiw-copilot.html&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、Copilotという内部DSLについて&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hiw-gibbon.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、Gibbonコンパイラーについて&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/hiw-gibbon.html</id><title type="text">HIW 2019で発表された、Gibbonコンパイラーについて</title><updated>2019-09-28T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/hiw-gibbon.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2019/hiw-ghc-future.html&#34;&gt;前回&lt;/a&gt;から引き続き、&lt;a href=&#34;https://icfp19.sigplan.org/home/hiw-2019#About&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Implementors&lt;/span&gt;’ &lt;span class=&#34;ascii&#34;&gt;Workshop 2019&lt;/span&gt;&lt;/a&gt;への参加レポートとして、私の印象に残った発表を紹介します。&lt;br /&gt;
今回は、&lt;a href=&#34;http://iu-parfunc.github.io/gibbon/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;以外の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;&lt;small&gt;（の、サブセット）&lt;/small&gt;の処理系についての発表です。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#the-gibbon-compiler-accelerating-a-small-subset-of-haskell&#34; title=&#34;the-gibbon-compiler-accelerating-a-small-subset-of-haskell&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;The Gibbon Compiler: Accelerating a small subset of Haskell&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;the-gibbon-compiler-accelerating-a-small-subset-of-haskell&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#the-gibbon-compiler-accelerating-a-small-subset-of-haskell&#34; title=&#34;the-gibbon-compiler-accelerating-a-small-subset-of-haskell&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;The Gibbon Compiler: Accelerating a small subset of Haskell&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;発表者&lt;span class=&#34;ascii&#34;&gt;: Ryan R. Newton&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Indiana University&lt;/span&gt;&lt;/em&gt;&lt;span class=&#34;ascii&#34;&gt;, Michael Vollmer&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Indiana University, USA&lt;/span&gt;&lt;/em&gt;&lt;span class=&#34;ascii&#34;&gt;, Chaitanya Koparkar&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Indiana University&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;は最適化の手法を研究するために作られたコンパイラーです。&lt;br /&gt;
具体的には、我々&lt;small&gt;（特に&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;）&lt;/small&gt;がよく使う、木構造全体に対する処理の最適化です。&lt;/p&gt;
&lt;p&gt;こうした木構造のデータは、通常ポインターを使ってメモリー内にバラバラに格納されますが、&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;による最適化を行うと、実際にプログラムがどのような順番で木を処理しているのか解析して、（元のデータ構造を配列に変換した上で）その順番に並べられた配列として処理するコードに変換する、という大胆な変換を行います。 図にするとこんなイメージでしょうか？&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/hiw-gibbon/tree-and-array1.svg&#34; alt=&#34;変換前の木構造。各ノードがそれぞれ（レベル順で）A, B, … , Gという値を持っている&#34; /&gt;&lt;figcaption&gt;変換前の木構造。各ノードがそれぞれ（レベル順で）&lt;span class=&#34;ascii&#34;&gt;A, B,&lt;/span&gt; … &lt;span class=&#34;ascii&#34;&gt;, G&lt;/span&gt;という値を持っている&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;👆のような木構造があったとして、&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/hiw-gibbon/tree-and-array2.svg&#34; alt=&#34;行きがけ順（A, B, D, E, C, F, Gの順）でアクセスする&#34; /&gt;&lt;figcaption&gt;行きがけ順（&lt;span class=&#34;ascii&#34;&gt;A, B, D, E, C, F, G&lt;/span&gt;の順）でアクセスする&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;👆における、赤い線の順番&lt;small&gt;（行きがけ順）&lt;/small&gt;にアクセスする関数があったとします。&lt;br /&gt;
適当に&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の再帰関数として書くと、👇こういうコードです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt;) (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;tree ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;tree &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;    ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;      ( &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;D&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;      )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;    )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;    ( &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;      ( &lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;F&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;        (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;G&amp;#39;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;      )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;    )&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;preOrder ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tree&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;preOrder access (&lt;span class=&#34;dt&#34;&gt;Node&lt;/span&gt; char mLeft mRight) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;  access char&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; mLeft &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; left &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; preOrder access left&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-25&#34; title=&#34;25&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-26&#34; title=&#34;26&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-27&#34; title=&#34;27&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; mRight &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-28&#34; title=&#34;28&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; right &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; preOrder access right&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-29&#34; title=&#34;29&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;はこの関数と、それが処理する木構造を解析して、&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/img/2019/hiw-gibbon/tree-and-array3.svg&#34; alt=&#34;変換された配列。A, B, D, E, C, F, Gの順に要素が並んだただの配列&#34; /&gt;&lt;figcaption&gt;変換された配列。&lt;span class=&#34;ascii&#34;&gt;A, B, D, E, C, F, G&lt;/span&gt;の順に要素が並んだただの配列&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;👆のような、ただの配列（とそれに対する関数）にまとめて変換してしまう、というのです！&lt;/p&gt;
&lt;p&gt;現代のコンピューターは、このような配列の要素にまとめてアクセス処理する方が、ポインターをたどって各要素を処理するより、たいてい遙かに速いです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;はこの特性を活かすべく、我々&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;が好んで使うような、ポインターだらけの木構造を可能な限り配列に変換することで、要素をまとめて処理する（&lt;span class=&#34;ascii&#34;&gt;traverse&lt;/span&gt;する）演算の最適化を図るコンパイラーです。&lt;/p&gt;
&lt;p&gt;ちなみに、元の木に対するノードの追加に相当する処理は、新しいノードに対するポインターを書き込む処理に変換するそうです。&lt;br /&gt;
なので何度も追加を繰り返すと、あまり恩恵が受けられなくなってしまいそうです。&lt;/p&gt;
&lt;p&gt;なかなか興味深いアイディアですが、個人的に聞きそびれた疑問が&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つあります。&lt;br /&gt;
一つは、そもそも木構造を定義するような状況というのは、いろいろな順番でアクセスしたいし、新しい要素の追加も繰り返し行いたいケースではないでしょうか？&lt;br /&gt;
例えば&lt;a href=&#34;http://hackage.haskell.org/package/unordered-containers&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;unordered-containers&lt;/span&gt;&lt;/a&gt;にある&lt;code&gt;HashMap&lt;/code&gt;型は探索木を使った頻繁に使われるデータ構造ですが、&lt;code&gt;HashMap&lt;/code&gt;を使う場合に行う処理の多くは、ランダムアクセスや要素の追加・削除でしょう。&lt;/p&gt;
&lt;p&gt;なので、&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;が最適化したい「木構造」というのは、どちらかというと探索木のような木ではなく、構文木のような、要素をまとめて処理することを前提とした木のことなのかもしれません。&lt;br /&gt;
確かに人間が書く言語の構文木程度であれば、すべてメモリー上で処理できる程度のサイズに収まる&lt;small&gt;（という想定でなければコンパイラー作りがものすごく難しくなる）&lt;/small&gt;でしょうし、構文木の処理を高速化できれば、遅い遅いと言われる&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のコンパイル速度も高められるはずです。それはそれでありがたい。&lt;/p&gt;
&lt;p&gt;もう一つは、これまた例えば&lt;code&gt;HashMap&lt;/code&gt;型のような木をベースにした連想配列も、配列ベースのハッシュテーブルに変換することができるのでしょうか？&lt;br /&gt;
もしそうだとすると、ランダムアクセスに対する計算量のオーダーも&lt;span class=&#34;ascii&#34;&gt;O(log n)&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;O(1)&lt;/span&gt;に変わるわけですし、要素をまとめて処理する以外の演算についても劇的な改善が見込めるかもしれません。&lt;br /&gt;
もちろんこれも先ほどの推測が正しければ無意味な想像ですが、夢のある話ですね。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;は将来的には、&lt;code&gt;Packed&lt;/code&gt;という型クラスを提供することで、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;本体への統合も視野に入れているそうです。&lt;br /&gt;
&lt;code&gt;Packed&lt;/code&gt;を実装した型は、値をどのように配列に変換するのか定義することで、&lt;span class=&#34;ascii&#34;&gt;Gibbon&lt;/span&gt;による最適化のためのヒントを与えることができます。&lt;/p&gt;
&lt;p&gt;参考&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; &lt;a href=&#34;https://ja.wikipedia.org/w/index.php?title=%E6%9C%A8%E6%A7%8B%E9%80%A0_(%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0)&amp;amp;oldid=72655479&#34;&gt;木構造 &lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;データ構造&lt;span class=&#34;ascii&#34;&gt;) - Wikipedia&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/haskell-symposium.html&#34; lang=&#34;ja&#34;&gt;Haskell Symposium 2019 レポート&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hiw-ghc-future.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、GHC 8.10に導入されるであろう機能&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-09-21-stack-build-image.html</id><title type="text">CI で Haskell Stack の Docker Integration するために</title><updated>2019-09-21T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-09-21-stack-build-image.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;Haskell のビルドツール Stack の Docker Integration を使うことで，指定したイメージ内でホストマシンと全く同じように別の OS のバイナリをビルドできます． さらに一工夫をすることで，そのバイナリを埋め込んだ Docker Image を作ることができます(一工夫については「&lt;a href=&#34;/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html&#34;&gt;stack image コマンドなしに Haskell アプリの Docker イメージを作る&lt;/a&gt;」に書いた)&lt;/p&gt;
&lt;p&gt;僕はこのプロセスを TravisCI で行い，&lt;code&gt;master&lt;/code&gt; プッシュした時に &lt;code&gt;latest&lt;/code&gt; イメージを更新してました． が，どうしても CI のビルド時間が長すぎた(1ステップ30分かかることもしばしば)ので改善しました． っていう話です．&lt;/p&gt;
&lt;h2 id=&#34;何が遅いのか&#34;&gt;何が遅いのか&lt;/h2&gt;
&lt;p&gt;TravisCI のログを見てみる:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/assets/stack-build-image/ci-log-1.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1571.75s&lt;/code&gt; もかかってるのは依存パッケージのみをビルドしているステップだ． 現状の主原因は単純に Haskell Stack のビルドがゲキオモなせい(巷でもよく言われてる)． でもこれは初回だけで，Stack v2 からは &lt;a href=&#34;https://www.fpcomplete.com/blog/2018/08/pantry-part-3/specifying-dependencies&#34;&gt;Pantry&lt;/a&gt; というシステムを導入して効率よく依存パッケージを SQLite にキャッシュしている(2回目以降でキャッシュを使うのは v1 もだったが v2 からは別のプロジェクトでも共有できるようになった)． なので，TravisCI にうまくキャッシュをする設定をすることで CI 中のビルド時間は劇的に改善する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# .travis.yml の一部&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;360&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;directories&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;$HOME/.stack/&amp;quot;&lt;/span&gt;&lt;span class=&#34;co&#34;&gt;     # Pantry のキャッシュはココ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;$HOME/.local/bin/&amp;quot;&lt;/span&gt;&lt;span class=&#34;co&#34;&gt; # ココには stack が入る&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;.stack-work/&amp;quot;&lt;/span&gt;&lt;span class=&#34;co&#34;&gt;      # プロジェクト固有のキャッシュはココ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;/assets/stack-build-image/ci-log-2.jpg&#34;&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;さて残りの &lt;code&gt;371.27s&lt;/code&gt; はなんと &lt;code&gt;docker pull&lt;/code&gt; にかかってる時間だ．&lt;/p&gt;
&lt;h3 id=&#34;fpcostack-build&#34;&gt;fpco/stack-build&lt;/h3&gt;
&lt;p&gt;Stack の Docker Integration を利用することで指定した Docker Image 内でビルドを実行する． つまり，指定した Docker Image をプルしてくる必要がある． ログからわかるようにこの時点では &lt;a href=&#34;https://hub.docker.com/r/fpco/stack-build/&#34;&gt;&lt;code&gt;fpco/stack-build&lt;/code&gt;&lt;/a&gt; という Stack の開発チームが提供している公式イメージを使っている:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml の一部&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;docker&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; fpco/stack-build&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker Hub を見てみるとわかるのだが，なんと3GBもある(&lt;a href=&#34;https://github.com/docker/hub-feedback/issues/331#issuecomment-141544523&#34;&gt;Docker Hub に書いてあるのは圧縮されたサイズ&lt;/a&gt;なので，手元での実際のサイズはなんと8.5GBもある)． もちろんローカルなら同じイメージを何度もプルすることはないので問題ないのだが，残念ながら TravisCI には Docker Image をキャッシュしない． 無理やり固めてキャッシュすることは可能だが，試してみたらそっちの方が時間がかかった(8.5GBもあるからね)．&lt;/p&gt;
&lt;h2 id=&#34;軽いイメージを作る&#34;&gt;軽いイメージを作る&lt;/h2&gt;
&lt;p&gt;なんでこんなにもあるのかは知らないけど，大きいなら小さくすれば良い． ということで自作することにした:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/matsubara0507/stack-build&#34;&gt;matsubara0507/stack-build - Docker Hub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;イメージサイズは125MB(非圧縮サイズは380MB)． とりあえず，必要そうなものだけを &lt;code&gt;apt-get&lt;/code&gt; して，自分のプログラムがビルドできるのだけ試した:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode dockerfile&#34;&gt;&lt;code class=&#34;sourceCode dockerfile&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;FROM&lt;/span&gt; ubuntu:18.04&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y \&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;    curl \&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;    gcc \&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;    g++ \&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;    git \&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;    gnupg \&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;    libc6-dev \&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;    libffi-dev \&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;    libgmp-dev \&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;    make \&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;    netbase \&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;    xz-utils \&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;    zlib1g-dev \&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; apt-get clean \&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;ENV&lt;/span&gt; STACK_VERSION=&lt;span class=&#34;st&#34;&gt;&amp;quot;2.1.3&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-18&#34;&gt;&lt;a href=&#34;#cb3-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;RUN&lt;/span&gt; curl -sSL https://get.haskellstack.org/ | sh \&lt;/span&gt;
&lt;span id=&#34;cb3-19&#34;&gt;&lt;a href=&#34;#cb3-19&#34;&gt;&lt;/a&gt; &amp;amp;&amp;amp; stack upgrade --binary-version=${STACK_VERSION}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なので，他の人が使ってもちゃんとビルドできる保証はない． もちろん，これで CI の時間も &lt;code&gt;30s&lt;/code&gt; ぐらいに短縮した(キャッシュの解凍・圧縮に3分ぐらいかかっちゃうんだけど)．&lt;/p&gt;
&lt;h2 id=&#34;section&#34;&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，一通りできてから気づいたのだが，ちゃんと公式にも小さいイメージができてた(半年ぐらい前からっぽい)．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/fpco/stack-build-small&#34;&gt;fpco/stack-build-small - Docker Hub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;圧縮サイズが390MBなので，自作の方が小さいから自分のをとりあえず困るまでは使うことにします．&lt;/p&gt;
&lt;h3 id=&#34;docker-integration-と-resolver&#34;&gt;Docker Integration と Resolver&lt;/h3&gt;
&lt;p&gt;Stack はビルド可能なパッケージのバージョンをまとめた Resolver を提供している． Resolver は設定ファイルで指定し，Docker Integration でイメージタグを指定しないと Resolver と同じ名前のタグを自動で利用してくれる．&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# stack.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;resolver&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts-14.6&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; .&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;extra-deps&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;docker&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; matsubara0507/stack-build&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;enable&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この場合は &lt;code&gt;matsubara0507/stack-build:lts-14.6&lt;/code&gt; イメージを利用する． この Resolver の更新頻度は結構高く，Resolver が出るたびに &lt;code&gt;matsubara0507/stack-build&lt;/code&gt; のタグを増やさないといけない． 困った．&lt;/p&gt;
&lt;p&gt;(先にネタバレをすると，&lt;code&gt;docker.repo&lt;/code&gt; でタグまで指定すれば更新する必要は微塵もなかった)&lt;/p&gt;
&lt;h2 id=&#34;どうやって更新するか&#34;&gt;どうやって更新するか&lt;/h2&gt;
&lt;p&gt;外のソフトウェアのバージョンアップを検知して自分の Docker Image を更新するのって結構大変なんだが，昔同じようなシチュエーションで支援プログラムを作ったのを思い出した:&lt;/p&gt;
&lt;h1 id=&#34;section-1&#34;&gt;&lt;iframe width=&#34;320&#34; height=&#34;163&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/dockwright&#34;&gt;&lt;/iframe&gt;&lt;/h1&gt;
&lt;p&gt;こいつを改良してバージョンを追うことにした．&lt;/p&gt;
&lt;h3 id=&#34;dockwright&#34;&gt;Dockwright&lt;/h3&gt;
&lt;p&gt;もともと利用したのはこれ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/posts/2018-06-15-introduce-elchemy-part1.html&#34;&gt;Elchemy 入門 : その１&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elchemy というプログラミング言語のバージョンを追って Dockerfile を作り直す． そのために GitHub のリリースなどをチェックして，Dockerfile の &lt;code&gt;ENV&lt;/code&gt; を書き換えるような動作をしている． ちなみに，Docker Image の作成自体は DockerHub の自動ビルドを使っていた．&lt;/p&gt;
&lt;p&gt;今回の要件は2つ:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;ENV&lt;/code&gt; ではなく Docker Image タグとして利用したい&lt;/li&gt;
&lt;li&gt;GitHub ではなく &lt;a href=&#34;https://www.stackage.org/download/snapshots.json&#34;&gt;Stackage の API&lt;/a&gt; の特定のキーの値を見たい&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;そのためにタグをいじるための機能を追加した(実装それ自体に面白さは特にないので割愛):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 設定したイメージの DockarHub 上の全てのタグを取得
$ dockwright --tags

# 設定した `tags` からタグを取得し DockerHub のタグにないものを出力
# dockwright --new-tags&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;tags&lt;/code&gt; の設定は次のような感じ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode yaml&#34;&gt;&lt;code class=&#34;sourceCode yaml&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# .dockwright.yaml の一部&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;tags&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# latest は常に&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; value&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; latest&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;always&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# 前述した API の返り値 JSON の特定のキーの値&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; refer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; https://www.stackage.org/download/snapshots.json&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; nightly&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-13&#34;&gt;&lt;a href=&#34;#cb6-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;at&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;at&#34;&gt; lts&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして次のような Makefile とシェルスクリプトを書いて更新している:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode makefile&#34;&gt;&lt;code class=&#34;sourceCode makefile&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# Makefile&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;DOCKER_CMD   &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; docker run --rm&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;IMAGE        &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; matsubara0507/dockwright:1.1.0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;BUILD_CMD    &lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; dockwright .dockwright.yaml&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;tags:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;	&lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DOCKER_CMD&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; -v `pwd`/&lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt;:/work &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;IMAGE&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;BUILD_CMD&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; --tags --with-name&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;new-tags:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;	&lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DOCKER_CMD&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; -v `pwd`/&lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt;:/work &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;IMAGE&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;BUILD_CMD&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; --new-tags --with-name&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;dockerfile:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;	&lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;DOCKER_CMD&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; -v `pwd`/&lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt;:/work &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;IMAGE&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;BUILD_CMD&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;image:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;	docker build -t &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;push:&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt; image&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;	docker push &lt;span class=&#34;ch&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;ch&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode sh&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;# update-image.sh&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;target=$1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;make&lt;/span&gt; dockerfile dir=&lt;span class=&#34;va&#34;&gt;${target}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; status&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; add -A &lt;span class=&#34;va&#34;&gt;${target}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; diff --quiet &lt;span class=&#34;kw&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; diff --staged --quiet &lt;span class=&#34;kw&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;git&lt;/span&gt; commit -m &lt;span class=&#34;st&#34;&gt;&amp;quot;[skip ci] Update &lt;/span&gt;&lt;span class=&#34;va&#34;&gt;${target}&lt;/span&gt;&lt;span class=&#34;st&#34;&gt; image&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;make&lt;/span&gt; -s new-tags dir=&lt;span class=&#34;va&#34;&gt;${target}&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;xargs&lt;/span&gt; -ITAG make push dir=&lt;span class=&#34;va&#34;&gt;${target}&lt;/span&gt; tag=TAG&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に使っているリポジトリは&lt;a href=&#34;https://github.com/matsubara0507/haskell-dockerfiles&#34;&gt;コレ&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id=&#34;おまけ-結局どこが重い&#34;&gt;おまけ: 結局どこが重い？&lt;/h2&gt;
&lt;p&gt;なんで &lt;code&gt;fpco/stack-build&lt;/code&gt; がこんなに重いのか，調べてみた:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker history fpco/stack-build:lts-14.4
IMAGE               CREATED             CREATED BY                                      SIZE
9adc774bb5e5        5 weeks ago         /bin/sh -c #(nop)  CMD [&amp;quot;bash&amp;quot;]                 0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ENTRYPOINT [&amp;quot;/usr/local/s…   0B
&amp;lt;missing&amp;gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   391kB
&amp;lt;missing&amp;gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   93.5MB
&amp;lt;missing&amp;gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   17B
&amp;lt;missing&amp;gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   8.12GB
&amp;lt;missing&amp;gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   239MB
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ENV LANG=C.UTF-8 LC_ALL=C…   0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG STACK_ROOT=/home/stac…   0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG VARIANT=build            0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG DEBIAN_FRONTEND=nonin…   0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG BOOTSTRAP_COMMIT=d414…   0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG LLVM_VERSION=3.9         0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG JVM_PATH=/usr/lib/jvm…   0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG CUDA_VERSION=10.0        0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG STACK_VERSION=2.1.3      0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG PID1_VERSION=0.1.2.0     0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG LTS_SLUG=lts-14.0        0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  ARG GHC_VERSION=8.6.5        0B
&amp;lt;missing&amp;gt;           5 weeks ago         /bin/sh -c #(nop)  LABEL maintainer=manny@fp…   0B
&amp;lt;missing&amp;gt;           8 weeks ago         /bin/sh -c #(nop)  CMD [&amp;quot;/bin/bash&amp;quot;]            0B
&amp;lt;missing&amp;gt;           8 weeks ago         /bin/sh -c mkdir -p /run/systemd &amp;amp;&amp;amp; echo &amp;#39;do…   7B
&amp;lt;missing&amp;gt;           8 weeks ago         /bin/sh -c set -xe   &amp;amp;&amp;amp; echo &amp;#39;#!/bin/sh&amp;#39; &amp;gt; /…   745B
&amp;lt;missing&amp;gt;           8 weeks ago         /bin/sh -c [ -z &amp;quot;$(apt-get indextargets)&amp;quot; ]     987kB
&amp;lt;missing&amp;gt;           8 weeks ago         /bin/sh -c #(nop) ADD file:3ddd02d976792b6c6…   63.2MB&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上から6番目，&lt;code&gt;--no-trunc&lt;/code&gt; 付けて確認してみたら&lt;a href=&#34;https://github.com/commercialhaskell/stack/blob/b8f8ec203209fccb1a86b9e8705f16125845254b/etc/dockerfiles/stack-build/lts-13.20/Dockerfile#L29-L46&#34;&gt;ココ&lt;/a&gt;だった． そう，犯人は &lt;a href=&#34;https://github.com/commercialhaskell/stackage/blob/f5d1776c9c5d311469f889d251faa97bdd62e625/debian-bootstrap.sh&#34;&gt;&lt;code&gt;debian-bootstrap.sh&lt;/code&gt;&lt;/a&gt; です．&lt;/p&gt;
&lt;p&gt;要するに，Stackage にある全てのパッケージを利用するための全ての &lt;code&gt;apt-get install&lt;/code&gt; やらなんやらをしている． そりゃ重いわけだ．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;CI が爆速になったし，自動で Resolver の追従もしてくれるし，私は満足です． ちょこっとずつ古いプロジェクトの置き換えしている．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://syocy.hatenablog.com/entry/init-ghc-8-8-1</id><title type="text">HaskellやっていくGHC8.8.1令和元年白露の候</title><updated>2019-09-20T21:45:08+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/init-ghc-8-8-1"/><summary type="html">GHC 8.8.1 が出たので雑に環境を整えていきます。 OS: Ubuntu 18.04 LTS on VirtualBox on Windows screenshot GHC, Cabal 最近は ghcup で入れている。 $ ghcup upgrade $ ghcup list --tool all $ ghcup install 8.8 $ ghcup install-cabal latest ~/.ghcup/bin と ~/.cabal/bin にPATHが通っていない場合は通しておく。 stack は手になじまない感じがして最近使っていない。 stack のいいところとしてスク…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/hiw-ghc-future.html</id><title type="text">HIW 2019で発表された、GHC 8.10に導入されるであろう機能</title><updated>2019-09-17T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/hiw-ghc-future.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;&lt;a href=&#34;/posts/2019/hiw-ghc8.8.html&#34;&gt;前回&lt;/a&gt;から引き続き、&lt;a href=&#34;https://icfp19.sigplan.org/home/hiw-2019#About&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Implementors&lt;/span&gt;’ &lt;span class=&#34;ascii&#34;&gt;Workshop 2019&lt;/span&gt;&lt;/a&gt;への参加レポートとして、私の印象に残った発表をいくつか紹介します。&lt;br /&gt;
今回は、「&lt;span class=&#34;ascii&#34;&gt;GHC 8.10&lt;/span&gt;に導入されるであろう機能」です。&lt;br /&gt;
いずれも該当する&lt;span class=&#34;ascii&#34;&gt;Merge Request&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;ブランチにマージ済みなので、おそらく&lt;span class=&#34;ascii&#34;&gt;GHC 8.10&lt;/span&gt;で提供されるでしょう。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#holefitplugins-and-the-future-of-interactive-development-in-ghc&#34; title=&#34;holefitplugins-and-the-future-of-interactive-development-in-ghc&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HoleFitPlugins and the future of interactive development in GHC&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#visible-dependent-quantification&#34; title=&#34;visible-dependent-quantification&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Visible dependent quantification&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;holefitplugins-and-the-future-of-interactive-development-in-ghc&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#holefitplugins-and-the-future-of-interactive-development-in-ghc&#34; title=&#34;holefitplugins-and-the-future-of-interactive-development-in-ghc&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;HoleFitPlugins and the future of interactive development in GHC&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;発表者&lt;span class=&#34;ascii&#34;&gt;: Matthías Páll Gissurarson&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Chalmers University of Technology, Sweden&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;該当の&lt;span class=&#34;ascii&#34;&gt;Merge Request:&lt;/span&gt; &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/merge_requests/153&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;!153&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;該当の&lt;span class=&#34;ascii&#34;&gt;GHC Proposal:&lt;/span&gt; なし&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://icfp18.sigplan.org/details/haskellsymp-2018-papers/10/Suggesting-Valid-Hole-Fits-for-Typed-Holes-Experience-Report-&#34;&gt;昨年の&lt;span class=&#34;ascii&#34;&gt;Haskell Symposium&lt;/span&gt;でも発表&lt;/a&gt;されて&lt;span class=&#34;ascii&#34;&gt;GHC 8.6&lt;/span&gt;で導入された、「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」という機能のさらなる拡張について。&lt;/p&gt;
&lt;p&gt;まず、「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」という機能について軽く紹介します&lt;small&gt;（詳しくは&lt;a href=&#34;https://wataru86.github.io/slides/vhs/&#34;&gt;こちらのスライド&lt;/a&gt;が参考になるかと思います）&lt;/small&gt;。&lt;br /&gt;
「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」はアンダースコア &lt;code&gt;_&lt;/code&gt;で始まる識別子を書いたとき、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が推論した型にマッチする関数をエラーメッセージに付記することで、ユーザーがどんな式を書けばよいか、ヒントを与えてくれるものです。&lt;/p&gt;
&lt;p&gt;例えば、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; _someFunc) [&lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;False&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上記のように、アンダースコア &lt;code&gt;_&lt;/code&gt;で始まる識別子を書いたとき、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;interactive&lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;    &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;      &lt;span class=&#34;dt&#34;&gt;Valid&lt;/span&gt; hole fits include&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        enumFrom ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Enum&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;enumFrom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.Enum&lt;/span&gt;’))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        show ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.Show&lt;/span&gt;’))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-10&#34; title=&#34;10&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        repeat ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-11&#34; title=&#34;11&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-12&#34; title=&#34;12&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.List&lt;/span&gt;’))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        return ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;m ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;) a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-14&#34; title=&#34;14&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;[] &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-15&#34; title=&#34;15&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.Base&lt;/span&gt;’))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-16&#34; title=&#34;16&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        pure ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;) a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-17&#34; title=&#34;17&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;[] &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-18&#34; title=&#34;18&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.Base&lt;/span&gt;’))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-19&#34; title=&#34;19&#34;&gt;&lt;span class=&#34;ot&#34;&gt;        mempty ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-20&#34; title=&#34;20&#34;&gt;          with &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;(&lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [a0])&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-21&#34; title=&#34;21&#34;&gt;          (imported from ‘&lt;span class=&#34;dt&#34;&gt;Prelude&lt;/span&gt;’ (&lt;span class=&#34;fu&#34;&gt;and&lt;/span&gt; originally defined &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; ‘&lt;span class=&#34;dt&#34;&gt;GHC.Base&lt;/span&gt;’))&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;といった具合に、アンダースコアで始まる識別子&lt;code&gt;_someFunc&lt;/code&gt;の型を&lt;code&gt;Bool -&amp;gt; [a0]&lt;/code&gt;と推論した上で&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;、実際にその型に該当する関数を、当該のスコープにおいてアクセスできる関数の中から探して教えてくれる、それが「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」という機能です。&lt;/p&gt;
&lt;p&gt;今回発表された「&lt;span class=&#34;ascii&#34;&gt;HoleFitPlugins&lt;/span&gt;」という機能は、名前のとおりこの「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」に対するプラグイン機構です。&lt;br /&gt;
「&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;」が表示する「型にマッチした関数」を探す処理を、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のコードで書き換えられるようにしてくれます！&lt;/p&gt;
&lt;p&gt;「そこまでする必要あるの？」という気もしてきますが、発表者曰く&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Hoogle&lt;/span&gt;をはじめ、&lt;span class=&#34;ascii&#34;&gt;TensorFlow&lt;/span&gt;など&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の外部にあるものを利用して「型にマッチした関数」を探せるようにするために必要&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;とこの機構を組み合わせることで、もっとインタラクティブな開発を促進したい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という意図があるそうです。&lt;/p&gt;
&lt;p&gt;最新安定版の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;では利用できませんが、&lt;a href=&#34;https://ghc.gitlab.haskell.org/ghc/doc/users_guide/extending_ghc.html#hole-fit-plugins&#34;&gt;ドキュメントがこちら&lt;/a&gt;にあるので、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;HEAD&lt;/span&gt;&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;master&lt;/span&gt;ブランチで開発中のバージョン）&lt;/small&gt;をコンパイルすれば使用できるようです。&lt;/p&gt;
&lt;p&gt;加えて発表では、&lt;code&gt;_&lt;/code&gt;で始まる識別子を書く際の構文を拡張することで、どのように&lt;span class=&#34;ascii&#34;&gt;candidate&lt;/span&gt;を探すか指定できるようにする、なんて機能も紹介されました&lt;small&gt;（ドキュメントを読む限りこの機能はまだ&lt;span class=&#34;ascii&#34;&gt;HEAD&lt;/span&gt;に入ってない？）&lt;/small&gt;。&lt;br /&gt;
例えば、&lt;span class=&#34;ascii&#34;&gt;Hoogle&lt;/span&gt;を使って&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;を探したいとき、次のように書くことで検索対象を&lt;code&gt;Control.Applicative&lt;/code&gt;に限定する、といったことをできるようしてくれます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;g ::&lt;/span&gt; [a] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [[a]]&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; _{hoogleLookup &lt;span class=&#34;st&#34;&gt;&amp;quot;+Control.Applicative&amp;quot;&lt;/span&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Valid Hole Fits&lt;/span&gt;の検索方法をその場で微調整したい、というときに使うものですね。&lt;/p&gt;
&lt;h2 id=&#34;visible-dependent-quantification&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#visible-dependent-quantification&#34; title=&#34;visible-dependent-quantification&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Visible dependent quantification&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;発表者&lt;span class=&#34;ascii&#34;&gt;: Ryan Scott&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Indiana University at Bloomington, USA&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;該当の&lt;span class=&#34;ascii&#34;&gt;Merge Request:&lt;/span&gt; &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/merge_requests/378&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;!378&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;該当の&lt;span class=&#34;ascii&#34;&gt;GHC Proposal:&lt;/span&gt; &lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0081-forall-arrow.rst&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;0081-forall-arrow&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;タイトルのとおり、「&lt;span class=&#34;ascii&#34;&gt;Visible dependent quantification&lt;/span&gt;」という機能の紹介です。&lt;/p&gt;
&lt;p&gt;最近のバージョンの&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;における&lt;code&gt;:kind&lt;/code&gt;コマンドは、次のような、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;がサポートしていない構文の型注釈を出力することがあります。&lt;br /&gt;
例えば&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XKindSignatures&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XPolyKinds&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SomeType&lt;/span&gt; k (&lt;span class=&#34;ot&#34;&gt;a ::&lt;/span&gt; k)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;kind &lt;span class=&#34;dt&#34;&gt;SomeType&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;dt&#34;&gt;SomeType&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; k &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; k &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;における、&lt;code&gt;SomeType :: forall k -&amp;gt; k -&amp;gt; *&lt;/code&gt;の&lt;code&gt;forall k -&amp;gt;&lt;/code&gt;という部分です。&lt;br /&gt;
現在の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;code&gt;forall k&lt;/code&gt;などと書くときは、必ず&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;dt&#34;&gt;SomeType&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; k&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; k &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;といった具合に、ピリオドで区切った構文になります。&lt;br /&gt;
ところが先ほどの&lt;code&gt;:kind&lt;/code&gt;の出力では、&lt;code&gt;forall k -&amp;gt;&lt;/code&gt;とあるとおり、&lt;code&gt;forall k&lt;/code&gt;に&lt;small&gt;（型ではなく、カインドとしての）&lt;/small&gt;関数を表す&lt;code&gt;-&amp;gt;&lt;/code&gt;が使われています。&lt;br /&gt;
「&lt;span class=&#34;ascii&#34;&gt;Visible dependent quantification&lt;/span&gt;」はまさにこれを、&lt;code&gt;:kind&lt;/code&gt;コマンドによって出力される構文だけではなく、ユーザーが直接書ける構文にしよう、というものです。 &lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;に「依存型」という機能を加える「&lt;span class=&#34;ascii&#34;&gt;Dependent Haskell&lt;/span&gt;」にも必要な機能だそうです。&lt;br /&gt;
私自身はこの機能を使う機会がちょっと思い浮かばなかったので省略しますが、より詳しい解説は発表者である&lt;a href=&#34;https://ryanglscott.github.io/2019/03/15/visible-dependent-quantification-in-haskell/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Ryan&lt;/span&gt;自身による記事（英語）&lt;/a&gt;をご覧ください。何が「&lt;span class=&#34;ascii&#34;&gt;Visible&lt;/span&gt;」でどう「&lt;span class=&#34;ascii&#34;&gt;Dependent&lt;/span&gt;」なのかわかるはずです。&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;復習&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt; この、「アンダースコアで始まる識別子&lt;code&gt;_someFunc&lt;/code&gt;の型を&lt;code&gt;Bool -&amp;gt; [a0]&lt;/code&gt;と推論した上で」エラーメッセージにおいて&lt;code&gt;Found hole: _someFunc :: Bool -&amp;gt; [a0]&lt;/code&gt;と教えてくれるのが「&lt;span class=&#34;ascii&#34;&gt;Type Hole&lt;/span&gt;」という機能なのでした。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/hiw-gibbon.html&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、Gibbonコンパイラーについて&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/hiw-ghc8.8.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、GHC 8.8で導入された機能&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/hiw-ghc8.8.html</id><title type="text">HIW 2019で発表された、GHC 8.8で導入された機能</title><updated>2019-09-11T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/hiw-ghc8.8.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;こんにちは。&lt;br /&gt;
今回からいくつか、「&lt;a href=&#34;https://icfp19.sigplan.org/home/hiw-2019#About&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Implementors&lt;/span&gt;’ &lt;span class=&#34;ascii&#34;&gt;Workshop 2019&lt;/span&gt;&lt;/a&gt;」に私が先月参加した際のレポートとして、印象深い発表をテーマごとに分けた短い記事を執筆します。&lt;br /&gt;
最近公開された&lt;a href=&#34;https://www.haskell.org/ghc/download_ghc_8_8_1.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;&lt;/a&gt;の話はもちろん、未来の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;やその他の&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の処理系を知るのによいイベントでしたので、その一部だけでも伝われば幸いです。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#そもそもhaskell-implementors-workshop-hiwとは&#34; title=&#34;そもそもhaskell-implementors-workshop-hiwとは&#34;&gt;そもそも&lt;span class=&#34;ascii&#34;&gt;Haskell Implementors&lt;/span&gt;’ &lt;span class=&#34;ascii&#34;&gt;Workshop (HIW)&lt;/span&gt;とは？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hie-files-in-ghc-8.8&#34; title=&#34;hie-files-in-ghc-8.8&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;HIE files in GHC 8.8&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ghc-status-report&#34; title=&#34;ghc-status-report&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC status report&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#とりあえず今回はここまで&#34; title=&#34;とりあえず今回はここまで&#34;&gt;とりあえず今回はここまで&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;そもそもhaskell-implementors-workshop-hiwとは&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#そもそもhaskell-implementors-workshop-hiwとは&#34; title=&#34;そもそもhaskell-implementors-workshop-hiwとは&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;そもそも&lt;span class=&#34;ascii&#34;&gt;Haskell Implementors&lt;/span&gt;’ &lt;span class=&#34;ascii&#34;&gt;Workshop (HIW)&lt;/span&gt;とは？&lt;/h1&gt;
&lt;p&gt;シリーズ（？）第&lt;span class=&#34;ascii&#34;&gt;1&lt;/span&gt;回目なので、簡単に&lt;span class=&#34;ascii&#34;&gt;HIW&lt;/span&gt;そのものについて紹介しておきましょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;HIW&lt;/span&gt;は、&lt;a href=&#34;https://icfp19.sigplan.org/home&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ICFP (International Conference on Functional Programming)&lt;/span&gt;&lt;/a&gt;という関数型プログラミングについての国際会議に併設された、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の実装者のためのワークショップです。&lt;br /&gt;
名前の通り、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をはじめとする&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の処理系&lt;small&gt;（あるいは、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で実装された言語処理系）&lt;/small&gt;の実装に関する発表だけでなく、かなり緩いテーマの&lt;span class=&#34;ascii&#34;&gt;Lightning Talk&lt;/span&gt;の時間があったり、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の将来の方向性について自由に議論する時間もあったりしました。&lt;/p&gt;
&lt;p&gt;今回はそのうち、掲題のとおり「&lt;span class=&#34;ascii&#34;&gt;HIW 2019&lt;/span&gt;で発表された、&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;で導入された機能」を紹介します。まずは「&lt;span class=&#34;ascii&#34;&gt;HIE files in GHC 8.8&lt;/span&gt;」から。&lt;/p&gt;
&lt;h1 id=&#34;hie-files-in-ghc-8.8&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#hie-files-in-ghc-8.8&#34; title=&#34;hie-files-in-ghc-8.8&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;HIE files in GHC 8.8&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;発表者&lt;span class=&#34;ascii&#34;&gt;: Zubin Duggal, Matthew Pickering&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;University of Bristol&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;で新たに追加された、&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;&lt;small&gt;（「&lt;span class=&#34;ascii&#34;&gt;Haskell Interface Extended&lt;/span&gt;」の略と思われます）&lt;/small&gt;ファイルについての発表です。&lt;br /&gt;
コンパイル時に&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が得たモジュールの情報を、&lt;a href=&#34;https://github.com/haskell/haskell-ide-engine&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell IDE Engine&lt;/span&gt;&lt;/a&gt;などの&lt;span class=&#34;ascii&#34;&gt;IDE&lt;/span&gt;のバックエンドが再利用しやすい形で出力する機能です。&lt;br /&gt;
従来&lt;span class=&#34;ascii&#34;&gt;Haskell IDE Engine&lt;/span&gt;&lt;small&gt;（その裏で使われている&lt;span class=&#34;ascii&#34;&gt;ghc-mod&lt;/span&gt;）&lt;/small&gt;や&lt;a href=&#34;https://github.com/ndmitchell/ghcid&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ghcid&lt;/span&gt;&lt;/a&gt;、&lt;a href=&#34;https://github.com/chrisdone/intero&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;intero&lt;/span&gt;&lt;/a&gt;などの、「&lt;span class=&#34;ascii&#34;&gt;IDE&lt;/span&gt;バックエンド」&lt;small&gt;（エディターが入力の補完や入力したソースコードにおけるエラーを表示する際に通信するソフトウェア）&lt;/small&gt;は、自前で&lt;span class=&#34;ascii&#34;&gt;GHC API&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;GHCi&lt;/span&gt;を呼ぶことで、型チェックしたり定義ジャンプに必要な位置情報を収集したりしていたのですが、そうした情報の収集をすべて&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;自身が&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;ファイルを出力することで賄えるようになる、ということです。&lt;/p&gt;
&lt;p&gt;私は従来開発中、&lt;code&gt;stack test --pedantic --file-watch&lt;/code&gt;などと&lt;span class=&#34;ascii&#34;&gt;Neovim&lt;/span&gt;のターミナル機能で実行して実行ファイルをビルドしつつ、&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;にエラーの表示や入力の補完をさせていたのですが、その際も二重にソースコードが解析されていたんですね！&lt;br /&gt;
私がそのようにわざわざ&lt;code&gt;stack test&lt;/code&gt;と&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;を並行して実行させているのは、&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;がしばしばフリーズしてしまったり&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;Neovim&lt;/span&gt;ごと再起動すれば直ることも多いんですが…😰）&lt;/small&gt;、&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;だけでは実行ファイルの作成やテストの実行ができない、という理由があるためです。&lt;br /&gt;
&lt;code&gt;stack test&lt;/code&gt;だけで&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;ファイルが生成されるようになれば、エラーに関する情報やソースコードの解析結果といった情報が一元化されるので、より安定的に、より少ないリソースで&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;が使えるようになるでしょう。本家&lt;span class=&#34;ascii&#34;&gt;Haskell IDE Engine&lt;/span&gt;がサポートする日が楽しみです。&lt;/p&gt;
&lt;p&gt;この、&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;ファイルを利用するアプリケーションの例も紹介されました。&lt;br /&gt;
&lt;a href=&#34;https://github.com/wz1000/hie-lsp&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;hie-lsp&lt;/span&gt;&lt;/a&gt;という小さな&lt;span class=&#34;ascii&#34;&gt;Language Server Protocol&lt;/span&gt;の実装に加え、&lt;a href=&#34;https://github.com/mpickering/hie-lsif&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;hie-lsif&lt;/span&gt;&lt;/a&gt;という、&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;ファイルから「&lt;a href=&#34;https://github.com/microsoft/language-server-protocol/blob/master/indexFormat/specification.md&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Language Server Index Format (LSIF)&lt;/span&gt;&lt;/a&gt;」形式のファイルを作成するコマンドが印象的でした。&lt;br /&gt;
この&lt;span class=&#34;ascii&#34;&gt;LSIF&lt;/span&gt;というファイルは、例えば&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;のリポジトリ上でブラウザからソースコードを閲覧する際にも、定義ジャンプといった便利な機能を使えるようにするためのものです。リポジトリに置いたソースコードを処理系がどのように解釈したかを保存しておくことで、&lt;span class=&#34;ascii&#34;&gt;Language Server&lt;/span&gt;はじめ処理系を実行することなく利用できるようにするものだそうです。&lt;br /&gt;
現状は仕様策定中なためか、実際に&lt;span class=&#34;ascii&#34;&gt;LSIF&lt;/span&gt;を解釈するアプリケーションは見つかりませんでしたが、今後の活用に期待が高まりますね。&lt;/p&gt;
&lt;p&gt;加えて、&lt;span class=&#34;ascii&#34;&gt;HIE&lt;/span&gt;ファイルが将来的にサポートしたい機能などについても発表されました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型クラスのインスタンスが、具体的にどの型のインスタンスとして解決されたかの出力
&lt;ul&gt;
&lt;li&gt;定義ジャンプしたときに、型クラス自身の宣言ではなく、実装に飛べるようにするため&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;従来&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が分割コンパイルをサポートするために、モジュールの依存情報を出力していた「インターフェースファイル&lt;small&gt;（&lt;code&gt;.hi&lt;/code&gt;という拡張子で出力されているあのファイル）&lt;/small&gt;」との統合&lt;/li&gt;
&lt;li&gt;すべての型推論の結果&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ghc-status-report&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#ghc-status-report&#34; title=&#34;ghc-status-report&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;GHC status report&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;発表者&lt;span class=&#34;ascii&#34;&gt;: Simon Peyton Jones&lt;/span&gt; &lt;em&gt;&lt;span class=&#34;ascii&#34;&gt;Microsoft, UK&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;GitLab&lt;/span&gt;への移行や&lt;span class=&#34;ascii&#34;&gt;Hadrian&lt;/span&gt;と呼ばれる新しいビルドシステムの導入など、インフラ周りでいろいろ変更があったこともあり、遅れてしまいましたが&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;がもうすぐ出るよ、という内容の発表でした&lt;small&gt;（発表当時。もう&lt;a href=&#34;https://www.haskell.org/ghc/blog/20190825-ghc-8.8.1-released.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GHC 8.8&lt;/span&gt;はリリースされています&lt;/a&gt;）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;言及された主な追加機能は以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-TypeApplications&#34;&gt;&lt;code&gt;TypeApplications&lt;/code&gt;&lt;/a&gt;という言語拡張が、型変数だけでなくカインド変数に対しても適用できるようになりました。&lt;br /&gt;
正直に言って、個人的に使いどころがまだまだなさそうな機能ではありますが…。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-ScopedTypeVariables&#34;&gt;&lt;code&gt;ScopedTypeVariables&lt;/code&gt;&lt;/a&gt;という言語拡張を使った場合に、パターンマッチした変数に型注釈を付けることができるようになる、という機能がありまして、これが拡張されました。&lt;br /&gt;
具体的には、従来下記のように書くことで、関数自体の型注釈にある型変数&lt;code&gt;a&lt;/code&gt;と、パターンマッチした変数&lt;code&gt;x&lt;/code&gt;に型注釈した&lt;code&gt;b&lt;/code&gt;が等しくなるように書くことができたのを、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; a&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;f (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; b)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;{- ... -}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに拡張して、関数自体の型注釈にある型変数&lt;strong&gt;ではない&lt;/strong&gt;&lt;code&gt;Int&lt;/code&gt;と、パターンマッチした変数&lt;code&gt;x&lt;/code&gt;に型注釈した&lt;code&gt;b&lt;/code&gt;が等しくなるように書くことができるようにした、という拡張です。&lt;br /&gt;
あたかも型変数でパターンマッチしているかのようですね。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;f (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; b)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;{- ... -}&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一体何の役に立つの？とも思いましたが、&lt;a href=&#34;https://github.com/ghc-proposals/ghc-proposals/blob/master/proposals/0128-scoped-type-variables-types.rst#128motivation&#34;&gt;この修正に向けた提案&lt;/a&gt;曰く、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReallyReallyReallyReallyLongTypeName&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;f (&lt;span class=&#34;ot&#34;&gt;x ::&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; … (&lt;span class=&#34;fu&#34;&gt;read&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; a) …&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;と書くことで、長い型名に対して別名を付けることができるようになる、というメリットがあるそうです。なるほど💡&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;とりあえず今回はここまで&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#とりあえず今回はここまで&#34; title=&#34;とりあえず今回はここまで&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;とりあえず今回はここまで&lt;/h1&gt;
&lt;p&gt;テーマを絞って短い記事にした方が&lt;span class=&#34;ascii&#34;&gt;SEO&lt;/span&gt;的にいいんじゃないかと思いまして、今回は敢えて紹介する発表を絞りました。&lt;br /&gt;
今後は下記のテーマについて紹介する予定です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;HIW 2019&lt;/span&gt;で発表された、これからの&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;に入るであろう機能&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;HIW 2019&lt;/span&gt;で発表された、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;以外の言語処理系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、&lt;span class=&#34;ascii&#34;&gt;HIW&lt;/span&gt;と同じく&lt;span class=&#34;ascii&#34;&gt;ICFP 2019&lt;/span&gt;に併設して開催された、&lt;a href=&#34;https://icfp19.sigplan.org/home/haskellsymp-2019&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell Symposium 2019&lt;/span&gt;&lt;/a&gt;の発表についても別途共有する予定です。&lt;br /&gt;
乞うご期待。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;hask(_ _)eller&lt;/span&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/hiw-ghc-future.html&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、GHC 8.10に導入されるであろう機能&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/fallible.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;fallibleというパッケージをリリースしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/09-09-extensible-ast.html</id><title type="text">AST を拡張しよう</title><updated>2019-09-09T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/09-09-extensible-ast.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;実験的な内容です。(&lt;span class=&#34;citation&#34; data-cites=&#34;fumievalさん&#34;&gt;@fumievalさん&lt;/span&gt;, &lt;span class=&#34;citation&#34; data-cites=&#34;matsubara0507さん&#34;&gt;@matsubara0507さん&lt;/span&gt;、アドバイスありがとうございました)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;モチベーション&#34;&gt;モチベーション&lt;/h2&gt;
&lt;p&gt;まずは、以下のような型 &lt;code&gt;Expr&lt;/code&gt; と関数 &lt;code&gt;pretty&lt;/code&gt; が定義されているとします。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pretty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; i) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; e1 e2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty e1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回、この &lt;code&gt;Expr&lt;/code&gt; をベースとして新しい型 &lt;code&gt;ExprM&lt;/code&gt;, &lt;code&gt;ExprS&lt;/code&gt; をそれぞれ定義したい場合、どのように書けば良いのでしょうか？&lt;/p&gt;
&lt;p&gt;素朴に定義するとなると、以下のようになりそうです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pretty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-8&#34;&gt;&lt;a href=&#34;#cb2-8&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; i) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i&lt;/span&gt;
&lt;span id=&#34;cb2-9&#34;&gt;&lt;a href=&#34;#cb2-9&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; e1 e2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty e1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;
&lt;span id=&#34;cb2-10&#34;&gt;&lt;a href=&#34;#cb2-10&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; e1 e2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty e1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; * &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprS&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pretty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; i) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; i&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; e1 e2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty e1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;pretty (&lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; e1 e2) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty e1 &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; - &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、同じようなコードが含まれていて冗長なので何とかしたいです・・・。&lt;/p&gt;
&lt;h2 id=&#34;方針&#34;&gt;方針&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;各コンストラクタ &lt;code&gt;Constant&lt;/code&gt;, &lt;code&gt;Add&lt;/code&gt; 等を &lt;code&gt;extensible&lt;/code&gt; のフィールドとして定義&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Expr&lt;/code&gt;, &lt;code&gt;ExprS&lt;/code&gt;, &lt;code&gt;ExprM&lt;/code&gt; は、それぞれのフィールドを集めて作った拡張可能和として定義&lt;/li&gt;
&lt;li&gt;スマートコンストラクタは再利用できるようにしたい&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;実装&#34;&gt;実装&lt;/h2&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;コンストラクタの定義&lt;/li&gt;
&lt;li&gt;型の定義&lt;/li&gt;
&lt;li&gt;スマートコンストラクタの定義&lt;/li&gt;
&lt;li&gt;pretty 関数の定義&lt;/li&gt;
&lt;li&gt;新しい型を定義&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;コンストラクタの定義&#34;&gt;コンストラクタの定義&lt;/h3&gt;
&lt;p&gt;まずはそれぞれのフィールドを定義しましょう。それぞれの型は &lt;code&gt;Assoc Symbol Type&lt;/code&gt; のカインドを持ちます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Constant.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;constant&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Add.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;add&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; (expr, expr)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらのフィールドは以下のような型のコンストラクタを1つずつ切り出したような感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;型の定義&#34;&gt;型の定義&lt;/h3&gt;
&lt;p&gt;フィールドの定義は完了したので、次にそれらのフィールドを集めて型にしましょう。&lt;/p&gt;
&lt;p&gt;拡張性を得るために型クラスを定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Expr.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Kind&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;GHC.TypeLits&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; expr &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldList&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; expr ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Assoc&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Symbol&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Type&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  liftExpr ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FieldList&lt;/span&gt; expr) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; expr&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;FieldList expr&lt;/code&gt; によって型に応じてフィールドが変化します。&lt;/p&gt;
&lt;p&gt;実際に &lt;code&gt;Expr&lt;/code&gt; 型を定義してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Expr/Base.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Base&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Add&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Constant&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; unwrapExprB ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprBFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprBFields&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldList&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprBFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;  liftExpr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type ExprBFields&lt;/code&gt; は型に含まれるフィールドを表します。&lt;/li&gt;
&lt;li&gt;再帰的に定義するために &lt;code&gt;newtype ExprB&lt;/code&gt; を宣言しています。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Variant ExprBFields&lt;/code&gt; によって &lt;code&gt;Constant&lt;/code&gt;, &lt;code&gt;Add ExprB&lt;/code&gt; の直和型っぽい感じになります。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;liftExpr&lt;/code&gt; は再利用可能なスマートコンストラクタを作るためにあります。次で説明します。&lt;/p&gt;
&lt;h3 id=&#34;スマートコンストラクタの定義&#34;&gt;スマートコンストラクタの定義&lt;/h3&gt;
&lt;p&gt;ここまでで型の定義は終わりました。次は値を作りましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Add.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Add&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Lens&lt;/span&gt; ((#))&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;add&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; (expr, expr)&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;add e1 e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftExpr (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;add &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; (e1, e2))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;liftExpr&lt;/code&gt; は文脈に応じて適切なタグに変化します。例えば &lt;code&gt;ExprB&lt;/code&gt; 型であれば &lt;code&gt;ExprB&lt;/code&gt; コンストラクタになります。&lt;/p&gt;
&lt;p&gt;同様に &lt;code&gt;Constant&lt;/code&gt; の値を作る関数も定義しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Constant&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Lens&lt;/span&gt; ((#))&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-11&#34;&gt;&lt;a href=&#34;#cb10-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-12&#34;&gt;&lt;a href=&#34;#cb10-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;constant&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-13&#34;&gt;&lt;a href=&#34;#cb10-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-14&#34;&gt;&lt;a href=&#34;#cb10-14&#34;&gt;&lt;/a&gt;c i &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftExpr (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;constant &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; i)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に使ってみるとこんな感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; add (c &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; {unwrapExprB &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EmbedAt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;(mkMembership &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;) (add &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; {unwrapExprB &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EmbedAt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;(mkMembership &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) (constant &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;)},&lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; {unwrapExprB &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EmbedAt&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;(mkMembership &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;) (constant &lt;span class=&#34;op&#34;&gt;@=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)}))}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;extensible の形式で表示されていますが、問題無く値が作れています。型注釈が無い場合はコンパイルエラーになってしまいますが、ここでは気にしないことにします。&lt;/p&gt;
&lt;h3 id=&#34;pretty-関数の定義&#34;&gt;pretty 関数の定義&lt;/h3&gt;
&lt;p&gt;値が作れるようになったら、次は &lt;code&gt;pretty&lt;/code&gt; 関数を作ります。&lt;/p&gt;
&lt;p&gt;ここが一番面白いポイントだと思っているのですが、&lt;code&gt;pretty&lt;/code&gt; のような関数を各フィールドに対して動作する型クラスのメソッドとして定義します。&lt;/p&gt;
&lt;p&gt;まずは、パターンマッチのための補助関数 &lt;code&gt;matchVariant&lt;/code&gt; を定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Expr.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ConstraintKinds     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds           #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE PolyKinds           #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RankNTypes          #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE ScopedTypeVariables #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-7&#34;&gt;&lt;a href=&#34;#cb12-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeApplications    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-8&#34;&gt;&lt;a href=&#34;#cb12-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-9&#34;&gt;&lt;a href=&#34;#cb12-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-10&#34;&gt;&lt;a href=&#34;#cb12-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-11&#34;&gt;&lt;a href=&#34;#cb12-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Functor.Identity&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-12&#34;&gt;&lt;a href=&#34;#cb12-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-13&#34;&gt;&lt;a href=&#34;#cb12-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-14&#34;&gt;&lt;a href=&#34;#cb12-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-15&#34;&gt;&lt;a href=&#34;#cb12-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;matchVariant ::&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; c xs r&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; c xs&lt;/span&gt;
&lt;span id=&#34;cb12-16&#34;&gt;&lt;a href=&#34;#cb12-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; c &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;kw&#34;&gt;forall&lt;/span&gt; x&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; c x &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Membership&lt;/span&gt; xs x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TargetOf&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; r) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; r&lt;/span&gt;
&lt;span id=&#34;cb12-17&#34;&gt;&lt;a href=&#34;#cb12-17&#34;&gt;&lt;/a&gt;matchVariant _ f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; matchField &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; htabulateFor (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;c) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \m &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Match&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; f m &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; runIdentity&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に &lt;code&gt;pretty&lt;/code&gt; 関数を定義するための型クラスを作ります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleContexts #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE PolyKinds        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeApplications #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pretty&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34;&gt;&lt;/a&gt;pretty&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; matchVariant (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt;) prettyField&lt;/span&gt;
&lt;span id=&#34;cb13-12&#34;&gt;&lt;a href=&#34;#cb13-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-13&#34;&gt;&lt;a href=&#34;#cb13-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; expr &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-14&#34;&gt;&lt;a href=&#34;#cb13-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  pretty ::&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-15&#34;&gt;&lt;a href=&#34;#cb13-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-16&#34;&gt;&lt;a href=&#34;#cb13-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt; kv &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-17&#34;&gt;&lt;a href=&#34;#cb13-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  prettyField ::&lt;/span&gt; proxy kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TargetOf&lt;/span&gt; kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際にインスタンスを定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Add.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; expr) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;  prettyField _ (l, r) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty l &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; + &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Constant.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-7&#34;&gt;&lt;a href=&#34;#cb15-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-8&#34;&gt;&lt;a href=&#34;#cb15-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-9&#34;&gt;&lt;a href=&#34;#cb15-9&#34;&gt;&lt;/a&gt;  prettyField _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ExprB&lt;/code&gt; に対する定義はボイラープレートのようなものです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Expr/Base.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34;&gt;&lt;/a&gt;  pretty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; unwrapExprB&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に使ってみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; add (c &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; pretty e1&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;10 + 20&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;期待通り、ちゃんと動いています。&lt;/p&gt;
&lt;h3 id=&#34;新しい型を定義&#34;&gt;新しい型を定義&lt;/h3&gt;
&lt;p&gt;最後に既存の型を拡張して &lt;code&gt;ExprM&lt;/code&gt; を作ります。&lt;/p&gt;
&lt;p&gt;まずは &lt;code&gt;Mul&lt;/code&gt; フィールドの &lt;code&gt;pretty&lt;/code&gt; とコンストラクタの定義を追加しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb18-1&#34;&gt;&lt;a href=&#34;#cb18-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Field/Mul.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-2&#34;&gt;&lt;a href=&#34;#cb18-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds         #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-3&#34;&gt;&lt;a href=&#34;#cb18-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-4&#34;&gt;&lt;a href=&#34;#cb18-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedLabels  #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-5&#34;&gt;&lt;a href=&#34;#cb18-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies      #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-6&#34;&gt;&lt;a href=&#34;#cb18-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-7&#34;&gt;&lt;a href=&#34;#cb18-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Mul&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-8&#34;&gt;&lt;a href=&#34;#cb18-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-9&#34;&gt;&lt;a href=&#34;#cb18-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-10&#34;&gt;&lt;a href=&#34;#cb18-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-11&#34;&gt;&lt;a href=&#34;#cb18-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-12&#34;&gt;&lt;a href=&#34;#cb18-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Lens&lt;/span&gt; ((#))&lt;/span&gt;
&lt;span id=&#34;cb18-13&#34;&gt;&lt;a href=&#34;#cb18-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-14&#34;&gt;&lt;a href=&#34;#cb18-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-15&#34;&gt;&lt;a href=&#34;#cb18-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;mul&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;:&lt;/span&gt; (expr, expr)&lt;/span&gt;
&lt;span id=&#34;cb18-16&#34;&gt;&lt;a href=&#34;#cb18-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-17&#34;&gt;&lt;a href=&#34;#cb18-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PrettyField&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; expr) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-18&#34;&gt;&lt;a href=&#34;#cb18-18&#34;&gt;&lt;/a&gt;  prettyField _ (l, r) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty l &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; * &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; pretty r&lt;/span&gt;
&lt;span id=&#34;cb18-19&#34;&gt;&lt;a href=&#34;#cb18-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-20&#34;&gt;&lt;a href=&#34;#cb18-20&#34;&gt;&lt;/a&gt;mul e1 e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftExpr (&lt;span class=&#34;op&#34;&gt;#&lt;/span&gt;mul &lt;span class=&#34;op&#34;&gt;#&lt;/span&gt; (e1, e2))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に &lt;code&gt;ExprM&lt;/code&gt; 型を定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb19-1&#34;&gt;&lt;a href=&#34;#cb19-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Expr/Mul.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-2&#34;&gt;&lt;a href=&#34;#cb19-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-3&#34;&gt;&lt;a href=&#34;#cb19-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-4&#34;&gt;&lt;a href=&#34;#cb19-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Mul&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-5&#34;&gt;&lt;a href=&#34;#cb19-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-6&#34;&gt;&lt;a href=&#34;#cb19-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-7&#34;&gt;&lt;a href=&#34;#cb19-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Base&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-8&#34;&gt;&lt;a href=&#34;#cb19-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Add&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-9&#34;&gt;&lt;a href=&#34;#cb19-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Mul&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-10&#34;&gt;&lt;a href=&#34;#cb19-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Constant&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-11&#34;&gt;&lt;a href=&#34;#cb19-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-12&#34;&gt;&lt;a href=&#34;#cb19-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-13&#34;&gt;&lt;a href=&#34;#cb19-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-14&#34;&gt;&lt;a href=&#34;#cb19-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-15&#34;&gt;&lt;a href=&#34;#cb19-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-16&#34;&gt;&lt;a href=&#34;#cb19-16&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; unwrapExprM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-17&#34;&gt;&lt;a href=&#34;#cb19-17&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb19-18&#34;&gt;&lt;a href=&#34;#cb19-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-19&#34;&gt;&lt;a href=&#34;#cb19-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb19-20&#34;&gt;&lt;a href=&#34;#cb19-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-21&#34;&gt;&lt;a href=&#34;#cb19-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-22&#34;&gt;&lt;a href=&#34;#cb19-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldList&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-23&#34;&gt;&lt;a href=&#34;#cb19-23&#34;&gt;&lt;/a&gt;  liftExpr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-24&#34;&gt;&lt;a href=&#34;#cb19-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-25&#34;&gt;&lt;a href=&#34;#cb19-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-26&#34;&gt;&lt;a href=&#34;#cb19-26&#34;&gt;&lt;/a&gt;  pretty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; unwrapExprM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ほとんど同じですが、&lt;code&gt;type ExprMFields&lt;/code&gt; の部分で &lt;code&gt;Mul ExprM&lt;/code&gt; を追加しています。(&lt;code&gt;ExprB&lt;/code&gt; のフィールドに単純に追加する方法も一応可能です。)&lt;/p&gt;
&lt;p&gt;実際に使ってみると、ちゃんと異なる型と認識してコンパイルエラーになってくれます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb20&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb20-1&#34;&gt;&lt;a href=&#34;#cb20-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; add (c &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-2&#34;&gt;&lt;a href=&#34;#cb20-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; add (c &lt;span class=&#34;dv&#34;&gt;40&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;50&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-3&#34;&gt;&lt;a href=&#34;#cb20-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-4&#34;&gt;&lt;a href=&#34;#cb20-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; add e1 e2&lt;/span&gt;
&lt;span id=&#34;cb20-5&#34;&gt;&lt;a href=&#34;#cb20-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 型が異なるためコンパイルエラー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-6&#34;&gt;&lt;a href=&#34;#cb20-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-7&#34;&gt;&lt;a href=&#34;#cb20-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; pretty e1&lt;/span&gt;
&lt;span id=&#34;cb20-8&#34;&gt;&lt;a href=&#34;#cb20-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;10 + 20&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-9&#34;&gt;&lt;a href=&#34;#cb20-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; pretty e2&lt;/span&gt;
&lt;span id=&#34;cb20-10&#34;&gt;&lt;a href=&#34;#cb20-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;40 + 50&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-11&#34;&gt;&lt;a href=&#34;#cb20-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-12&#34;&gt;&lt;a href=&#34;#cb20-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e3 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; mul (c &lt;span class=&#34;dv&#34;&gt;60&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;70&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-13&#34;&gt;&lt;a href=&#34;#cb20-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- ExprB 型には Mul フィールドが存在していないため、コンパイルエラー&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-14&#34;&gt;&lt;a href=&#34;#cb20-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-15&#34;&gt;&lt;a href=&#34;#cb20-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e3 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; mul (c &lt;span class=&#34;dv&#34;&gt;60&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;70&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb20-16&#34;&gt;&lt;a href=&#34;#cb20-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; pretty e3&lt;/span&gt;
&lt;span id=&#34;cb20-17&#34;&gt;&lt;a href=&#34;#cb20-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;60 * 70&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;h3 id=&#34;既存のフィールドを拡張する&#34;&gt;既存のフィールドを拡張する&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;UndecidableInstances&lt;/code&gt; 拡張を使っても良ければ、以下のように &lt;code&gt;ExprBFields ++ &#39;[ Mul ExprM ]&lt;/code&gt; と書くこともできます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb21-1&#34;&gt;&lt;a href=&#34;#cb21-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE DataKinds    #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-2&#34;&gt;&lt;a href=&#34;#cb21-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-3&#34;&gt;&lt;a href=&#34;#cb21-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeOperators #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-4&#34;&gt;&lt;a href=&#34;#cb21-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE UndecidableInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-5&#34;&gt;&lt;a href=&#34;#cb21-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Mul&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-6&#34;&gt;&lt;a href=&#34;#cb21-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-7&#34;&gt;&lt;a href=&#34;#cb21-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-8&#34;&gt;&lt;a href=&#34;#cb21-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Base&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-9&#34;&gt;&lt;a href=&#34;#cb21-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Mul&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-10&#34;&gt;&lt;a href=&#34;#cb21-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Pretty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-11&#34;&gt;&lt;a href=&#34;#cb21-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-12&#34;&gt;&lt;a href=&#34;#cb21-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-13&#34;&gt;&lt;a href=&#34;#cb21-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-14&#34;&gt;&lt;a href=&#34;#cb21-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-15&#34;&gt;&lt;a href=&#34;#cb21-15&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; unwrapExprM ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-16&#34;&gt;&lt;a href=&#34;#cb21-16&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb21-17&#34;&gt;&lt;a href=&#34;#cb21-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-18&#34;&gt;&lt;a href=&#34;#cb21-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprBFields&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &amp;#39;[ &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb21-19&#34;&gt;&lt;a href=&#34;#cb21-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- type ExprMFields = &amp;#39;[ Constant, Add ExprM, Mul ExprM ]&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-20&#34;&gt;&lt;a href=&#34;#cb21-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-21&#34;&gt;&lt;a href=&#34;#cb21-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-22&#34;&gt;&lt;a href=&#34;#cb21-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FieldList&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprMFields&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-23&#34;&gt;&lt;a href=&#34;#cb21-23&#34;&gt;&lt;/a&gt;  liftExpr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-24&#34;&gt;&lt;a href=&#34;#cb21-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-25&#34;&gt;&lt;a href=&#34;#cb21-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pretty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-26&#34;&gt;&lt;a href=&#34;#cb21-26&#34;&gt;&lt;/a&gt;  pretty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pretty&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; unwrapExprM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;操作を追加しよう&#34;&gt;操作を追加しよう&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;eval&lt;/code&gt; を追加してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb22-1&#34;&gt;&lt;a href=&#34;#cb22-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Operation/Eval.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-2&#34;&gt;&lt;a href=&#34;#cb22-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleContexts #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-3&#34;&gt;&lt;a href=&#34;#cb22-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE PolyKinds        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-4&#34;&gt;&lt;a href=&#34;#cb22-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeApplications #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-5&#34;&gt;&lt;a href=&#34;#cb22-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operation.Eval&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-6&#34;&gt;&lt;a href=&#34;#cb22-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-7&#34;&gt;&lt;a href=&#34;#cb22-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-8&#34;&gt;&lt;a href=&#34;#cb22-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-9&#34;&gt;&lt;a href=&#34;#cb22-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-10&#34;&gt;&lt;a href=&#34;#cb22-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-11&#34;&gt;&lt;a href=&#34;#cb22-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;eval&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Forall&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Variant&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-12&#34;&gt;&lt;a href=&#34;#cb22-12&#34;&gt;&lt;/a&gt;eval&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; matchVariant (&lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt;) evalField&lt;/span&gt;
&lt;span id=&#34;cb22-13&#34;&gt;&lt;a href=&#34;#cb22-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-14&#34;&gt;&lt;a href=&#34;#cb22-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eval&lt;/span&gt; expr &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-15&#34;&gt;&lt;a href=&#34;#cb22-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  eval ::&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-16&#34;&gt;&lt;a href=&#34;#cb22-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-17&#34;&gt;&lt;a href=&#34;#cb22-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt; kv &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-18&#34;&gt;&lt;a href=&#34;#cb22-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  evalField ::&lt;/span&gt; proxy kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TargetOf&lt;/span&gt; kv &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに、インスタンス定義もこのファイルに定義します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb23-1&#34;&gt;&lt;a href=&#34;#cb23-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Operation/Eval.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-2&#34;&gt;&lt;a href=&#34;#cb23-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-3&#34;&gt;&lt;a href=&#34;#cb23-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE FlexibleInstances #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-4&#34;&gt;&lt;a href=&#34;#cb23-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-5&#34;&gt;&lt;a href=&#34;#cb23-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-6&#34;&gt;&lt;a href=&#34;#cb23-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Base&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-7&#34;&gt;&lt;a href=&#34;#cb23-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr.Mul&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-8&#34;&gt;&lt;a href=&#34;#cb23-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Add&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-9&#34;&gt;&lt;a href=&#34;#cb23-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Constant&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-10&#34;&gt;&lt;a href=&#34;#cb23-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Field.Mul&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-11&#34;&gt;&lt;a href=&#34;#cb23-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-12&#34;&gt;&lt;a href=&#34;#cb23-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-13&#34;&gt;&lt;a href=&#34;#cb23-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-14&#34;&gt;&lt;a href=&#34;#cb23-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eval&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-15&#34;&gt;&lt;a href=&#34;#cb23-15&#34;&gt;&lt;/a&gt;  eval &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; eval&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; unwrapExprB&lt;/span&gt;
&lt;span id=&#34;cb23-16&#34;&gt;&lt;a href=&#34;#cb23-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-17&#34;&gt;&lt;a href=&#34;#cb23-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eval&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-18&#34;&gt;&lt;a href=&#34;#cb23-18&#34;&gt;&lt;/a&gt;  eval &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; eval&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; unwrapExprM&lt;/span&gt;
&lt;span id=&#34;cb23-19&#34;&gt;&lt;a href=&#34;#cb23-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-20&#34;&gt;&lt;a href=&#34;#cb23-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-21&#34;&gt;&lt;a href=&#34;#cb23-21&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-22&#34;&gt;&lt;a href=&#34;#cb23-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Constant&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-23&#34;&gt;&lt;a href=&#34;#cb23-23&#34;&gt;&lt;/a&gt;  evalField _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-24&#34;&gt;&lt;a href=&#34;#cb23-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-25&#34;&gt;&lt;a href=&#34;#cb23-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eval&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Add&lt;/span&gt; expr) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-26&#34;&gt;&lt;a href=&#34;#cb23-26&#34;&gt;&lt;/a&gt;  evalField _ (l, r) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; eval l &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; eval r&lt;/span&gt;
&lt;span id=&#34;cb23-27&#34;&gt;&lt;a href=&#34;#cb23-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-28&#34;&gt;&lt;a href=&#34;#cb23-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Eval&lt;/span&gt; expr &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EvalField&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt; expr) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-29&#34;&gt;&lt;a href=&#34;#cb23-29&#34;&gt;&lt;/a&gt;  evalField _ (l, r) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; eval l &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt; eval r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで使えるようになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb24-1&#34;&gt;&lt;a href=&#34;#cb24-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; add (c &lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;20&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprB&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-2&#34;&gt;&lt;a href=&#34;#cb24-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; e2 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; mul (c &lt;span class=&#34;dv&#34;&gt;40&lt;/span&gt;) (c &lt;span class=&#34;dv&#34;&gt;50&lt;/span&gt;)&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ExprM&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-3&#34;&gt;&lt;a href=&#34;#cb24-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-4&#34;&gt;&lt;a href=&#34;#cb24-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; eval e1&lt;/span&gt;
&lt;span id=&#34;cb24-5&#34;&gt;&lt;a href=&#34;#cb24-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;30&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-6&#34;&gt;&lt;a href=&#34;#cb24-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; eval e2&lt;/span&gt;
&lt;span id=&#34;cb24-7&#34;&gt;&lt;a href=&#34;#cb24-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;2000&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;何かに使えないかなー。&lt;/p&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/09/07/115437</id><title type="text">単純で頑強なメッセージングシステム、franz</title><updated>2019-09-08T21:41:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/09/07/115437"/><summary type="html">Haskell製の新しいメッセージングシステムfranz(フランツ)の紹介。 github.com 背景 取引所にあるマシンで取引プログラムを実行するのが我々の仕事だが、朝8時に起動したらあとは昼寝したり酒を飲んだりというわけにはいかない。モニタリングしたり、分析のためにデータを残しておく必要がある。そのため、プログラムによって解析しやすい形でログを出力する。 今までは複数の種類のレコードをシリアライズし、一つのファイルに連結させる独自のフォーマットを10年近く使っていたが、書いていて恥ずかしくなるような多数の問題を抱えていた。 柔軟性が乏しい: 32bit整数や文字列などの単純な値しか格納で…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-08-26-qr-code-reader-with-elm.html</id><title type="text">Elm で QR コードリーダー</title><updated>2019-08-26T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-08-26-qr-code-reader-with-elm.html"/><summary type="html">&lt;div class=&#34;post-content&#34; itemprop=&#34;articleBody&#34;&gt;
    &lt;p&gt;タイトル通りです． ただし，jsQR とポートを使ってるだけです． Elm 側で QR コードのデコードをするわけじゃないので，そういうのを期待した人はすいません．&lt;/p&gt;
&lt;p&gt;今回の実装は下記のリポジトリにあります:&lt;/p&gt;
&lt;h4 id=&#34;section&#34;&gt;&lt;iframe width=&#34;320&#34; height=&#34;215&#34; scrolling=&#34;no&#34; frameborder=&#34;0&#34; src=&#34;https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/anaqram-web-samples&#34;&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;リポジトリの詳細のとこを読むとわかるんですけど，実はこの話は書典7のネタの一部を抜粋したものです(典の方はもっと丁寧に書いてます)．&lt;/p&gt;
&lt;h2 id=&#34;elm-からカメラを使う&#34;&gt;Elm からカメラを使う&lt;/h2&gt;
&lt;p&gt;ブラウザからカメラを使うには JavaScript の &lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/API/MediaDevices/getUserMedia&#34;&gt;&lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt;&lt;/a&gt; を使う． このメソッドを使うには &lt;a href=&#34;https://webrtc.github.io/samples/src/content/getusermedia/gum&#34;&gt;WebRTC のサンプルコード&lt;/a&gt;を参考に次のように書く:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; constraints &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;audio&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;initCamera&lt;/span&gt;(videoId) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; stream &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;navigator&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;mediaDevices&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getUserMedia&lt;/span&gt;(constraints)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(videoId).&lt;span class=&#34;at&#34;&gt;srcObject&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; stream&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;catch&lt;/span&gt; (e) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;at&#34;&gt;handleError&lt;/span&gt;(e)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;// ここの実装は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-9&#34;&gt;&lt;a href=&#34;#cb1-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-10&#34;&gt;&lt;a href=&#34;#cb1-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTML 側は &lt;code&gt;id=videoId&lt;/code&gt; を設定した &lt;code&gt;video&lt;/code&gt; タグを用意するだけで良い． &lt;code&gt;initCamera&lt;/code&gt; メソッドを Elm から使うにはポート機能を使って呼び出す:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- QRCode.elm&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;startCamera&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;純粋関数型プログラミング言語である Elm にとって JavaScript のコードを直接呼び出すことは非純粋な行為(&lt;code&gt;Cmd a&lt;/code&gt; 型は非純粋な型)であり，&lt;code&gt;port&lt;/code&gt; プレフィックスを使って普通の関数とは全く別に管理される(&lt;code&gt;port&lt;/code&gt; が付くモジュール・関数はパッケージに含めることができない)． より詳しいポート機能については &lt;a href=&#34;https://guide.elm-lang.jp/interop/ports.html&#34;&gt;guide.elm-lang.jp のポートのページ&lt;/a&gt;を読むと良いだろう．&lt;/p&gt;
&lt;p&gt;さて，&lt;code&gt;startCamera&lt;/code&gt; 関数の実装は JavaScript 側で次のように行った:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// flags は Elm コードの JavaScript 側から与える初期値&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; flags &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;video_area&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;300&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// true だけではなくカメラのサイズとリアカメラ優先フラグ(facingMode)を与える&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-8&#34;&gt;&lt;a href=&#34;#cb3-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; constraints &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-9&#34;&gt;&lt;a href=&#34;#cb3-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;audio&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-10&#34;&gt;&lt;a href=&#34;#cb3-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;...&lt;span class=&#34;va&#34;&gt;flags&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;facingMode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;environment&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-11&#34;&gt;&lt;a href=&#34;#cb3-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-12&#34;&gt;&lt;a href=&#34;#cb3-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-13&#34;&gt;&lt;a href=&#34;#cb3-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; app &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;Elm&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;Main&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;init&lt;/span&gt;(&lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-14&#34;&gt;&lt;a href=&#34;#cb3-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-15&#34;&gt;&lt;a href=&#34;#cb3-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;flags&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; flags&lt;/span&gt;
&lt;span id=&#34;cb3-16&#34;&gt;&lt;a href=&#34;#cb3-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-17&#34;&gt;&lt;a href=&#34;#cb3-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;startCamera&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;initCamera&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;flags&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ids&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;video&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはこんな感じに Elm 側で呼び出す:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Attributes&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Events&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-10&#34;&gt;&lt;a href=&#34;#cb4-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-11&#34;&gt;&lt;a href=&#34;#cb4-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;element&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-12&#34;&gt;&lt;a href=&#34;#cb4-12&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-13&#34;&gt;&lt;a href=&#34;#cb4-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-14&#34;&gt;&lt;a href=&#34;#cb4-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-15&#34;&gt;&lt;a href=&#34;#cb4-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-16&#34;&gt;&lt;a href=&#34;#cb4-16&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb4-17&#34;&gt;&lt;a href=&#34;#cb4-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-18&#34;&gt;&lt;a href=&#34;#cb4-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-19&#34;&gt;&lt;a href=&#34;#cb4-19&#34;&gt;&lt;/a&gt;  { &lt;span class=&#34;fu&#34;&gt;ids&lt;/span&gt; : { &lt;span class=&#34;fu&#34;&gt;video&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;size&lt;/span&gt; : { &lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; } }&lt;/span&gt;
&lt;span id=&#34;cb4-20&#34;&gt;&lt;a href=&#34;#cb4-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-21&#34;&gt;&lt;a href=&#34;#cb4-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb4-22&#34;&gt;&lt;a href=&#34;#cb4-22&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-23&#34;&gt;&lt;a href=&#34;#cb4-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-24&#34;&gt;&lt;a href=&#34;#cb4-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-25&#34;&gt;&lt;a href=&#34;#cb4-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-26&#34;&gt;&lt;a href=&#34;#cb4-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EnableCamera&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-27&#34;&gt;&lt;a href=&#34;#cb4-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-28&#34;&gt;&lt;a href=&#34;#cb4-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-29&#34;&gt;&lt;a href=&#34;#cb4-29&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-30&#34;&gt;&lt;a href=&#34;#cb4-30&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-31&#34;&gt;&lt;a href=&#34;#cb4-31&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;EnableCamera&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;startCamera&lt;/span&gt; ())&lt;/span&gt;
&lt;span id=&#34;cb4-32&#34;&gt;&lt;a href=&#34;#cb4-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-33&#34;&gt;&lt;a href=&#34;#cb4-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-34&#34;&gt;&lt;a href=&#34;#cb4-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-35&#34;&gt;&lt;a href=&#34;#cb4-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb4-36&#34;&gt;&lt;a href=&#34;#cb4-36&#34;&gt;&lt;/a&gt;    [ &lt;span class=&#34;fu&#34;&gt;video&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-37&#34;&gt;&lt;a href=&#34;#cb4-37&#34;&gt;&lt;/a&gt;        [ &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;style&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;background-color&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;#000&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;autoplay&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-38&#34;&gt;&lt;a href=&#34;#cb4-38&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-39&#34;&gt;&lt;a href=&#34;#cb4-39&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;co&#34;&gt;-- iOS のために必要&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-40&#34;&gt;&lt;a href=&#34;#cb4-40&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;attribute&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;playsinline&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-41&#34;&gt;&lt;a href=&#34;#cb4-41&#34;&gt;&lt;/a&gt;        ] []&lt;/span&gt;
&lt;span id=&#34;cb4-42&#34;&gt;&lt;a href=&#34;#cb4-42&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EnableCamera&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Enable Camera&amp;quot;&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id=&#34;cb4-43&#34;&gt;&lt;a href=&#34;#cb4-43&#34;&gt;&lt;/a&gt;    ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ボタンの &lt;code&gt;onClick&lt;/code&gt; でイベントハンドラを受け取り，&lt;code&gt;startCamera&lt;/code&gt; ポート関数を呼び出しているだけ． また，&lt;code&gt;Flags&lt;/code&gt; 機能を使って &lt;code&gt;video&lt;/code&gt; タグに必要な id を JavaScript 側と共有している． &lt;a href=&#34;https://matsubara0507.github.io/anaqram-web-samples/step1/&#34;&gt;ここ&lt;/a&gt;で実際にビルド結果を触れる．&lt;/p&gt;
&lt;h2 id=&#34;qr-コードを読み取る&#34;&gt;QR コードを読み取る&lt;/h2&gt;
&lt;p&gt;Elm からカメラを起動できたので，次に QR コードを読み取る． 冒頭で述べた通り，QR コードのでコードには &lt;a href=&#34;https://github.com/cozmo/jsQR&#34;&gt;jsQR&lt;/a&gt; という JavaScript のライブラリを利用する． jsQR の使い方は簡単で，&lt;code&gt;jsQR&lt;/code&gt; というメソッドに &lt;code&gt;ImageData&lt;/code&gt; オブジェクト(とサイズ)を渡してあげるだけ:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// jsQR の README に載っているサンプルコード&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; code &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;jsQR&lt;/span&gt;(imageData&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; width&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; height)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// QR コードがなければ null になるようです&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; (code) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;console&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;quot;Found QR code&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; code)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ImageData&lt;/code&gt; オブジェクトはカメラ画像をいったん Canvas に退避させることで取得できる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;captureImage&lt;/span&gt;(videoId&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; captureId) &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; canvas &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(captureId)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;var&lt;/span&gt; video &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;document&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getElementById&lt;/span&gt;(videoId)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;width&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;video&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;videoWidth&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;video&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;videoHeight&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; ctx &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;canvas&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getContext&lt;/span&gt;(&lt;span class=&#34;st&#34;&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;drawImage&lt;/span&gt;(video&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;ctx&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;getImageData&lt;/span&gt;(&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;video&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;videoWidth&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;video&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;videoHeight&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さて，後はこれを Elm で呼び出す． ただし，カメラを起動する &lt;code&gt;startCamera&lt;/code&gt; 関数の時と違い，ボタンを押したらQRコードのデコード結果の文字列を取得したい． なので JavaScript 側から実行されることを想定した「内向き」のポート関数も定義する:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- QRCode.elm&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Decode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Encode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; { &lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Decoder&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;field&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-11&#34;&gt;&lt;a href=&#34;#cb7-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-12&#34;&gt;&lt;a href=&#34;#cb7-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;startCamera&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-13&#34;&gt;&lt;a href=&#34;#cb7-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-14&#34;&gt;&lt;a href=&#34;#cb7-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;captureImage&lt;/span&gt; : () &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-15&#34;&gt;&lt;a href=&#34;#cb7-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-16&#34;&gt;&lt;a href=&#34;#cb7-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- JS とは JSON データでやり取りするのが良いらしい&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-17&#34;&gt;&lt;a href=&#34;#cb7-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;updateQRCode&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Value&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-18&#34;&gt;&lt;a href=&#34;#cb7-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-19&#34;&gt;&lt;a href=&#34;#cb7-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;updateQRCodeWithDecode&lt;/span&gt; : (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-20&#34;&gt;&lt;a href=&#34;#cb7-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;updateQRCodeWithDecode&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-21&#34;&gt;&lt;a href=&#34;#cb7-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;updateQRCode&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;decodeValue&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;nullable&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;decoder&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;updateQRCode&lt;/code&gt; 関数が内向きのポート関数だ． &lt;code&gt;Sub a&lt;/code&gt; 型はタイマーやマウスの動作など外部から非同期に送られてくるメッセージを取得するための型だ． 次のように，JS 側で実装する &lt;code&gt;captureImage&lt;/code&gt; 関数の最後で &lt;code&gt;updateQRCode&lt;/code&gt; 関数が呼ばれ &lt;code&gt;QRCode&lt;/code&gt; 型を表す JS オブジェクトが送られてくる:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode javascript&#34;&gt;&lt;code class=&#34;sourceCode javascript&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;// canvas の id を追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; flags &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;video_area&amp;#39;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;capture&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;capture_image&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;300&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;captureImage&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;subscribe&lt;/span&gt;(&lt;span class=&#34;kw&#34;&gt;function&lt;/span&gt;() &lt;span class=&#34;op&#34;&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; imageData &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;captureImage&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;flags&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ids&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;video&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;flags&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ids&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;capture&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;const&lt;/span&gt; qrcode &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;at&#34;&gt;jsQR&lt;/span&gt;(&lt;span class=&#34;va&#34;&gt;imageData&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;imageData&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;va&#34;&gt;imageData&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;height&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;va&#34;&gt;app&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;ports&lt;/span&gt;.&lt;span class=&#34;va&#34;&gt;updateQRCode&lt;/span&gt;.&lt;span class=&#34;at&#34;&gt;send&lt;/span&gt;(qrcode)&lt;span class=&#34;op&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;// ココ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;op&#34;&gt;}&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 側は次のように書き換える:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode elm&#34;&gt;&lt;code class=&#34;sourceCode elm&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;AnaQRam&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Json&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Decode&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;exposing&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;errorToString&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Program&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;element&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;    { &lt;span class=&#34;op&#34;&gt;..&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- capture を追加&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;  { &lt;span class=&#34;fu&#34;&gt;ids&lt;/span&gt; : { &lt;span class=&#34;fu&#34;&gt;video&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;capture&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;size&lt;/span&gt; : { &lt;span class=&#34;fu&#34;&gt;width&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;height&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; }&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;alias&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;  { &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;qrcode&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- QRコードのデコード結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;        &lt;span class=&#34;co&#34;&gt;-- JSONのデコード失敗結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-25&#34;&gt;&lt;a href=&#34;#cb9-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-26&#34;&gt;&lt;a href=&#34;#cb9-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-27&#34;&gt;&lt;a href=&#34;#cb9-27&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-28&#34;&gt;&lt;a href=&#34;#cb9-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-29&#34;&gt;&lt;a href=&#34;#cb9-29&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EnableCamera&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-30&#34;&gt;&lt;a href=&#34;#cb9-30&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaptureImage&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-31&#34;&gt;&lt;a href=&#34;#cb9-31&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UpdateQRCode&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Error&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-32&#34;&gt;&lt;a href=&#34;#cb9-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-33&#34;&gt;&lt;a href=&#34;#cb9-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-34&#34;&gt;&lt;a href=&#34;#cb9-34&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-35&#34;&gt;&lt;a href=&#34;#cb9-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-36&#34;&gt;&lt;a href=&#34;#cb9-36&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-37&#34;&gt;&lt;a href=&#34;#cb9-37&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-38&#34;&gt;&lt;a href=&#34;#cb9-38&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;CaptureImage&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;captureImage&lt;/span&gt; ())&lt;/span&gt;
&lt;span id=&#34;cb9-39&#34;&gt;&lt;a href=&#34;#cb9-39&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-40&#34;&gt;&lt;a href=&#34;#cb9-40&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- QRコードがなかった場合(null が返ってくるので)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-41&#34;&gt;&lt;a href=&#34;#cb9-41&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;UpdateQRCode&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ({ &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;QR code is not found&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-42&#34;&gt;&lt;a href=&#34;#cb9-42&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-43&#34;&gt;&lt;a href=&#34;#cb9-43&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- QRコードのデコード成功&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-44&#34;&gt;&lt;a href=&#34;#cb9-44&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;UpdateQRCode&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Ok&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;qrcode&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ({ &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;qrcode&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;qrcode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-45&#34;&gt;&lt;a href=&#34;#cb9-45&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-46&#34;&gt;&lt;a href=&#34;#cb9-46&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- JSONのデコード失敗&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-47&#34;&gt;&lt;a href=&#34;#cb9-47&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;UpdateQRCode&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Err&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;message&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; ({ &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;errorToString&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;message&lt;/span&gt; }&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-48&#34;&gt;&lt;a href=&#34;#cb9-48&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-49&#34;&gt;&lt;a href=&#34;#cb9-49&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-50&#34;&gt;&lt;a href=&#34;#cb9-50&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-51&#34;&gt;&lt;a href=&#34;#cb9-51&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb9-52&#34;&gt;&lt;a href=&#34;#cb9-52&#34;&gt;&lt;/a&gt;    [ &lt;span class=&#34;fu&#34;&gt;video&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-53&#34;&gt;&lt;a href=&#34;#cb9-53&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EnableCamera&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Enable Camera&amp;quot;&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id=&#34;cb9-54&#34;&gt;&lt;a href=&#34;#cb9-54&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;button&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;onClick&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CaptureImage&lt;/span&gt; ] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;Decode QR&amp;quot;&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id=&#34;cb9-55&#34;&gt;&lt;a href=&#34;#cb9-55&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;canvas&lt;/span&gt; [ &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;ids&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;capture&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;hidden&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; ] [] &lt;span class=&#34;co&#34;&gt;-- カメラ画像退避用&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-56&#34;&gt;&lt;a href=&#34;#cb9-56&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;viewResult&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-57&#34;&gt;&lt;a href=&#34;#cb9-57&#34;&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id=&#34;cb9-58&#34;&gt;&lt;a href=&#34;#cb9-58&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-59&#34;&gt;&lt;a href=&#34;#cb9-59&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewResult&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Html&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-60&#34;&gt;&lt;a href=&#34;#cb9-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;viewResult&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-61&#34;&gt;&lt;a href=&#34;#cb9-61&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;isEmpty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;cf&#34;&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-62&#34;&gt;&lt;a href=&#34;#cb9-62&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;QR code: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;withDefault&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;qrcode&lt;/span&gt;)) ]&lt;/span&gt;
&lt;span id=&#34;cb9-63&#34;&gt;&lt;a href=&#34;#cb9-63&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;cf&#34;&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-64&#34;&gt;&lt;a href=&#34;#cb9-64&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;p&lt;/span&gt; [] [ &lt;span class=&#34;fu&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;error&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb9-65&#34;&gt;&lt;a href=&#34;#cb9-65&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-66&#34;&gt;&lt;a href=&#34;#cb9-66&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; : &lt;span class=&#34;dt&#34;&gt;Model&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sub&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-67&#34;&gt;&lt;a href=&#34;#cb9-67&#34;&gt;&lt;/a&gt;&lt;span class=&#34;fu&#34;&gt;subscriptions&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;QRCode&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fu&#34;&gt;updateQRCodeWithDecode&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;UpdateQRCode&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出来上がったのが&lt;a href=&#34;https://matsubara0507.github.io/anaqram-web-samples/step2&#34;&gt;こんな感じ&lt;/a&gt;． ほんとはここがゴールじゃないんだが結果的に QR コードリーダーができた．&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Elm 側でデコードする話は気が向いたらそのうち頑張るかもしれない(画像データをポートでやりとりするのは，あまり効率的ではないと思うけど)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/08-24-let-where-letin.html</id><title type="text">let, where, let...in の使い分け</title><updated>2019-08-24T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/08-24-let-where-letin.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;アルバイトの学生に良く質問される内容の1つに「&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;where&lt;/code&gt;, &lt;code&gt;let...in&lt;/code&gt; はどういう風に使い分ければ良いですか？」というものがあります。ちょっと前に &lt;strong&gt;twitter&lt;/strong&gt; でも同じような話題を見かけたので、少しまとめてみました。&lt;/p&gt;
&lt;p&gt;また、様々な Haskell 書籍で同様の内容について触れられていますが、明確な指針は無く個人の好みという感じがします。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;let-を使うタイミング-do-の中&#34;&gt;let を使うタイミング (do の中)&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- let version&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;      z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (y&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;z)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;上記のコードのように &lt;code&gt;do&lt;/code&gt; の中で束縛された変数 &lt;code&gt;x&lt;/code&gt; を使って新しい変数 &lt;code&gt;y&lt;/code&gt; を宣言する時に良く使います&lt;/li&gt;
&lt;li&gt;他の変数に依存していない &lt;code&gt;z&lt;/code&gt; はどの書き方でも書けますが、通常は &lt;code&gt;let&lt;/code&gt; で続けて書くことが多いと思います&lt;/li&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; は &lt;code&gt;do&lt;/code&gt; (またはリスト内包表記) 以外では使えません&lt;/li&gt;
&lt;li&gt;内部的には &lt;code&gt;do { let decls; stmts } = let decls in do { stmts }&lt;/code&gt; という変換が行われます。(リスト内包表記は &lt;code&gt;[ e | let decls, Q ] = let decls in [ e | Q ]&lt;/code&gt; という変換です。)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;where-で書いた場合&#34;&gt;where で書いた場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- where version&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ((x&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;z)&lt;/span&gt;
&lt;span id=&#34;cb2-6&#34;&gt;&lt;a href=&#34;#cb2-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-7&#34;&gt;&lt;a href=&#34;#cb2-7&#34;&gt;&lt;/a&gt;    z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;where&lt;/code&gt; を使って &lt;code&gt;x&lt;/code&gt; を宣言することはできません。(&lt;code&gt;do&lt;/code&gt; を脱糖した形を見ると、できない感じが伝わりやすいかもしれません)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- do を使わない形&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; (\x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; ((x&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;z))&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;    z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;何百行も続く巨大な &lt;code&gt;do&lt;/code&gt; だと &lt;code&gt;where&lt;/code&gt; で宣言されている変数までの距離が遠いため、可読性が落ちます。&lt;code&gt;z&lt;/code&gt; を &lt;code&gt;where&lt;/code&gt; で書くか &lt;code&gt;let&lt;/code&gt; で書くかはケースバイケースかもしれません&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;letin-で書いた場合&#34;&gt;let…in で書いた場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- let...in version&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;      z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (y&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;z)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let...in&lt;/code&gt; を使うとインデントに気配りする必要があるので面倒です
&lt;ul&gt;
&lt;li&gt;例えば &lt;code&gt;let&lt;/code&gt; と &lt;code&gt;in&lt;/code&gt; の先頭を合わせるとコンパイルエラーになります&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- let...in version (compile error)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;      z &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-7&#34;&gt;&lt;a href=&#34;#cb5-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (y&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;z)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;where-を使うタイミング-ガード&#34;&gt;where を使うタイミング (ガード)&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;calcBmi ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;calcBmi cm kg&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;18.5&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;痩せてるね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;25.0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;普通だね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;30.0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ぽっちゃりだね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-6&#34;&gt;&lt;a href=&#34;#cb6-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;太っているね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-7&#34;&gt;&lt;a href=&#34;#cb6-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-8&#34;&gt;&lt;a href=&#34;#cb6-8&#34;&gt;&lt;/a&gt;    bmi &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; kg &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; (m&lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb6-9&#34;&gt;&lt;a href=&#34;#cb6-9&#34;&gt;&lt;/a&gt;    m &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; cm &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-10&#34;&gt;&lt;a href=&#34;#cb6-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-11&#34;&gt;&lt;a href=&#34;#cb6-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- *Main&amp;gt; putStrLn $ calcBmi 170 60&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-12&#34;&gt;&lt;a href=&#34;#cb6-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 普通だね&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;このように、ガードで共通する変数を宣言する場合に &lt;code&gt;where&lt;/code&gt; を使うと見通しが良くなります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt; の中ではないため、当然 &lt;code&gt;let&lt;/code&gt; は使えません&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;letin-で書いた場合-1&#34;&gt;let…in で書いた場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE MultiWayIf #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;calcBmi ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;calcBmi cm kg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; m   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; cm &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;100&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-6&#34;&gt;&lt;a href=&#34;#cb7-6&#34;&gt;&lt;/a&gt;      bmi &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; kg &lt;span class=&#34;op&#34;&gt;/&lt;/span&gt; (m&lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-7&#34;&gt;&lt;a href=&#34;#cb7-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;18.5&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;痩せてるね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-8&#34;&gt;&lt;a href=&#34;#cb7-8&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;25.0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;普通だね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-9&#34;&gt;&lt;a href=&#34;#cb7-9&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bmi &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;fl&#34;&gt;30.0&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;ぽっちゃりだね&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-10&#34;&gt;&lt;a href=&#34;#cb7-10&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt;   &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;太っているね&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;もし &lt;code&gt;let...in&lt;/code&gt; を使って同じように書く場合は、上記のように &lt;code&gt;MultiWayIf&lt;/code&gt; を使うことになるでしょう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;letin-を使うタイミング&#34;&gt;let…in を使うタイミング&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Programming in Haskell 2nd Edition より引用&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a, &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a, &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;app (&lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; st) x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; st x&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- fmap :: (a -&amp;gt; b) -&amp;gt; ST a -&amp;gt; ST b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; g st &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; (\s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (x,s&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; app st s &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; (g x, s&amp;#39;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;こんな感じの関数を書くときにはとても便利です&lt;/li&gt;
&lt;li&gt;ただ、このようなケースというのはあまり遭遇しないので、個人的には使わないようにしています。無くてもほぼ困らないです
&lt;ul&gt;
&lt;li&gt;理由1: レイアウトルールを気にしなければならない点がとても面倒なので&lt;/li&gt;
&lt;li&gt;理由2: ポイントフリースタイルで書くのが好きなので&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;where-で書いた場合-1&#34;&gt;where で書いた場合&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- Programming in Haskell 2nd Edition より引用&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a, &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;app ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (a, &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;app (&lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; st) x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; st x&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-8&#34;&gt;&lt;a href=&#34;#cb9-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-9&#34;&gt;&lt;a href=&#34;#cb9-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- fmap :: (a -&amp;gt; b) -&amp;gt; ST a -&amp;gt; ST b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-10&#34;&gt;&lt;a href=&#34;#cb9-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; f g&lt;/span&gt;
&lt;span id=&#34;cb9-11&#34;&gt;&lt;a href=&#34;#cb9-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-12&#34;&gt;&lt;a href=&#34;#cb9-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;f ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (b, &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb9-13&#34;&gt;&lt;a href=&#34;#cb9-13&#34;&gt;&lt;/a&gt;f g st s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (g x, s&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb9-14&#34;&gt;&lt;a href=&#34;#cb9-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-15&#34;&gt;&lt;a href=&#34;#cb9-15&#34;&gt;&lt;/a&gt;    (x,s&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; app st s&lt;/span&gt;
&lt;span id=&#34;cb9-16&#34;&gt;&lt;a href=&#34;#cb9-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-17&#34;&gt;&lt;a href=&#34;#cb9-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- もしくは&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-18&#34;&gt;&lt;a href=&#34;#cb9-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ST&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-19&#34;&gt;&lt;a href=&#34;#cb9-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- fmap :: (a -&amp;gt; b) -&amp;gt; ST a -&amp;gt; ST b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-20&#34;&gt;&lt;a href=&#34;#cb9-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; g st &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;S&lt;/span&gt; f&lt;/span&gt;
&lt;span id=&#34;cb9-21&#34;&gt;&lt;a href=&#34;#cb9-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-22&#34;&gt;&lt;a href=&#34;#cb9-22&#34;&gt;&lt;/a&gt;      f s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (g x, s&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb9-23&#34;&gt;&lt;a href=&#34;#cb9-23&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-24&#34;&gt;&lt;a href=&#34;#cb9-24&#34;&gt;&lt;/a&gt;          (x,s&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; app st s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let...in&lt;/code&gt; で書いたときよりも可読性が落ちてしまったように思います&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;where-と-letin-の違い&#34;&gt;where と let…in の違い&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;let...in&lt;/code&gt; と &lt;code&gt;where&lt;/code&gt; の明確な違いは &lt;code&gt;let...in&lt;/code&gt; が式なのに対して &lt;code&gt;where&lt;/code&gt; が節だという点です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- OK&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- NG&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;g &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; (x &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;True&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;構文上のどこに式が出現できるかという規則については &lt;code&gt;Language Report&lt;/code&gt; に詳しく記載されています。&lt;/p&gt;
&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;
&lt;p&gt;このように、&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;where&lt;/code&gt;, &lt;code&gt;let...in&lt;/code&gt; はどちらでも書けることが多いので、適材適所で自分の感性を信じて使いこなすと良いのではないかと思います。&lt;/p&gt;
&lt;p&gt;そういえばラムダノートさんから&lt;a href=&#34;https://www.lambdanote.com/collections/haskell&#34;&gt;プログラミングHaskellの第2版&lt;/a&gt;が発売されましたね。書籍の内容が個人的にとても好きなので、弊社のアルバイトの人には推薦図書として英語版を読んでもらっていました。&lt;/p&gt;
&lt;p&gt;これからは日本語で読めるようになったので、これを機に Haskell に入門してみるのも良いかもしれません。&lt;/p&gt;
&lt;h2 id=&#34;参考リソース&#34;&gt;参考リソース&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.haskell.org/onlinereport/haskell2010/&#34;&gt;Haskell 2010 Language Report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;すごいHaskellたのしく学ぼう！&lt;/li&gt;
&lt;li&gt;Programming in Haskell 2nd Edition&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;宣伝&#34;&gt;宣伝&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf07&#34;&gt;技術書典7&lt;/a&gt;に初参加します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/2019/08-19/circle.png&#34; alt =&#34;サークルカット&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;
&lt;p&gt;進捗・詳細については &lt;a href=&#34;/ad/techbookfest7.html&#34;&gt;技術書典7特設ページ&lt;/a&gt; をご確認ください。&lt;/p&gt;</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2019-08-22T13:32:52.909+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/08-19-extensible-migration.html</id><title type="text">extensible-0.6.1 マイグレーションガイド</title><updated>2019-08-19T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/08-19-extensible-migration.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible&#34;&gt;extensible&lt;/a&gt; のバージョンを最新の &lt;strong&gt;0.6.1&lt;/strong&gt; に更新した際にいくつかコードの修正が必要になったので、メモ程度に残しておきます。&lt;/p&gt;
&lt;p&gt;今回の記事では一部の変更点にしか触れないため、完全な変更点については &lt;a href=&#34;https://github.com/fumieval/extensible/blob/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt; を参照してください。&lt;/p&gt;
&lt;!--more--&gt;
&lt;h3 id=&#34;section&#34;&gt;0.5&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.4.10.1/docs/Data-Extensible-Wrapper.html#t:Const-39-&#34;&gt;Const’&lt;/a&gt; が削除されました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後は &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Applicative.html#t:Const&#34;&gt;Control.Applicative.Const&lt;/a&gt; を利用しましょう。&lt;/p&gt;
&lt;h3 id=&#34;section-1&#34;&gt;0.5.1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/membership&#34;&gt;membership&lt;/a&gt; パッケージが依存関係に追加されました。(&lt;code&gt;Data.Extensible.HList&lt;/code&gt; と &lt;code&gt;Data.Extensible.Internal&lt;/code&gt; が membership パッケージに移動した形です)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AssocKey&lt;/code&gt;, &lt;code&gt;AssocValue&lt;/code&gt;, &lt;code&gt;ValueIs&lt;/code&gt;, &lt;code&gt;KeyValue&lt;/code&gt; が廃止予定になりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後はそれぞれ以下の型を利用しましょう。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;0.5.1 より前&lt;/th&gt;
&lt;th&gt;0.5.1 以降&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:AssocKey&#34;&gt;AssocKey&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:KeyOf&#34;&gt;KeyOf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:AssocValue&#34;&gt;AssocValue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:TargetOf&#34;&gt;TargetOf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:ValueIs&#34;&gt;ValueIs&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:TargetIs&#34;&gt;TargetIs&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:KeyValue&#34;&gt;KeyValue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#t:KeyTargetAre&#34;&gt;KeyTargetAre&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;proxyAssocKey&lt;/code&gt;, &lt;code&gt;stringAssocKey&lt;/code&gt;, &lt;code&gt;proxyAssocValue&lt;/code&gt; も同様に廃止予定になりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後はそれぞれ以下の関数を利用しましょう。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;0.5.1 より前&lt;/th&gt;
&lt;th&gt;0.5.1 以降&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:proxyAssocKey&#34;&gt;proxyAssocKey&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:proxyKeyOf&#34;&gt;proxyKeyOf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:stringAssocKey&#34;&gt;stringAssocKey&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:stringKeyOf&#34;&gt;stringKeyOf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:proxyAssocValue&#34;&gt;proxyAssocValue&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Field.html#v:proxyTargetOf&#34;&gt;proxyTargetOf&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Class.html#t:Associate&#34;&gt;Associate&lt;/a&gt; が廃止予定になりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後は &lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.5.1/docs/Data-Extensible-Class.html#t:Lookup&#34;&gt;Lookup&lt;/a&gt; を利用しましょう。&lt;/p&gt;
&lt;p&gt;引数の順番が変わる点に注意してください。そのままではコンパイルエラーになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Associate&lt;/span&gt; k v xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Lookup&lt;/span&gt; xs k v&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;section-2&#34;&gt;0.6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(:*)&lt;/code&gt; と &lt;code&gt;(:|)&lt;/code&gt; がそれぞれ廃止予定になりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後はそれぞれ以下の関数を利用しましょう。その際、引数の順番が逆になっているので注意してください。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;0.6 より前&lt;/th&gt;
&lt;th&gt;0.6 以降&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.6/docs/Data-Extensible-Struct.html#t::-42-&#34;&gt;(:*)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.6/docs/Data-Extensible-Struct.html#t::-38-&#34;&gt;(:&amp;amp;)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.6/docs/Data-Extensible-Sum.html#t::-124-&#34;&gt;(:|)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.6/docs/Data-Extensible-Sum.html#t::-47-&#34;&gt;(:/)&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;:*&lt;/span&gt;) h xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; xs &lt;span class=&#34;op&#34;&gt;:&amp;amp;&lt;/span&gt; h&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;:|&lt;/span&gt;) h xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; xs &lt;span class=&#34;op&#34;&gt;:/&lt;/span&gt; h&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/extensible-0.6/docs/Data-Extensible-Tangle.html#t:TangleT&#34;&gt;TangleT&lt;/a&gt; の引数の順番が入れ替わりました。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.6 より前の定義&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TangleT&lt;/span&gt; h xs m a&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.6 以降の定義&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TangleT&lt;/span&gt; xs h m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;section-3&#34;&gt;0.6.1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0.5.1&lt;/code&gt; で廃止予定となっていた &lt;code&gt;deriveIsRecord&lt;/code&gt; が削除されました。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今後は &lt;code&gt;Generics&lt;/code&gt; のインスタンスであれば導出可能です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.6.1 より前&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;deriveIsRecord &amp;#39;&lt;span class=&#34;dt&#34;&gt;&amp;#39;Foo&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 0.6.1 以降の定義 (Foo が Generics のインスタンスであればOK)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IsRecord&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Foo&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;extensible-0.6.1&lt;/code&gt; に一気に更新しましたが、特にハマることも無くスムーズに更新が完了しました。&lt;/p&gt;
&lt;p&gt;いくつか新しい関数などが追加されているので、その辺りも要チェックですね。&lt;/p&gt;
&lt;h2 id=&#34;宣伝&#34;&gt;宣伝&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://techbookfest.org/event/tbf07&#34;&gt;技術書典7&lt;/a&gt;に初参加します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/images/2019/08-19/circle.png&#34; alt =&#34;サークルカット&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;
&lt;p&gt;サークルカットは&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%AB%E3%83%95%E3%82%A9%E3%83%B3%E3%82%B9%E3%83%BB%E3%83%9F%E3%83%A5%E3%82%B7%E3%83%A3&#34;&gt;アルフォンス・ミュシャ&lt;/a&gt;っぽい感じを意識しています。ミュシャ風のポスターは至る所で目にしますが、ミュシャの最高傑作は「スラヴ叙事詩」なので興味のある人は是非調べてみてください。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;現時点で Haskell 本を「2冊」販売予定です。(値段や配布数については未定です)&lt;/p&gt;
&lt;h3 id=&#34;すごいhaskell自分で作ろう-write-your-haskell-for-great-good&#34;&gt;(1) すごいHaskell自分で作ろう！ Write Your Haskell for Great Good!&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/images/2019/08-19/main.jpg&#34; alt =&#34;表紙&#34; width=&#34;400px&#34;&gt;&lt;/p&gt;
&lt;p&gt;【著者】 &lt;span class=&#34;citation&#34; data-cites=&#34;gotoki_no_joe&#34;&gt;@gotoki_no_joe&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【概要】 Haskell でプログラミングするのは楽しい。ところで「Haskell&lt;em&gt;を&lt;/em&gt;プログラミングする」のも楽しいのでは？じゃあやってみよう。というわけで、Haskell からヒラヒラを全て削り落して削りすぎたような関数型言語を作ります。&lt;/p&gt;
&lt;p&gt;構文を設計し、意味を定義し、それらに従ってインタプリタを &lt;strong&gt;Haskell&lt;/strong&gt; と &lt;strong&gt;TypeScript&lt;/strong&gt; で実装します。&lt;/p&gt;
&lt;p&gt;Haskell といいつつ普通でわかりやすい&lt;strong&gt;正格評価な処理系&lt;/strong&gt;から始めて、その後で&lt;strong&gt;遅延評価をする処理系&lt;/strong&gt;に取り組みます。必要になった部分だけを計算する遅延評価の仕組みが、組み込み演算やパターンマッチと協調する様子を自作して理解します。&lt;/p&gt;
&lt;p&gt;おまけに TypeScript によるパーサコンビネータの作り方が付いています。&lt;/p&gt;
&lt;p&gt;ごめんなさい！Haskell らしさの重要な柱である型システムについて執筆が間に合いませんでした。インデント構文、JavaScript を出力するコンパイラとともに、後編での執筆を予定しています。&lt;/p&gt;
&lt;p&gt;【目次 (仮)】&lt;/p&gt;
&lt;p&gt;クリックすると &lt;code&gt;pdf&lt;/code&gt; が開きます。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;/images/2019/08-19/toc1.pdf&#34;&gt; &lt;img src=&#34;/images/2019/08-19/toc1.png&#34; alt =&#34;目次1&#34; width=&#34;400px&#34;&gt; &lt;/a&gt; &lt;a href=&#34;/images/2019/08-19/toc2.pdf&#34;&gt; &lt;img src=&#34;/images/2019/08-19/toc2.png&#34; alt =&#34;目次2&#34; width=&#34;400px&#34;&gt; &lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;ghc-api-入門-仮&#34;&gt;(2) GHC API 入門 (仮)&lt;/h3&gt;
&lt;p&gt;【著者】 &lt;span class=&#34;citation&#34; data-cites=&#34;waddlaw&#34;&gt;@waddlaw&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【概要】 GHC API を使って具体的に動く何かを作る予定ですが、全然筆が進んでいないので内容未定・・・。(上記の書籍と比べると宣伝できるものが何も・・・)&lt;/p&gt;
&lt;p&gt;頑張ります！&lt;/p&gt;
&lt;h3 id=&#34;おすすめポイント&#34;&gt;おすすめポイント&lt;/h3&gt;
&lt;p&gt;Haskell の処理系を作ってみたいなーって思っている人は「すごいHaskell自分で作ろう！ Write Your Haskell for Great Good!」がおすすめです！！！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypeScript&lt;/code&gt; と &lt;code&gt;Haskell&lt;/code&gt; という異なるパラダイムの言語による実装が一冊に収まっているので、とてもお得ですね。&lt;/p&gt;
&lt;p&gt;応援よろしくお願いします〜。&lt;/p&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/08/15/195448</id><title type="text">Minecraft 1.14サーバーを運用してみた</title><updated>2019-08-15T19:54:48+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/08/15/195448"/><summary type="html">Minecraft 1.14 &#34;Village and Pillage&#34;は、サブタイトルの通り村人と略奪者をテーマにしたアップデートだ。 主な楽しみ方 村人の取引システムが一新され、以前よりもバリエーションに富み、かつリーズナブルな取引ができるようになった。余ったアイテムを換金したり、有益なアイテムを入手できるようになるだろう。 ランタン、焚火などの新たな光源や、壁や階段の変種、さらには鐘なども追加され、建築の楽しみも大きく増した。だが、良いことばかりではない――新たなイリジャー(邪悪な村人)、ピリジャーが出現するようになったのだ。条件を満たすと発生する襲撃から村を守る死闘、そして安全な拠点づ…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96</id><title type="text">関数のメモ化</title><updated>2019-07-30T13:06:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96"/><summary type="html">ブログに書いてみるとよく分からなくなってきました 🙃 Haskell-jp で回答をもらいました。 @lotz84_ さんの記事や GHC のプロファイルに出てくる CAF がよく分かってなかったのをまとめる。 qiita.com fact のメモ化 lotz さんの記事の階乗 fact 関数を題材にする。 fact :: Int -&gt; Integer fact 0 = 1 fact n = fromIntegral n * fact (n-1) lotz さんの記事よれば、次の実装だとメモ化されるとのこと。 -- | 関数をメモ化する関数 memoize :: (Int -&gt; a) -&gt; I…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/30/112634</id><title type="text">CloudNative Days Tokyo 2019 登壇こぼれ話 #CNDT2019</title><updated>2019-07-30T11:26:34+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/30/112634"/><summary type="html">先日行われた CloudNative Days Tokyo 2019 で、Kubernetes のスケジューリングについて発表してきました。公募 CFP 枠です。 今回の発表は、実は技術的に目新しい内容をほとんど含んでいません。各トピックは今までいくつかの勉強会で LT として発表しているものがほとんどです。 ただし、普段の発表では時間が短いこともあって断片的になりがちだった内容を 40 分の枠で再構成し、スケジューリングについて初めて聞く人にとっても入り口のギャップを少なく、できるだけ学習曲線がなだらかになるようにすることを念頭に置いてプレゼンを組み立てました。 当日の Twitter でも…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/fallible.html</id><title type="text">fallibleというパッケージをリリースしました</title><updated>2019-07-18T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/fallible.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;タイトルの通り、&lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;というパッケージを紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/matsubara0507/fallible&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;matsubara0507/fallible: interface for fallible data type like Maybe and Either. - GitHub&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに、&lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Slack&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/2019/fallible/slack.jpg&#34; style=&#34;width: 100%;&#34;&gt;&lt;/p&gt;
&lt;p&gt;と質問したところ、該当するようなパッケージは無さそうだったので作ったという経緯があります。 その際に助言をくれた &lt;a href=&#34;https://github.com/fumieval&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;fumieval&lt;/span&gt;&lt;/a&gt;氏のコードをほとんど引用した形になったので、&lt;span class=&#34;ascii&#34;&gt;Haskell-jp Blog&lt;/span&gt;に紹介記事を載せることにしました&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;僕は普段、自分のブログに自作したパッケージを書いています&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#fallibleパッケージ&#34; title=&#34;fallibleパッケージ&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;パッケージ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#やってること&#34; title=&#34;やってること&#34;&gt;やってること&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#基本演算子&#34; title=&#34;基本演算子&#34;&gt;基本演算子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#サンプルコード&#34; title=&#34;サンプルコード&#34;&gt;サンプルコード&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#使い方&#34; title=&#34;使い方&#34;&gt;使い方&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おしまい&#34; title=&#34;おしまい&#34;&gt;おしまい&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;fallibleパッケージ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#fallibleパッケージ&#34; title=&#34;fallibleパッケージ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;パッケージ&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;でアプリケーションを記述してると次のようなコードを書くことがありますよね？&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;run targetName token verbose &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;  users &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getUsers token&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; users &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logDebug&amp;#39; err&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; us &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;      &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; userId &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; L.find isTarget us &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logDebug&amp;#39; emsg&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;        &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; tid &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;          channels &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getChannels token&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-13&#34; title=&#34;13&#34;&gt;          &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; channels &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-14&#34; title=&#34;14&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; logDebug&amp;#39; err&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-15&#34; title=&#34;15&#34;&gt;            &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; chs &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-16&#34; title=&#34;16&#34;&gt;              &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; chs&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;elem&lt;/span&gt; tid &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; channelMembers) chs&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-17&#34; title=&#34;17&#34;&gt;              &lt;span class=&#34;fu&#34;&gt;mapM_&lt;/span&gt; (logDebug&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; channelName) chs&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-18&#34; title=&#34;18&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-19&#34; title=&#34;19&#34;&gt;    logDebug&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; logDebug verbose&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-20&#34; title=&#34;20&#34;&gt;    emsg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;user not found: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; targetName&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-21&#34; title=&#34;21&#34;&gt;    isTarget user &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; userName user &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; targetName&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-22&#34; title=&#34;22&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-23&#34; title=&#34;23&#34;&gt;&lt;span class=&#34;ot&#34;&gt;logDebug ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-24&#34; title=&#34;24&#34;&gt;logDebug verbose msg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; verbose &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; msg &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; ()&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;のようなチャットツールをイメージしてください。 該当の名前&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;targetName&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を持つユーザーを与えると、そのユーザーが参加しているチャンネルの一覧を表示するというような振る舞いです。 こう段々になってしまうのは気持ち悪いですよね。 &lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;の目的はこの段々を次のように平坦にすることです&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;where&lt;/code&gt; などは割愛&lt;span class=&#34;ascii&#34;&gt;):&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Fallible&lt;/span&gt; (evalContT, exit, lift, (!?=), (???))&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;run ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-4&#34; title=&#34;4&#34;&gt;run targetName token verbose &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; evalContT &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-5&#34; title=&#34;5&#34;&gt;  users    &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift (getUsers token) &lt;span class=&#34;op&#34;&gt;!?=&lt;/span&gt; exit &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; logDebug&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-6&#34; title=&#34;6&#34;&gt;  targetId &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; userId &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; L.find isTarget users &lt;span class=&#34;op&#34;&gt;???&lt;/span&gt; exit (logDebug&amp;#39; emsg)&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-7&#34; title=&#34;7&#34;&gt;  channels &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lift (getChannels token) &lt;span class=&#34;op&#34;&gt;!?=&lt;/span&gt; exit &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; logDebug&amp;#39;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-8&#34; title=&#34;8&#34;&gt;  lift &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mapM_&lt;/span&gt; (logDebug&amp;#39; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; channelName) &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb2-9&#34; title=&#34;9&#34;&gt;    &lt;span class=&#34;fu&#34;&gt;filter&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;elem&lt;/span&gt; targetId &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; channelMembers) channels&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;やってること&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#やってること&#34; title=&#34;やってること&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;やってること&lt;/h3&gt;
&lt;p&gt;というか、もともとのアイデアは下記のブログです&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://haskell.e-bigmoon.com/posts/2018/06-26-cont-param.html&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ContT&lt;/span&gt; を使ってコードを綺麗にしよう！ &lt;span class=&#34;ascii&#34;&gt;- BIGMOON Haskeller&lt;/span&gt;’&lt;span class=&#34;ascii&#34;&gt;s BLOG&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これを一般化&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;Maybe a&lt;/code&gt; 固有ではなく &lt;code&gt;Either e a&lt;/code&gt; でも使う&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;できないかなぁというのがもともとの発想です。&lt;/p&gt;
&lt;h3 id=&#34;基本演算子&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#基本演算子&#34; title=&#34;基本演算子&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;基本演算子&lt;/h3&gt;
&lt;p&gt;次の&lt;span class=&#34;ascii&#34;&gt;4&lt;/span&gt;つの演算子を利用します&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(!?=) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; e a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(!??) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(??=) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; e a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb3-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(???) ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし、内部実装的には &lt;code&gt;Maybe a&lt;/code&gt; や &lt;code&gt;Either e a&lt;/code&gt; は &lt;code&gt;Fallible&lt;/code&gt; 型クラスで一般化されています&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fallible&lt;/span&gt; f &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-2&#34; title=&#34;2&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Failure&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; f ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;ot&#34;&gt;  tryFallible ::&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Failure&lt;/span&gt; f) a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-4&#34; title=&#34;4&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-5&#34; title=&#34;5&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fallible&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-6&#34; title=&#34;6&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Failure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ()&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-7&#34; title=&#34;7&#34;&gt;  tryFallible &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; ()) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-8&#34; title=&#34;8&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Fallible&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; e) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-10&#34; title=&#34;10&#34;&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Failure&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; e) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; e&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-11&#34; title=&#34;11&#34;&gt;  tryFallible &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-12&#34; title=&#34;12&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-13&#34; title=&#34;13&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(!?=) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Fallible&lt;/span&gt; t) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m (t a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Failure&lt;/span&gt; t &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb4-14&#34; title=&#34;14&#34;&gt;&lt;span class=&#34;ot&#34;&gt;(???) ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Applicative&lt;/span&gt; f, &lt;span class=&#34;dt&#34;&gt;Fallible&lt;/span&gt; t) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; t a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらを継続モナドと組み合わせることで&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;と失敗系モナド&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;Maybe a&lt;/code&gt; や &lt;code&gt;Either e a&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;を、モナドトランスフォーマーなしに&lt;span class=&#34;ascii&#34;&gt;Do&lt;/span&gt;記法で書くことができます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-1&#34; title=&#34;1&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 継続モナドに関する関数&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-2&#34; title=&#34;2&#34;&gt;&lt;span class=&#34;ot&#34;&gt;evalConstT ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; r m r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m r&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-3&#34; title=&#34;3&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-4&#34; title=&#34;4&#34;&gt;&lt;span class=&#34;ot&#34;&gt;exit ::&lt;/span&gt; m r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; r m a&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb5-5&#34; title=&#34;5&#34;&gt;exit &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ContT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;const&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;サンプルコード&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#サンプルコード&#34; title=&#34;サンプルコード&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;サンプルコード&lt;/h2&gt;
&lt;p&gt;疑似的な&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;で良いなら&lt;a href=&#34;https://github.com/matsubara0507/fallible/tree/master/example&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;fallible&lt;/span&gt;リポジトリの&lt;span class=&#34;ascii&#34;&gt;example&lt;/span&gt;ディレクトリ&lt;/a&gt;にあります&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;上述の例はそれです&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;実際の利用例であれば、最近自作した&lt;a href=&#34;https://github.com/matsubara0507/mixlogue&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;matsubara0507/mixlogue&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;アプリケーションで多用しています&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;a href=&#34;https://github.com/matsubara0507/mixlogue/blob/8afd16ab4048ff62976b8e38347078fdaa7417dd/src/Mixlogue/Cmd.hs#L81-L93&#34;&gt;ココ&lt;/a&gt;とか&lt;a href=&#34;https://github.com/matsubara0507/mixlogue/blob/8afd16ab4048ff62976b8e38347078fdaa7417dd/src/Mixlogue/Message.hs#L15-L25&#34;&gt;ココ&lt;/a&gt;とか&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;。 ちなみに、&lt;span class=&#34;ascii&#34;&gt;mixlogue&lt;/span&gt;は特定の&lt;span class=&#34;ascii&#34;&gt;Slack&lt;/span&gt;の分報チャンネル&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;&lt;code&gt;times_hoge&lt;/code&gt;&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;の発言を収集するというだけのツールです。&lt;/p&gt;
&lt;h2 id=&#34;使い方&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#使い方&#34; title=&#34;使い方&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;使い方&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;README&lt;/span&gt;を参照してください。&lt;/p&gt;
&lt;p&gt;現状&lt;span class=&#34;ascii&#34;&gt;Hackage&lt;/span&gt;にはあげてないので、&lt;span class=&#34;ascii&#34;&gt;stack&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Cabal&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;リポジトリから参照する方法を利用してください。&lt;/p&gt;
&lt;h2 id=&#34;おしまい&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おしまい&#34; title=&#34;おしまい&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;おしまい&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;fumieval&lt;/span&gt;氏のコードをほとんど引用するだけになったので自分でリリースするか迷ったんですけど、リリースしてくれというのも丸投げがひどいので自分でリリースしました。 まぁこういう結果が生まれるのも&lt;span class=&#34;ascii&#34;&gt;OSS&lt;/span&gt;コミュニティの醍醐味ということで。 &lt;span class=&#34;ascii&#34;&gt;fumieval&lt;/span&gt;氏、いつもアドバイスをくれてありがとう！&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;(&lt;/span&gt;もちろん他の&lt;span class=&#34;ascii&#34;&gt;Haskell-jp&lt;/span&gt;の皆さんも！&lt;span class=&#34;ascii&#34;&gt;)&lt;/span&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/hiw-ghc8.8.html&#34; lang=&#34;ja&#34;&gt;HIW 2019で発表された、GHC 8.8で導入された機能&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/strip-ansi-escape.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;strip-ansi-escapeというパッケージをリリースしました&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/07-14-megaparsec-tutorial.html</id><title type="text">Megaparsec tutorial from IH book</title><updated>2019-07-14T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/07-14-megaparsec-tutorial.html"/><summary type="html">&lt;p&gt;Great original post: &lt;a href=&#34;https://markkarpov.com/megaparsec/megaparsec.html&#34;&gt;Megaparsec tutorial from IH book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;この Megaparsec のチュートリアルは、元々は &lt;a href=&#34;https://intermediatehaskell.com/&#34;&gt;Intermediate Haskell&lt;/a&gt; という本の１つの章のために書かれました。 ここ一年で本が進展していないため、 他の著者は私がスタンドアロンのチュートリアルとしてテキストを公表し、 人々が少なくとも私たちの仕事のこの部分から恩恵を受けることができるようにする ことに同意しました。&lt;/p&gt;
&lt;!--more--&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ParsecT&#34;&gt;&lt;code&gt;ParsecT&lt;/code&gt; と &lt;code&gt;Parsec&lt;/code&gt; モナド&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Character&#34;&gt;文字 とバイナリストリーム&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MonaAp&#34;&gt;モナディック構文とアプリカティブ構文&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Eof&#34;&gt;&lt;code&gt;Eof&lt;/code&gt; による入力の強制消費&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Alt&#34;&gt;選択肢を使った動作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Try&#34;&gt;&lt;code&gt;try&lt;/code&gt; によるバックトラックの制御&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Debug&#34;&gt;パーサのデバッグ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Label&#34;&gt;ラベル付けと隠蔽&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Run&#34;&gt;パーサの実行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#MonadParsec&#34;&gt;&lt;code&gt;MonadParsec&lt;/code&gt; 型クラス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Lexing&#34;&gt;字句解析&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#White&#34;&gt;空白&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Char&#34;&gt;文字と文字列リテラル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Numbers&#34;&gt;数字&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#lookAhead&#34;&gt;&lt;code&gt;notFollowedBy&lt;/code&gt; と &lt;code&gt;lookAhead&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Expr&#34;&gt;式のパース&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Indentation&#34;&gt;Indentation-sensitiveなパース&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#nonIndented&#34;&gt;&lt;code&gt;nonIndented&lt;/code&gt; と &lt;code&gt;indentBlock&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#SimpleIndented&#34;&gt;単純なインデントされたリスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#NestedIndented&#34;&gt;ネストされたインデントのあるリスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#LineFolds&#34;&gt;折り返しの追加&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Efficient&#34;&gt;効率のよいパーサを書く&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Error&#34;&gt;パースエラー&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#ErrDef&#34;&gt;パースエラーの定義&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#SigErr&#34;&gt;パースエラーを通知する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#DispErr&#34;&gt;パースエラーの表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#CatchErr&#34;&gt;パーサ実行時にパースエラーをキャッチする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Control&#34;&gt;パースエラー位置のコントロール&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Multi&#34;&gt;複数のパースエラーを報告する&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Testing&#34;&gt;Megaparsecパーサのテスト&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#CustomInput&#34;&gt;カスタム入力ストリームの操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;「例：あなた自身のパーサコンビネータを書く」の章で開発されたトイパーサコンビネータは、実際の使用には適していないので、 同じ問題を解決するHaskellエコシステムのライブラリを見ていきましょう。 そして、それらがなすさまざまなトレードオフに注意してください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/parsec&#34;&gt;parsec&lt;/a&gt; は長い間 Haskellの「デフォルト」のパーサライブラリでした。このライブラリは、エラーメッセージの品質に焦点を当てていると言われています。ただし、テストカバレッジは良くなく、現在メンテナンスモードになっています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/attoparsec&#34;&gt;attoparsec&lt;/a&gt; は、パフォーマンスを重視した堅牢で高速なパーサライブラリです。このリストの中で、インクリメンタルパージングを完全にサポートしているのはこれだけです。欠点はエラーメッセージの質が悪いこと、モナド変換子として使用できないこと、および入力ストリームとして使用できる型の組み合わせが限られていることです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/trifecta&#34;&gt;trifecta&lt;/a&gt; は優れたエラーメッセージを特徴としていますが、あまり文書化されておらず、理解するのが難しいです。 &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;ByteString&lt;/code&gt; はそのままではパースできますが、&lt;code&gt;Text&lt;/code&gt; はパースできません。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/megaparsec&#34;&gt;megaparsec&lt;/a&gt; は、ここ数年で積極的に開発されてきた &lt;code&gt;parsec&lt;/code&gt; のフォークです。現在のバージョンは、速度、柔軟性、パースエラーの品質の間で素晴らしいバランスを取ろうとしました。 &lt;code&gt;parsec&lt;/code&gt; の非公式の後継者として、&lt;code&gt;parsec&lt;/code&gt; ライブラリを使用したことがあるか、チュートリアルを読んだことがあるユーザにとっては慣習的でなじみのあるものです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらすべてのライブラリを網羅しようとするのは現実的ではないため、 &lt;code&gt;megaparsec&lt;/code&gt; に焦点を当てます。より正確には、この本が出版される時までにはほとんどどこでも古いバージョンに取って代わるであろうバージョン8をカバーするつもりです。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;ParsecT&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;parsect-と-parsec-モナド&#34;&gt;ParsecT と Parsec モナド&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ParsecT&lt;/code&gt;は、主要なパーサモナド変換子であり、&lt;code&gt;megaparsec&lt;/code&gt; の中心的なデータ型です。 &lt;code&gt;ParsecT e s m a&lt;/code&gt; は、次のようにパラメータ化されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;e&lt;/code&gt; はエラーメッセージのカスタムコンポーネントの型です。もし私たちが何もカスタムを望まないのであれば（そして今のところ私たちはしません）、 &lt;code&gt;Data.Void&lt;/code&gt; モジュールの &lt;code&gt;Void&lt;/code&gt; を使うだけです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;s&lt;/code&gt; は入力ストリームの型です。 &lt;code&gt;megaparsec&lt;/code&gt; は、&lt;code&gt;String&lt;/code&gt;、正格または遅延 &lt;code&gt;Text&lt;/code&gt; 、 正格または遅延 &lt;code&gt;ByteStrings&lt;/code&gt; をそのまま使用して動作します。カスタム入力ストリームを扱うことも可能です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;m&lt;/code&gt; は &lt;code&gt;ParsecT&lt;/code&gt; モナド変換子の内部モナドです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;a&lt;/code&gt; はパース結果であるモナディック値です。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ほとんどの場合、&lt;code&gt;m&lt;/code&gt; は &lt;code&gt;Identity&lt;/code&gt; に他ならないので、&lt;code&gt;Parsec&lt;/code&gt; 型シノニムは非常に便利です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; e s a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; e s &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parsec&lt;/code&gt; は、単なる &lt;code&gt;ParsecT&lt;/code&gt;の変換子を使わないバージョンです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; のモナド変換子と MTL のモナド変換子およびクラスの間の類似点を示すこともできます。 確かに、&lt;code&gt;MonadState&lt;/code&gt; や &lt;code&gt;MonadReader&lt;/code&gt; などの型クラスと目的が似ている &lt;code&gt;MonadParsec&lt;/code&gt; 型クラスがあります。 後で &lt;code&gt;MonadParsec&lt;/code&gt; に戻り、詳細について説明します。&lt;/p&gt;
&lt;p&gt;カスタムした型シノニムを定義することは &lt;code&gt;megaparsec&lt;/code&gt; を使ってパーサを書くことを始める最も良い方法です。 これは次の2つの理由から良い考えです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;あなたのパーサモナドとして &lt;code&gt;Parser&lt;/code&gt; があれば、&lt;code&gt;Parser Int&lt;/code&gt; のようなトップレベルのシグネチャを追加することがより簡単になります。シグネチャがないと、&lt;code&gt;e&lt;/code&gt; のようなものが曖昧になることがよくあります。これはライブラリの多相APIの反面です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;すべての型変数を具体的な方に固定して操作すると、GHCの最適化が大幅に向上します。パーサが多相性を保っている場合、GHCは最適化の観点からそれほど多くのことはできません。&lt;code&gt;megaparsec&lt;/code&gt; APIは多相ですが、エンドユーザーは具体的にパーサモナドの型を固定することが予想されます。そのため、インライン展開と、ほとんどの関数の定義がインターフェイスファイルと呼ばれるファイルに出力されているという事実により、GHCは非常に効率的な非多相的なコードを生成できます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;次のように型シノニム（通常は &lt;code&gt;Parser&lt;/code&gt; と呼ばれる）を定義しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;ype &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--                   ^    ^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--                   |    ┗━━━━┓&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- カスタムエラーコンポーネント  入力ストリームの型&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;カスタムパースエラーを扱い始めるまでは、この章で &lt;code&gt;Parser&lt;/code&gt;が表示されているときは、この型を想定してください。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Character&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;文字とバイナリストリーム&#34;&gt;文字とバイナリストリーム&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; は、5種類の入力ストリーム（&lt;code&gt;String&lt;/code&gt;、正格または遅延 &lt;code&gt;Text&lt;/code&gt; 、 正格または遅延 &lt;code&gt;ByteStrings&lt;/code&gt;）をそのまま使用できると言われています。 これが可能なのは、ライブラリでこれらの型が &lt;code&gt;Stream&lt;/code&gt; 型クラスのインスタンスになっているからです。 &lt;code&gt;Stream&lt;/code&gt; 型クラスはそれぞれのデータ型が &lt;code&gt;megaparsec&lt;/code&gt; のパーサへの入力として使用するために必要な関数を抽象化したものです。&lt;/p&gt;
&lt;p&gt;シンプルにしたバージョンの &lt;code&gt;Stream&lt;/code&gt; は、次のようになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; s &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt;  s ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; s ::&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  take1_ ::&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s, s) &lt;span class=&#34;co&#34;&gt;-- aka uncons&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  tokensToChunk ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際の &lt;code&gt;Stream&lt;/code&gt; の定義にはもっと多くのメソッドがありますが、それらを知ることはライブラリを使うために必要ではありません。&lt;/p&gt;
&lt;p&gt;型クラスには2つの型関数が関連付けられています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ストリーム &lt;code&gt;s&lt;/code&gt; における &lt;code&gt;Token s&lt;/code&gt; は単一トークンの型です。一般的な例は &lt;code&gt;Char&lt;/code&gt; と &lt;code&gt;Word8&lt;/code&gt; ですが、カスタムストリームのために何か他のものになるかもしれません。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ストリーム &lt;code&gt;s&lt;/code&gt; における &lt;code&gt;Tokens s&lt;/code&gt; はストリームの「チャンク」の型です。チャンクの概念はパフォーマンス上の理由から導入されただけです。確かに、トークンのリスト &lt;code&gt;[Token s]&lt;/code&gt; と同型であるストリームの一部のより効率的な表現が可能です。例えば、 &lt;code&gt;Text&lt;/code&gt; 型の入力ストリームは &lt;code&gt;Tokens s ~ Text&lt;/code&gt; であり、&lt;code&gt;Text&lt;/code&gt; のチャンクは &lt;code&gt;Text&lt;/code&gt; です。型の等価性 &lt;code&gt;Tokens s ~ s&lt;/code&gt; はしばしば成り立ちますが、 &lt;code&gt;Tokens s&lt;/code&gt; と &lt;code&gt;s&lt;/code&gt; はカスタムストリームでは異なる可能性があるため、&lt;code&gt;megaparsec&lt;/code&gt; ではこれらの型を分離します。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;デフォルトの入力ストリームの型を以下の表に示します。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;s&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Token s&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Tokens s&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;正格 &lt;code&gt;Text&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;正格 &lt;code&gt;Text&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;遅延 &lt;code&gt;Text&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;遅延 &lt;code&gt;Text&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;正格 &lt;code&gt;ByteString&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Word8&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;正格 &lt;code&gt;ByteString&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;遅延 &lt;code&gt;ByteString&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Word8&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;遅延 &lt;code&gt;ByteString&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Token&lt;/code&gt; および &lt;code&gt;Tokens&lt;/code&gt; 型関数は &lt;code&gt;megaparsec&lt;/code&gt; API の型にて 多く出現するため、慣れることが重要です。&lt;/p&gt;
&lt;p&gt;お気づきかもしれませんが、デフォルト入力ストリームを&lt;code&gt;Token&lt;/code&gt;型でグループ化すると、2つのグループになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Token s ~ Char&lt;/code&gt; となる文字ストリーム : &lt;code&gt;String&lt;/code&gt; および 正格・遅延 &lt;code&gt;Text&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Token s ~ Word8&lt;/code&gt; となるバイナリストリーム : 正格・遅延 &lt;code&gt;ByteString&lt;/code&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; では、それぞれの型の入力ストリームに対して同じパーサをコーディングする必要はないことがわかりました。 (&lt;code&gt;attoparsec&lt;/code&gt; ライブラリではする必要があります) しかし、それぞれの &lt;code&gt;Token s&lt;/code&gt; ごとに異なるコードが必要です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文字ストリームの共通のコンビネータを得るには、&lt;code&gt;Text.Megaparsec.Char&lt;/code&gt; モジュールをインポートしてください。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バイナリストリームで同じようにするには、&lt;code&gt;Text.Megaparsec.Byte&lt;/code&gt;をインポートします。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのモジュールには、次のような2つの類似したヘルパーパーサのセットが含まれています。&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;col style=&#34;width: 33%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Text.Megaparsec.Char&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Text.Megaparsec.Byte&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;newline&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;(MonadParsec e s m, Token s ~ Char) =&amp;gt; m (Token s)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;(MonadParsec e s m, Token s ~ Word8) =&amp;gt; m (Token s)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;eol&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;(MonadParsec e s m, Token s ~ Char) =&amp;gt; m (Tokens s)&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;(MonadParsec e s m, Token s ~ Word8) =&amp;gt; m (Tokens s)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;このモジュールを構築するプリミティブをいくつか紹介しましょう。そうすれば、これから使用するツールを理解できます。&lt;/p&gt;
&lt;p&gt;最初のプリミティブは&lt;code&gt;token&lt;/code&gt;と呼ばれ、&lt;code&gt;Token s&lt;/code&gt;をパースすることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;token ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ Matching function for the token to parse&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s))&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ Expected items (in case of an error)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;token&lt;/code&gt; の最初の引数はパースしたいトークンのマッチング関数です。 関数が&lt;code&gt;Just&lt;/code&gt;で何かを返す場合、その値はパース結果になります。 &lt;code&gt;Nothing&lt;/code&gt; はパーサがトークンを受理しなかったことによりプリミティブが失敗したこと示します。&lt;/p&gt;
&lt;p&gt;2番目の引数は、（&lt;code&gt;container&lt;/code&gt;パッケージの）&lt;code&gt;Set&lt;/code&gt; であり、失敗した場合にユーザーに表示されるすべての予想されるErrorItemを含みます。 パースエラーについて議論するときに、&lt;code&gt;ErrorItem&lt;/code&gt; 型を詳しく調べます。&lt;/p&gt;
&lt;p&gt;トークンがどのように機能するのかをよりよく理解するために、 &lt;code&gt;Text.Megaparsec&lt;/code&gt; モジュールの定義を見てみましょう。 これにはあらゆる種類の入力ストリームで 機能するコンビネータが含まれています。 &lt;code&gt;satisfy&lt;/code&gt;はかなり一般的なコンビネータです。 マッチさせたいトークンを与えると &lt;code&gt;True&lt;/code&gt; を返す述語を与え、 パーサは結果を返します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;satisfy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- ^ Predicate to apply&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;satisfy f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; token testToken Set.empty&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-6&#34;&gt;&lt;a href=&#34;#cb5-6&#34;&gt;&lt;/a&gt;    testToken x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; f x &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;testToken&lt;/code&gt; は &lt;code&gt;Bool&lt;/code&gt; を返す関数 &lt;code&gt;f&lt;/code&gt; を 期待するトークン &lt;code&gt;Maybe (Token s)&lt;/code&gt; を返す関数に変えます。 &lt;code&gt;satisfy&lt;/code&gt; では、 一致すると予想される正確なトークン列がわからないため、 2番目の引数として &lt;code&gt;Set.empty&lt;/code&gt; を渡します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;satisfy&lt;/code&gt; を理解するために、機能するか見てみましょう。 パーサで遊ぶためには、それを実行するヘルパー関数が必要です。 GHCiでテストするために &lt;code&gt;megaparsec&lt;/code&gt; は &lt;code&gt;parseTest&lt;/code&gt; を提供します。&lt;/p&gt;
&lt;p&gt;まず、GHCiを起動していくつかのモジュールをインポートしましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;import&lt;/span&gt; Text.Megaparsec&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;import&lt;/span&gt; Text.Megaparsec.Char&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;import&lt;/span&gt; Data.Text (Text)&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;import&lt;/span&gt; Data.Void&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パーサの型のあいまいさを解決するために、 使用する &lt;code&gt;Parser&lt;/code&gt; 型シノニムを追加します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;bu&#34;&gt;type&lt;/span&gt; Parser = Parsec Void Text&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;また、文字列リテラルを &lt;code&gt;Text&lt;/code&gt; の値として使用できるように、&lt;code&gt;OverloadedStrings&lt;/code&gt; 言語拡張を有効にする必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&#34;ex&#34;&gt;set&lt;/span&gt; -XOverloadedStrings&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (satisfy (== &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-10&#34;&gt;&lt;a href=&#34;#cb8-10&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (satisfy (== &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-11&#34;&gt;&lt;a href=&#34;#cb8-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-12&#34;&gt;&lt;a href=&#34;#cb8-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-13&#34;&gt;&lt;a href=&#34;#cb8-13&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (satisfy (== &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-14&#34;&gt;&lt;a href=&#34;#cb8-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb8-15&#34;&gt;&lt;a href=&#34;#cb8-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-16&#34;&gt;&lt;a href=&#34;#cb8-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-17&#34;&gt;&lt;a href=&#34;#cb8-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb8-18&#34;&gt;&lt;a href=&#34;#cb8-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-19&#34;&gt;&lt;a href=&#34;#cb8-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-20&#34;&gt;&lt;a href=&#34;#cb8-20&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (satisfy (&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-21&#34;&gt;&lt;a href=&#34;#cb8-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb8-22&#34;&gt;&lt;a href=&#34;#cb8-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-23&#34;&gt;&lt;a href=&#34;#cb8-23&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-24&#34;&gt;&lt;a href=&#34;#cb8-24&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb8-25&#34;&gt;&lt;a href=&#34;#cb8-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-26&#34;&gt;&lt;a href=&#34;#cb8-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-27&#34;&gt;&lt;a href=&#34;#cb8-27&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (satisfy (&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-28&#34;&gt;&lt;a href=&#34;#cb8-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;satisfy&lt;/code&gt; の多相性により、 &lt;code&gt;parseTest&lt;/code&gt; は &lt;code&gt;MonadParsec e s m&lt;/code&gt; で &lt;code&gt;e&lt;/code&gt; と &lt;code&gt;s&lt;/code&gt; に何を使うべきかわからないため、 アノテーション &lt;code&gt;:: Parser Char&lt;/code&gt; は必要です (&lt;code&gt;m&lt;/code&gt; はこれらのヘルパーにより &lt;code&gt;Identity&lt;/code&gt; と仮定されます)。 型シグネチャを持つ既存のパーサを使う場合、 パーサの型を明示的に説明する必要はありません。&lt;/p&gt;
&lt;p&gt;うまくいきそうです。 &lt;code&gt;satisfy&lt;/code&gt; の問題は、 それが失敗したときに何が期待されるのかを述べないということです。 なぜなら、 &lt;code&gt;satisfy&lt;/code&gt; の呼び出し元が提供する関数を分析することができないからです。 あまり一般的ではないですが、 もっと有用なエラーメッセージを生成することができる 他のコンビネータがあります。 例えば、&lt;code&gt;single&lt;/code&gt; (&lt;code&gt;Text.Megaparsec.Byte&lt;/code&gt; と &lt;code&gt;Text.Megaparsec.Char&lt;/code&gt; では &lt;code&gt;char&lt;/code&gt; と呼ばれる型制約のあるシノニムを使用する) は特定のトークン値にマッチします。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;single&lt;/span&gt; :: MonadParsec e s m&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;  =&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;Token&lt;/span&gt; s           -- ^ Token to match&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; m (Token s)&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;single&lt;/span&gt; t = token testToken expected&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;testToken&lt;/span&gt; x = if x == t then Just x else Nothing&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;expected&lt;/span&gt;    = E.singleton (Tokens (t:&lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;[]))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Tokens&lt;/code&gt; 値コンストラクタは、前に説明した型関数 &lt;code&gt;Tokens&lt;/code&gt; と何の共通点もありません。 実際、 &lt;code&gt;Tokens&lt;/code&gt; は &lt;code&gt;ErrorItem&lt;/code&gt; のコンストラクタの1つであり、 一致すると予想される具体的なトークン列 を指定するために使用されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; :: Parser Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;b&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-7&#34;&gt;&lt;a href=&#34;#cb10-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-8&#34;&gt;&lt;a href=&#34;#cb10-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-9&#34;&gt;&lt;a href=&#34;#cb10-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; :: Parser Char) &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-10&#34;&gt;&lt;a href=&#34;#cb10-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以下のようにの改行を定義できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;newline&lt;/span&gt; :: (MonadParsec e s m, Token s ~ Char) =&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;m&lt;/span&gt; (Token s)&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;newline&lt;/span&gt; = single &lt;span class=&#34;st&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2つ目のプリミティブは&lt;code&gt;tokens&lt;/code&gt;と呼ばれ、 &lt;code&gt;Tokens s&lt;/code&gt; をパースすることを可能にします。 つまり、入力の固定されたチャンクに一致させるために使用できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb12&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb12-1&#34;&gt;&lt;a href=&#34;#cb12-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;tokens&lt;/span&gt; :: MonadParsec e s m&lt;/span&gt;
&lt;span id=&#34;cb12-2&#34;&gt;&lt;a href=&#34;#cb12-2&#34;&gt;&lt;/a&gt;  =&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Tokens&lt;/span&gt; s -&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; Tokens s -&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; Bool&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb12-3&#34;&gt;&lt;a href=&#34;#cb12-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;--&lt;/span&gt; ^ チャンクの等価性をチェックする述語&lt;/span&gt;
&lt;span id=&#34;cb12-4&#34;&gt;&lt;a href=&#34;#cb12-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; Tokens s&lt;/span&gt;
&lt;span id=&#34;cb12-5&#34;&gt;&lt;a href=&#34;#cb12-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;--&lt;/span&gt; ^ 入力にマッチさせたいチャンク&lt;/span&gt;
&lt;span id=&#34;cb12-6&#34;&gt;&lt;a href=&#34;#cb12-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; m (Tokens s)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;tokens&lt;/code&gt; に関して定義された2つのパーサがあります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb13&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb13-1&#34;&gt;&lt;a href=&#34;#cb13-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- from &amp;quot;Text.Megaparsec&amp;quot;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-2&#34;&gt;&lt;a href=&#34;#cb13-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;chunk ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb13-3&#34;&gt;&lt;a href=&#34;#cb13-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb13-4&#34;&gt;&lt;a href=&#34;#cb13-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s)&lt;/span&gt;
&lt;span id=&#34;cb13-5&#34;&gt;&lt;a href=&#34;#cb13-5&#34;&gt;&lt;/a&gt;chunk &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; tokens (&lt;span class=&#34;op&#34;&gt;==&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb13-6&#34;&gt;&lt;a href=&#34;#cb13-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-7&#34;&gt;&lt;a href=&#34;#cb13-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- from &amp;quot;Text.Megaparsec.Char&amp;quot; and &amp;quot;Text.Megaparsec.Byte&amp;quot;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb13-8&#34;&gt;&lt;a href=&#34;#cb13-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;string&amp;#39; ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;CI.FoldCase&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s))&lt;/span&gt;
&lt;span id=&#34;cb13-9&#34;&gt;&lt;a href=&#34;#cb13-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb13-10&#34;&gt;&lt;a href=&#34;#cb13-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; s)&lt;/span&gt;
&lt;span id=&#34;cb13-11&#34;&gt;&lt;a href=&#34;#cb13-11&#34;&gt;&lt;/a&gt;string&amp;#39; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; tokens ((&lt;span class=&#34;op&#34;&gt;==&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`on`&lt;/span&gt; CI.mk)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それらは入力の一定のチャンクにマッチします。 &lt;code&gt;chunk&lt;/code&gt; (&lt;code&gt;Text.Megaparsec.Byte&lt;/code&gt; と &lt;code&gt;Text.Megaparsec.Char&lt;/code&gt; では &lt;code&gt;string&lt;/code&gt; と呼ばれる型制約のあるシノニムを使用する) は大文字と小文字を区別しますが、 &lt;code&gt;string&#39;&lt;/code&gt; は大文字と小文字を区別しません。 大文字と小文字を区別しない場合のマッチには &lt;code&gt;case-insensitive&lt;/code&gt; パッケージが使われているため、 &lt;code&gt;FoldCase&lt;/code&gt; 制約があります。&lt;/p&gt;
&lt;p&gt;新しいコンビネータも使ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb14&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb14-1&#34;&gt;&lt;a href=&#34;#cb14-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (string &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-2&#34;&gt;&lt;a href=&#34;#cb14-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-3&#34;&gt;&lt;a href=&#34;#cb14-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-4&#34;&gt;&lt;a href=&#34;#cb14-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (string &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-5&#34;&gt;&lt;a href=&#34;#cb14-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-6&#34;&gt;&lt;a href=&#34;#cb14-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-7&#34;&gt;&lt;a href=&#34;#cb14-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; bar&lt;/span&gt;
&lt;span id=&#34;cb14-8&#34;&gt;&lt;a href=&#34;#cb14-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-9&#34;&gt;&lt;a href=&#34;#cb14-9&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;st&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-10&#34;&gt;&lt;a href=&#34;#cb14-10&#34;&gt;&lt;/a&gt;expecting &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-11&#34;&gt;&lt;a href=&#34;#cb14-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-12&#34;&gt;&lt;a href=&#34;#cb14-12&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (string&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;FOO&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-13&#34;&gt;&lt;a href=&#34;#cb14-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;FOO&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-14&#34;&gt;&lt;a href=&#34;#cb14-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-15&#34;&gt;&lt;a href=&#34;#cb14-15&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (string&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;FoO&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-16&#34;&gt;&lt;a href=&#34;#cb14-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;FoO&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-17&#34;&gt;&lt;a href=&#34;#cb14-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-18&#34;&gt;&lt;a href=&#34;#cb14-18&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (string&amp;#39; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;FoZ&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-19&#34;&gt;&lt;a href=&#34;#cb14-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-20&#34;&gt;&lt;a href=&#34;#cb14-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-21&#34;&gt;&lt;a href=&#34;#cb14-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FoZ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-22&#34;&gt;&lt;a href=&#34;#cb14-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-23&#34;&gt;&lt;a href=&#34;#cb14-23&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;st&#34;&gt;&amp;quot;FoZ&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb14-24&#34;&gt;&lt;a href=&#34;#cb14-24&#34;&gt;&lt;/a&gt;expecting &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OK、単一のトークンと入力のチャンクをマッチできました。 次のステップは、より興味深いパーサを書くために 基本的なパーサを組み合わせる方法を学びます。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;MonaAp&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;モナディック構文とアプリカティブ構文&#34;&gt;モナディック構文とアプリカティブ構文&lt;/h2&gt;
&lt;p&gt;パーサを組み合わせる最も簡単な方法は、それらを逐次実行することです。 &lt;code&gt;ParsecT&lt;/code&gt;と&lt;code&gt;Parsec&lt;/code&gt;はモナドであり、 モナドでの束縛はパーサを連続で使用することとまったく同じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb15&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb15-1&#34;&gt;&lt;a href=&#34;#cb15-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;mySequence ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb15-2&#34;&gt;&lt;a href=&#34;#cb15-2&#34;&gt;&lt;/a&gt;mySequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-3&#34;&gt;&lt;a href=&#34;#cb15-3&#34;&gt;&lt;/a&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-4&#34;&gt;&lt;a href=&#34;#cb15-4&#34;&gt;&lt;/a&gt;  b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-5&#34;&gt;&lt;a href=&#34;#cb15-5&#34;&gt;&lt;/a&gt;  c &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb15-6&#34;&gt;&lt;a href=&#34;#cb15-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (a, b, c)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行すると、すべてが期待通りに機能することを確認できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb16&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb16-1&#34;&gt;&lt;a href=&#34;#cb16-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; mySequence &lt;span class=&#34;st&#34;&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-2&#34;&gt;&lt;a href=&#34;#cb16-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-3&#34;&gt;&lt;a href=&#34;#cb16-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-4&#34;&gt;&lt;a href=&#34;#cb16-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; mySequence &lt;span class=&#34;st&#34;&gt;&amp;quot;bcd&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-5&#34;&gt;&lt;a href=&#34;#cb16-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb16-6&#34;&gt;&lt;a href=&#34;#cb16-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-7&#34;&gt;&lt;a href=&#34;#cb16-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;bcd&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-8&#34;&gt;&lt;a href=&#34;#cb16-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb16-9&#34;&gt;&lt;a href=&#34;#cb16-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-10&#34;&gt;&lt;a href=&#34;#cb16-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-11&#34;&gt;&lt;a href=&#34;#cb16-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-12&#34;&gt;&lt;a href=&#34;#cb16-12&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; mySequence &lt;span class=&#34;st&#34;&gt;&amp;quot;adc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-13&#34;&gt;&lt;a href=&#34;#cb16-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:2:&lt;/span&gt;
&lt;span id=&#34;cb16-14&#34;&gt;&lt;a href=&#34;#cb16-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-15&#34;&gt;&lt;a href=&#34;#cb16-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;adc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-16&#34;&gt;&lt;a href=&#34;#cb16-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;  ^&lt;/span&gt;
&lt;span id=&#34;cb16-17&#34;&gt;&lt;a href=&#34;#cb16-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb16-18&#34;&gt;&lt;a href=&#34;#cb16-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すべてのモナドがアプリカティブファンクターでもあることを覚えていれば、 逐次実行のための代替構文が可能であり、 アプリカティブ構文を使用できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb17&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb17-1&#34;&gt;&lt;a href=&#34;#cb17-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;mySequence ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb17-2&#34;&gt;&lt;a href=&#34;#cb17-2&#34;&gt;&lt;/a&gt;mySequence &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-3&#34;&gt;&lt;a href=&#34;#cb17-3&#34;&gt;&lt;/a&gt;  (,,) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-4&#34;&gt;&lt;a href=&#34;#cb17-4&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb17-5&#34;&gt;&lt;a href=&#34;#cb17-5&#34;&gt;&lt;/a&gt;       &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2番目のバージョンは最初のバージョンとまったく同じように機能します。 どちらのスタイルを使うかは、しばしば好みの問題です。 モナディックスタイルは間違いなく冗長で、ときにはより明確ですが、 一方アプリカティブスタイルはより簡潔です。 そうは言っても、モナドはアプリカティブファンクターよりも強力であるため、 モナディックスタイルはもちろんより強力です。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Eof&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;eof-による入力の強制消費&#34;&gt;eof による入力の強制消費&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Applicative&lt;/code&gt; はとてもおもしろいことをするのに十分強力です。 単位元を持つ結合演算子を備えることで、 Haskell では &lt;code&gt;Alternative&lt;/code&gt; 型クラスとして表現される アプリカティブファンクタのモノイドを得ます。 &lt;code&gt;parser-combinators&lt;/code&gt; パッケージは &lt;code&gt;Applicative&lt;/code&gt; と &lt;code&gt;Alternative&lt;/code&gt; の概念に基づき構築された かなりの数の抽象的なコンビネータを提供します。 &lt;code&gt;Text.Megaparsec&lt;/code&gt; モジュールはそれらを &lt;code&gt;Control.Applicative.Combinators&lt;/code&gt; から再エクスポートします。&lt;/p&gt;
&lt;p&gt;最も一般的なコンビネータの1つに、&lt;code&gt;many&lt;/code&gt; と呼ばれるものがあります。 それは与えられたパーサを0回以上実行することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb18&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb18-1&#34;&gt;&lt;a href=&#34;#cb18-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; [Char]) &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-2&#34;&gt;&lt;a href=&#34;#cb18-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-3&#34;&gt;&lt;a href=&#34;#cb18-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-4&#34;&gt;&lt;a href=&#34;#cb18-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) :: &lt;span class=&#34;ex&#34;&gt;Parser&lt;/span&gt; [Char]) &lt;span class=&#34;st&#34;&gt;&amp;quot;aabbb&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb18-5&#34;&gt;&lt;a href=&#34;#cb18-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2番目の結果は少し驚くかもしれません。 パーサは &lt;code&gt;a&lt;/code&gt; が一致したとして消費しましたが、その後停止しました。 &lt;code&gt;many (char &#39;a&#39;)&lt;/code&gt; の後に何をしたいのか何も言っていませんでした！&lt;/p&gt;
&lt;p&gt;ほとんどの場合は、パーサに入力全体の消費を強制させ、 恥ずかしがり屋で黙ってやめるのではなく、 パースエラーを報告させたいです。 これは、入力の終わりに達することを 要求することによって行われます。 入力の終わりは概念にすぎませんが、 幸いにも &lt;code&gt;eof :: MonadParsec e m =&amp;gt; m ()&lt;/code&gt;と呼ばれるプリミティブがあり、 これは何も消費せず、入力の終わりでのみ成功します。 これをパーサに追加してもう一度試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb19&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb19-1&#34;&gt;&lt;a href=&#34;#cb19-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;*&lt;/span&gt; eof :: Parser [Char]) &lt;span class=&#34;st&#34;&gt;&amp;quot;aabbb&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-2&#34;&gt;&lt;a href=&#34;#cb19-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:3:&lt;/span&gt;
&lt;span id=&#34;cb19-3&#34;&gt;&lt;a href=&#34;#cb19-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-4&#34;&gt;&lt;a href=&#34;#cb19-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;aabbb&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-5&#34;&gt;&lt;a href=&#34;#cb19-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   ^&lt;/span&gt;
&lt;span id=&#34;cb19-6&#34;&gt;&lt;a href=&#34;#cb19-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb19-7&#34;&gt;&lt;a href=&#34;#cb19-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; or end of input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パーサで&lt;code&gt;b&lt;/code&gt;について何も言わなかったことにより、 それらは確かに予想外となりました。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Alt&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;選択肢を使った動作&#34;&gt;選択肢を使った動作&lt;/h2&gt;
&lt;p&gt;これから、次の形式のURIのパースが可能である実用的なパーサを開発します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;角括弧 &lt;code&gt;[]&lt;/code&gt; の中はオプションであり、それらは有効なURIに現れても現れなくてもよいことを覚えておくべきです。 &lt;code&gt;[]&lt;/code&gt; は、ある可能性を別の可能性の中で表現するためにネストすることさえできます。私たちはこのすべてを処理します&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34; role=&#34;doc-noteref&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scheme&lt;/code&gt; から始めましょう。 &lt;code&gt;data&lt;/code&gt;、&lt;code&gt;file&lt;/code&gt;、&lt;code&gt;ftp&lt;/code&gt;、&lt;code&gt;http&lt;/code&gt;、&lt;code&gt;https&lt;/code&gt;、&lt;code&gt;irc&lt;/code&gt;、&lt;code&gt;mailto&lt;/code&gt; など、私たちが知っているスキームのみを受け入れます。&lt;/p&gt;
&lt;p&gt;一定の文字列と一致させるために、&lt;code&gt;string&lt;/code&gt; を使います。 選択を表現するために、&lt;code&gt;Alternative&lt;/code&gt; 型クラスの &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; メソッドを使います。 次のように書くことができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb21&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb21-1&#34;&gt;&lt;a href=&#34;#cb21-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-2&#34;&gt;&lt;a href=&#34;#cb21-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards   #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-3&#34;&gt;&lt;a href=&#34;#cb21-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-4&#34;&gt;&lt;a href=&#34;#cb21-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-5&#34;&gt;&lt;a href=&#34;#cb21-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-6&#34;&gt;&lt;a href=&#34;#cb21-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-7&#34;&gt;&lt;a href=&#34;#cb21-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-8&#34;&gt;&lt;a href=&#34;#cb21-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb21-9&#34;&gt;&lt;a href=&#34;#cb21-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-10&#34;&gt;&lt;a href=&#34;#cb21-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb21-11&#34;&gt;&lt;a href=&#34;#cb21-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-12&#34;&gt;&lt;a href=&#34;#cb21-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-13&#34;&gt;&lt;a href=&#34;#cb21-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-14&#34;&gt;&lt;a href=&#34;#cb21-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-15&#34;&gt;&lt;a href=&#34;#cb21-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-16&#34;&gt;&lt;a href=&#34;#cb21-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-17&#34;&gt;&lt;a href=&#34;#cb21-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-18&#34;&gt;&lt;a href=&#34;#cb21-18&#34;&gt;&lt;/a&gt;pScheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-19&#34;&gt;&lt;a href=&#34;#cb21-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-20&#34;&gt;&lt;a href=&#34;#cb21-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-21&#34;&gt;&lt;a href=&#34;#cb21-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-22&#34;&gt;&lt;a href=&#34;#cb21-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-23&#34;&gt;&lt;a href=&#34;#cb21-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb21-24&#34;&gt;&lt;a href=&#34;#cb21-24&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb22&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb22-1&#34;&gt;&lt;a href=&#34;#cb22-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pScheme &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-2&#34;&gt;&lt;a href=&#34;#cb22-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb22-3&#34;&gt;&lt;a href=&#34;#cb22-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-4&#34;&gt;&lt;a href=&#34;#cb22-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-5&#34;&gt;&lt;a href=&#34;#cb22-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb22-6&#34;&gt;&lt;a href=&#34;#cb22-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb22-7&#34;&gt;&lt;a href=&#34;#cb22-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;, or &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-8&#34;&gt;&lt;a href=&#34;#cb22-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-9&#34;&gt;&lt;a href=&#34;#cb22-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pScheme &lt;span class=&#34;st&#34;&gt;&amp;quot;dat&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-10&#34;&gt;&lt;a href=&#34;#cb22-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb22-11&#34;&gt;&lt;a href=&#34;#cb22-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-12&#34;&gt;&lt;a href=&#34;#cb22-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;dat&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-13&#34;&gt;&lt;a href=&#34;#cb22-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb22-14&#34;&gt;&lt;a href=&#34;#cb22-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;dat&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-15&#34;&gt;&lt;a href=&#34;#cb22-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;, or &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-16&#34;&gt;&lt;a href=&#34;#cb22-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-17&#34;&gt;&lt;a href=&#34;#cb22-17&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pScheme &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-18&#34;&gt;&lt;a href=&#34;#cb22-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-19&#34;&gt;&lt;a href=&#34;#cb22-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-20&#34;&gt;&lt;a href=&#34;#cb22-20&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pScheme &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb22-21&#34;&gt;&lt;a href=&#34;#cb22-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;見栄えは良いですが、&lt;code&gt;pScheme&lt;/code&gt;の定義は少し反復的です。 &lt;code&gt;choice&lt;/code&gt; コンビネータを使って &lt;code&gt;pScheme&lt;/code&gt; を書く方法があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb23&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb23-1&#34;&gt;&lt;a href=&#34;#cb23-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-2&#34;&gt;&lt;a href=&#34;#cb23-2&#34;&gt;&lt;/a&gt;pScheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice&lt;/span&gt;
&lt;span id=&#34;cb23-3&#34;&gt;&lt;a href=&#34;#cb23-3&#34;&gt;&lt;/a&gt;  [ string &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-4&#34;&gt;&lt;a href=&#34;#cb23-4&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-5&#34;&gt;&lt;a href=&#34;#cb23-5&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-6&#34;&gt;&lt;a href=&#34;#cb23-6&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-7&#34;&gt;&lt;a href=&#34;#cb23-7&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-8&#34;&gt;&lt;a href=&#34;#cb23-8&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb23-9&#34;&gt;&lt;a href=&#34;#cb23-9&#34;&gt;&lt;/a&gt;  , string &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt; ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;choice&lt;/code&gt; は要素間に &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; を入れてリストを畳み込む操作である &lt;code&gt;asum&lt;/code&gt; の単なるシノニムであり、&lt;code&gt;pScheme&lt;/code&gt; の2つの定義は実際には同じです。 &lt;code&gt;choice&lt;/code&gt; を使用したほうがが少し良く見えるかもしれません。&lt;/p&gt;
&lt;p&gt;スキームの後にはコロン&lt;code&gt;:&lt;/code&gt;があるはずです。 何かした後で別の何かを要求するために、 モナドでの束縛またはdo記法を使います。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb24&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb24-1&#34;&gt;&lt;a href=&#34;#cb24-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-2&#34;&gt;&lt;a href=&#34;#cb24-2&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; uriScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-3&#34;&gt;&lt;a href=&#34;#cb24-3&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb24-4&#34;&gt;&lt;a href=&#34;#cb24-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-5&#34;&gt;&lt;a href=&#34;#cb24-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-6&#34;&gt;&lt;a href=&#34;#cb24-6&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-7&#34;&gt;&lt;a href=&#34;#cb24-7&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme&lt;/span&gt;
&lt;span id=&#34;cb24-8&#34;&gt;&lt;a href=&#34;#cb24-8&#34;&gt;&lt;/a&gt;  _ &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb24-9&#34;&gt;&lt;a href=&#34;#cb24-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; r)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pUri&lt;/code&gt;を実行しようとすると、スキーム名の後に &lt;code&gt;:&lt;/code&gt; が必要であることがわかります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb25&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb25-1&#34;&gt;&lt;a href=&#34;#cb25-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-2&#34;&gt;&lt;a href=&#34;#cb25-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:4:&lt;/span&gt;
&lt;span id=&#34;cb25-3&#34;&gt;&lt;a href=&#34;#cb25-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-4&#34;&gt;&lt;a href=&#34;#cb25-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;irc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-5&#34;&gt;&lt;a href=&#34;#cb25-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;    ^&lt;/span&gt;
&lt;span id=&#34;cb25-6&#34;&gt;&lt;a href=&#34;#cb25-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb25-7&#34;&gt;&lt;a href=&#34;#cb25-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-8&#34;&gt;&lt;a href=&#34;#cb25-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-9&#34;&gt;&lt;a href=&#34;#cb25-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;irc:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb25-10&#34;&gt;&lt;a href=&#34;#cb25-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt; {uriScheme = &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、このスキームのパーサは完成していません。 良い Haskell のプログラマーは、 正しくないデータを表現できないように型を定義しようとします。 すべての &lt;code&gt;Text&lt;/code&gt; の値が有効なスキームであるとは限りません。 スキームを表すためにデータ型を定義し、 &lt;code&gt;pScheme&lt;/code&gt; パーサにその型の値を返させます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb26&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb26-1&#34;&gt;&lt;a href=&#34;#cb26-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-2&#34;&gt;&lt;a href=&#34;#cb26-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeData&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-3&#34;&gt;&lt;a href=&#34;#cb26-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeFile&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-4&#34;&gt;&lt;a href=&#34;#cb26-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeFtp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-5&#34;&gt;&lt;a href=&#34;#cb26-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeHttp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-6&#34;&gt;&lt;a href=&#34;#cb26-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeHttps&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-7&#34;&gt;&lt;a href=&#34;#cb26-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeIrc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-8&#34;&gt;&lt;a href=&#34;#cb26-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeMailto&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-9&#34;&gt;&lt;a href=&#34;#cb26-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb26-10&#34;&gt;&lt;a href=&#34;#cb26-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-11&#34;&gt;&lt;a href=&#34;#cb26-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-12&#34;&gt;&lt;a href=&#34;#cb26-12&#34;&gt;&lt;/a&gt;pScheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice&lt;/span&gt;
&lt;span id=&#34;cb26-13&#34;&gt;&lt;a href=&#34;#cb26-13&#34;&gt;&lt;/a&gt;  [ &lt;span class=&#34;dt&#34;&gt;SchemeData&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-14&#34;&gt;&lt;a href=&#34;#cb26-14&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeFile&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-15&#34;&gt;&lt;a href=&#34;#cb26-15&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeFtp&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-16&#34;&gt;&lt;a href=&#34;#cb26-16&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeHttp&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-17&#34;&gt;&lt;a href=&#34;#cb26-17&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeHttps&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-18&#34;&gt;&lt;a href=&#34;#cb26-18&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeIrc&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-19&#34;&gt;&lt;a href=&#34;#cb26-19&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeMailto&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb26-20&#34;&gt;&lt;a href=&#34;#cb26-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-21&#34;&gt;&lt;a href=&#34;#cb26-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-22&#34;&gt;&lt;a href=&#34;#cb26-22&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; uriScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb26-23&#34;&gt;&lt;a href=&#34;#cb26-23&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;$)&lt;/code&gt; 演算子は、左側にある値をただちに関数型コンテキストに入れて、 その時点で存在しているものはすべて置き換えます。 &lt;code&gt;a &amp;lt;$ f&lt;/code&gt; は &lt;code&gt;const a &amp;lt;$&amp;gt; f&lt;/code&gt; と同じですが、 関数によってはより効率的な場合があります。&lt;/p&gt;
&lt;p&gt;引き続きパーサを使ってみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;λ&amp;gt; parseTest pUri &amp;quot;https:&amp;quot;
1:5:
  |
1 | https:
  |     ^
unexpected &amp;#39;s&amp;#39;
expecting &amp;#39;:&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;うーん、&lt;code&gt;https&lt;/code&gt; は有効なスキームであるべきです。 何がいけないのかわかりますか？ パーサは選択肢を一つずつ試し、 &lt;code&gt;http&lt;/code&gt; で一致し、 &lt;code&gt;https&lt;/code&gt; を試すことはありません。 解決策は、&lt;code&gt;SchemeHttp &amp;lt;$ string &#34;https&#34;&lt;/code&gt; という行を &lt;code&gt;SchemeHttp &amp;lt;$ string &#34;http&#34;&lt;/code&gt; という行の前に置くことです。 選択肢は順序が重要であることを覚えておいてください！&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pUri&lt;/code&gt; は正しく動作するようになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb28&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb28-1&#34;&gt;&lt;a href=&#34;#cb28-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;http:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-2&#34;&gt;&lt;a href=&#34;#cb28-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt; {uriScheme = SchemeHttp}&lt;/span&gt;
&lt;span id=&#34;cb28-3&#34;&gt;&lt;a href=&#34;#cb28-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-4&#34;&gt;&lt;a href=&#34;#cb28-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;https:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-5&#34;&gt;&lt;a href=&#34;#cb28-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt; {uriScheme = SchemeHttps}&lt;/span&gt;
&lt;span id=&#34;cb28-6&#34;&gt;&lt;a href=&#34;#cb28-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-7&#34;&gt;&lt;a href=&#34;#cb28-7&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-8&#34;&gt;&lt;a href=&#34;#cb28-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt; {uriScheme = SchemeMailto}&lt;/span&gt;
&lt;span id=&#34;cb28-9&#34;&gt;&lt;a href=&#34;#cb28-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-10&#34;&gt;&lt;a href=&#34;#cb28-10&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; pUri &lt;span class=&#34;st&#34;&gt;&amp;quot;foo:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-11&#34;&gt;&lt;a href=&#34;#cb28-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb28-12&#34;&gt;&lt;a href=&#34;#cb28-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-13&#34;&gt;&lt;a href=&#34;#cb28-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;foo&lt;/span&gt;:&lt;/span&gt;
&lt;span id=&#34;cb28-14&#34;&gt;&lt;a href=&#34;#cb28-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb28-15&#34;&gt;&lt;a href=&#34;#cb28-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb28-16&#34;&gt;&lt;a href=&#34;#cb28-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;, or &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;Try&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;try-によるバックトラックの制御&#34;&gt;&lt;code&gt;try&lt;/code&gt; によるバックトラックの制御&lt;/h2&gt;
&lt;p&gt;次に扱う部分は &lt;code&gt;[//[user:password@]host[:port]]&lt;/code&gt; つまり認証情報です。 オプション部分のネストが含まれるので、 これを反映するように &lt;code&gt;Uri&lt;/code&gt; 型 を更新しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb29&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb29-1&#34;&gt;&lt;a href=&#34;#cb29-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-2&#34;&gt;&lt;a href=&#34;#cb29-2&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; uriScheme    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-3&#34;&gt;&lt;a href=&#34;#cb29-3&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; uriAuthority ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-4&#34;&gt;&lt;a href=&#34;#cb29-4&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb29-5&#34;&gt;&lt;a href=&#34;#cb29-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-6&#34;&gt;&lt;a href=&#34;#cb29-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-7&#34;&gt;&lt;a href=&#34;#cb29-7&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; authUser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- (user, password)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-8&#34;&gt;&lt;a href=&#34;#cb29-8&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; authHost ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-9&#34;&gt;&lt;a href=&#34;#cb29-9&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; authPort ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb29-10&#34;&gt;&lt;a href=&#34;#cb29-10&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで、バックトラックと呼ばれる重要な概念について議論する必要があります。 バックトラックは、入力を「消費しない」処理により時間を遡る方法です。 これは主に分岐で重要です。ここに一例を示します。&lt;/p&gt;
&lt;pre class=&#34;haskel&#34;&gt;&lt;code&gt;alternatives :: Parser (Char, Char)
alternatives = foo &amp;lt;|&amp;gt; bar
  where
    foo = (,) &amp;lt;$&amp;gt; char &amp;#39;a&amp;#39; &amp;lt;*&amp;gt; char &amp;#39;b&amp;#39;
    bar = (,) &amp;lt;$&amp;gt; char &amp;#39;a&amp;#39; &amp;lt;*&amp;gt; char &amp;#39;c&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;合理的に見えますが、これを試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb31&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb31-1&#34;&gt;&lt;a href=&#34;#cb31-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; alternatives &lt;span class=&#34;st&#34;&gt;&amp;quot;ab&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-2&#34;&gt;&lt;a href=&#34;#cb31-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-3&#34;&gt;&lt;a href=&#34;#cb31-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-4&#34;&gt;&lt;a href=&#34;#cb31-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; alternatives &lt;span class=&#34;st&#34;&gt;&amp;quot;ac&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-5&#34;&gt;&lt;a href=&#34;#cb31-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:2:&lt;/span&gt;
&lt;span id=&#34;cb31-6&#34;&gt;&lt;a href=&#34;#cb31-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-7&#34;&gt;&lt;a href=&#34;#cb31-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;ac&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-8&#34;&gt;&lt;a href=&#34;#cb31-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;  ^&lt;/span&gt;
&lt;span id=&#34;cb31-9&#34;&gt;&lt;a href=&#34;#cb31-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb31-10&#34;&gt;&lt;a href=&#34;#cb31-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで起きたことは、 &lt;code&gt;foo&lt;/code&gt; の &lt;code&gt;char &#39;a&#39;&lt;/code&gt; の部分(これが最初に試行されます)の成功と、 入力ストリームからの &lt;code&gt;a&lt;/code&gt; の消費です。 &lt;code&gt;char &#39;b&#39;&lt;/code&gt; は &lt;code&gt;&#39;c&#39;&lt;/code&gt;とのマッチに失敗したため、エラーになりました。 ここで重要なことは、 &lt;code&gt;foo&lt;/code&gt; が何らかの入力を消費しているので &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; は &lt;code&gt;bar&lt;/code&gt; を試していないということです！&lt;/p&gt;
&lt;p&gt;これはパフォーマンス上の理由から行われており、 また、&lt;code&gt;foo&lt;/code&gt; の残り物を &lt;code&gt;bar&lt;/code&gt; に与えて実行するのは意味が無いです。 &lt;code&gt;bar&lt;/code&gt; は &lt;code&gt;foo&lt;/code&gt; と同じ場所の入力ストリームから実行したいです。 &lt;code&gt;megaparsec&lt;/code&gt; は &lt;code&gt;attoparsec&lt;/code&gt; や前の章のトイコンビネータとは異なり、 自動で戻りません。そのため、&lt;code&gt;try&lt;/code&gt; と呼ばれるプリミティブを使用して、 明示的にバックトラックしたいという願望を表現する必要があります。 &lt;code&gt;try p&lt;/code&gt; は、 &lt;code&gt;p&lt;/code&gt; が入力の消費に失敗した場合、 入力が消費されていないかのように失敗します (実際、パーサの状態全体をバックトラックします)。 これにより &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; で右側の選択肢を試すことが可能になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb32&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb32-1&#34;&gt;&lt;a href=&#34;#cb32-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;alternatives ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb32-2&#34;&gt;&lt;a href=&#34;#cb32-2&#34;&gt;&lt;/a&gt;alternatives &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; try foo &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; bar&lt;/span&gt;
&lt;span id=&#34;cb32-3&#34;&gt;&lt;a href=&#34;#cb32-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb32-4&#34;&gt;&lt;a href=&#34;#cb32-4&#34;&gt;&lt;/a&gt;    foo &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (,) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb32-5&#34;&gt;&lt;a href=&#34;#cb32-5&#34;&gt;&lt;/a&gt;    bar &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (,) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb33&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb33-1&#34;&gt;&lt;a href=&#34;#cb33-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; alternatives &lt;span class=&#34;st&#34;&gt;&amp;quot;ac&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb33-2&#34;&gt;&lt;a href=&#34;#cb33-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際に入力を消費するすべてのプリミティブ （&lt;code&gt;try&lt;/code&gt; などの既存のパーサの動作を変更するプリミティブもあります）は、 入力の消費という点で「アトミック」です。 これは、失敗した場合に自動的にバックトラックするため、 入力を消費して途中で失敗することはできないことを意味します。 これが、&lt;code&gt;pScheme&lt;/code&gt; の選択肢のリストが機能する理由です。 つまり、&lt;code&gt;string&lt;/code&gt; は &lt;code&gt;tokens&lt;/code&gt; の上に定義され、&lt;code&gt;tokens&lt;/code&gt; はプリミティブです。 文字列全体を &lt;code&gt;string&lt;/code&gt; でマッチさせるか、 入力ストリームをまったく消費せずに失敗します。&lt;/p&gt;
&lt;p&gt;URIのパースに戻ると、 &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; を使った &lt;code&gt;optional&lt;/code&gt; という便利なコンビネータを作ることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb34&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb34-1&#34;&gt;&lt;a href=&#34;#cb34-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;optional ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; f &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; f a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; f (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb34-2&#34;&gt;&lt;a href=&#34;#cb34-2&#34;&gt;&lt;/a&gt;optional p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; p) &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;optional p&lt;/code&gt; の &lt;code&gt;p&lt;/code&gt; でマッチすれば、結果は &lt;code&gt;Just&lt;/code&gt; になります。 そうでなければ &lt;code&gt;Nothing&lt;/code&gt; が返されます。 ちょうど欲ほしかったものです！ &lt;code&gt;optional&lt;/code&gt; を定義する必要はありません、 &lt;code&gt;Text.Megaparsec&lt;/code&gt; はこのコンビネータを再エクスポートします。 これを &lt;code&gt;pUri&lt;/code&gt; で使うことができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb35&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb35-1&#34;&gt;&lt;a href=&#34;#cb35-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-2&#34;&gt;&lt;a href=&#34;#cb35-2&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-3&#34;&gt;&lt;a href=&#34;#cb35-3&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme&lt;/span&gt;
&lt;span id=&#34;cb35-4&#34;&gt;&lt;a href=&#34;#cb35-4&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb35-5&#34;&gt;&lt;a href=&#34;#cb35-5&#34;&gt;&lt;/a&gt;  uriAuthority &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- (1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-6&#34;&gt;&lt;a href=&#34;#cb35-6&#34;&gt;&lt;/a&gt;    void (string &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb35-7&#34;&gt;&lt;a href=&#34;#cb35-7&#34;&gt;&lt;/a&gt;    authUser &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;              &lt;span class=&#34;co&#34;&gt;-- (2)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-8&#34;&gt;&lt;a href=&#34;#cb35-8&#34;&gt;&lt;/a&gt;      user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar       &lt;span class=&#34;co&#34;&gt;-- (3)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-9&#34;&gt;&lt;a href=&#34;#cb35-9&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb35-10&#34;&gt;&lt;a href=&#34;#cb35-10&#34;&gt;&lt;/a&gt;      password &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;
&lt;span id=&#34;cb35-11&#34;&gt;&lt;a href=&#34;#cb35-11&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb35-12&#34;&gt;&lt;a href=&#34;#cb35-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (user, password)&lt;/span&gt;
&lt;span id=&#34;cb35-13&#34;&gt;&lt;a href=&#34;#cb35-13&#34;&gt;&lt;/a&gt;    authHost &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb35-14&#34;&gt;&lt;a href=&#34;#cb35-14&#34;&gt;&lt;/a&gt;    authPort &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; L.decimal) &lt;span class=&#34;co&#34;&gt;-- (4)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-15&#34;&gt;&lt;a href=&#34;#cb35-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}                        &lt;span class=&#34;co&#34;&gt;-- (5)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb35-16&#34;&gt;&lt;a href=&#34;#cb35-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}                                &lt;span class=&#34;co&#34;&gt;-- (6)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ユーザー名とパスワードとして 任意の英数字の文字列を受け入れることができるようにし、 同様にホストの形式を単純化しました。&lt;/p&gt;
&lt;p&gt;以下に重要な点を挙げます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;と (2) では、 &lt;code&gt;optional&lt;/code&gt; の引数を &lt;code&gt;try&lt;/code&gt; でラップする必要があります。 これは複合パーサであり、プリミティブではないためです。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;3&#34; type=&#34;1&#34;&gt;
&lt;li&gt;&lt;code&gt;some&lt;/code&gt; は &lt;code&gt;many&lt;/code&gt; に似ていますが、その引数のパーサが少なくとも一度はマッチすることを要求します(&lt;code&gt;some p =（:) &amp;lt;$&amp;gt; p &amp;lt;*&amp;gt; many p&lt;/code&gt;)。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;4&#34; type=&#34;1&#34;&gt;
&lt;li&gt;必要でない限り &lt;code&gt;try&lt;/code&gt; を使わないでください！ここでは &lt;code&gt;char &#39;:&#39;&lt;/code&gt; が成功すると (&lt;code&gt;token&lt;/code&gt; の上に構築されているので, &lt;code&gt;try&lt;/code&gt; は必要はありません)、そのあとに必ずポートが続かなければならないことがわかっているので、&lt;code&gt;L.decimal&lt;/code&gt; により 10進数を要求します。&lt;code&gt;:&lt;/code&gt; にマッチした後は、後戻りできないので、戻る方法は必要ありません。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;5&#34; type=&#34;1&#34;&gt;
&lt;li&gt;と (6) では、&lt;code&gt;RecordWildCards&lt;/code&gt; 言語拡張を使用して &lt;code&gt;Authority&lt;/code&gt; と &lt;code&gt;Uri&lt;/code&gt; の値を作り上げます。&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GHCiで &lt;code&gt;pUri&lt;/code&gt; を試し、それが機能することを確認してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb36&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb36-1&#34;&gt;&lt;a href=&#34;#cb36-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:secret@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-2&#34;&gt;&lt;a href=&#34;#cb36-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-3&#34;&gt;&lt;a href=&#34;#cb36-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;uriScheme&lt;/span&gt; = SchemeHttps&lt;/span&gt;
&lt;span id=&#34;cb36-4&#34;&gt;&lt;a href=&#34;#cb36-4&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;ex&#34;&gt;uriAuthority&lt;/span&gt; = Just (Authority&lt;/span&gt;
&lt;span id=&#34;cb36-5&#34;&gt;&lt;a href=&#34;#cb36-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;authUser&lt;/span&gt; = Just (&lt;span class=&#34;st&#34;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb36-6&#34;&gt;&lt;a href=&#34;#cb36-6&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authHost&lt;/span&gt; = &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-7&#34;&gt;&lt;a href=&#34;#cb36-7&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authPort&lt;/span&gt; = Nothing &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt; ) &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-8&#34;&gt;&lt;a href=&#34;#cb36-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-9&#34;&gt;&lt;a href=&#34;#cb36-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:secret@example.com:123&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-10&#34;&gt;&lt;a href=&#34;#cb36-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-11&#34;&gt;&lt;a href=&#34;#cb36-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;uriScheme&lt;/span&gt; = SchemeHttps&lt;/span&gt;
&lt;span id=&#34;cb36-12&#34;&gt;&lt;a href=&#34;#cb36-12&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;ex&#34;&gt;uriAuthority&lt;/span&gt; = Just (Authority&lt;/span&gt;
&lt;span id=&#34;cb36-13&#34;&gt;&lt;a href=&#34;#cb36-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;authUser&lt;/span&gt; = Just (&lt;span class=&#34;st&#34;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;secret&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb36-14&#34;&gt;&lt;a href=&#34;#cb36-14&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authHost&lt;/span&gt; = &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-15&#34;&gt;&lt;a href=&#34;#cb36-15&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authPort&lt;/span&gt; = Just 123 &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt; ) &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-16&#34;&gt;&lt;a href=&#34;#cb36-16&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-17&#34;&gt;&lt;a href=&#34;#cb36-17&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://example.com:123&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-18&#34;&gt;&lt;a href=&#34;#cb36-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-19&#34;&gt;&lt;a href=&#34;#cb36-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;uriScheme&lt;/span&gt; = SchemeHttps&lt;/span&gt;
&lt;span id=&#34;cb36-20&#34;&gt;&lt;a href=&#34;#cb36-20&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;ex&#34;&gt;uriAuthority&lt;/span&gt; = Just (Authority&lt;/span&gt;
&lt;span id=&#34;cb36-21&#34;&gt;&lt;a href=&#34;#cb36-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;authUser&lt;/span&gt; = Nothing&lt;/span&gt;
&lt;span id=&#34;cb36-22&#34;&gt;&lt;a href=&#34;#cb36-22&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authHost&lt;/span&gt; = &lt;span class=&#34;st&#34;&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-23&#34;&gt;&lt;a href=&#34;#cb36-23&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;ex&#34;&gt;authPort&lt;/span&gt; = Just 123 &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt; ) &lt;span class=&#34;kw&#34;&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-24&#34;&gt;&lt;a href=&#34;#cb36-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-25&#34;&gt;&lt;a href=&#34;#cb36-25&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark@example.com:123&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-26&#34;&gt;&lt;a href=&#34;#cb36-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:13:&lt;/span&gt;
&lt;span id=&#34;cb36-27&#34;&gt;&lt;a href=&#34;#cb36-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-28&#34;&gt;&lt;a href=&#34;#cb36-28&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;https&lt;/span&gt;://mark@example.com:123&lt;/span&gt;
&lt;span id=&#34;cb36-29&#34;&gt;&lt;a href=&#34;#cb36-29&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;             ^&lt;/span&gt;
&lt;span id=&#34;cb36-30&#34;&gt;&lt;a href=&#34;#cb36-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb36-31&#34;&gt;&lt;a href=&#34;#cb36-31&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;, alphanumeric character, or end of input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;Debug&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パーサのデバッグ&#34;&gt;パーサのデバッグ&lt;/h2&gt;
&lt;p&gt;問題が起こっていることに気付くかもしれません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb37&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb37-1&#34;&gt;&lt;a href=&#34;#cb37-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb37-2&#34;&gt;&lt;a href=&#34;#cb37-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb37-3&#34;&gt;&lt;a href=&#34;#cb37-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb37-4&#34;&gt;&lt;a href=&#34;#cb37-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; https&lt;span class=&#34;op&#34;&gt;://&lt;/span&gt;mark&lt;span class=&#34;op&#34;&gt;:@&lt;/span&gt;example&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;com&lt;/span&gt;
&lt;span id=&#34;cb37-5&#34;&gt;&lt;a href=&#34;#cb37-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb37-6&#34;&gt;&lt;a href=&#34;#cb37-6&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb37-7&#34;&gt;&lt;a href=&#34;#cb37-7&#34;&gt;&lt;/a&gt;expecting end &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パースエラーを改善できそうです。何をすればいいでしょうか？ 何が起きているのかを知る最も簡単な方法は、 組み込みのヘルパー &lt;code&gt;dbg&lt;/code&gt; を使うことです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb38&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb38-1&#34;&gt;&lt;a href=&#34;#cb38-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;dbg ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; s, &lt;span class=&#34;dt&#34;&gt;ShowToken&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s), &lt;span class=&#34;dt&#34;&gt;ShowErrorComponent&lt;/span&gt; e, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb38-2&#34;&gt;&lt;a href=&#34;#cb38-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ^ デバッグ用のラベル&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb38-3&#34;&gt;&lt;a href=&#34;#cb38-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; e s m a   &lt;span class=&#34;co&#34;&gt;-- ^ デバッグするパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb38-4&#34;&gt;&lt;a href=&#34;#cb38-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; e s m a   &lt;span class=&#34;co&#34;&gt;-- ^ デバッグメッセージを出力するパーサ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを &lt;code&gt;pUri&lt;/code&gt; で使ってみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb39&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb39-1&#34;&gt;&lt;a href=&#34;#cb39-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb39-2&#34;&gt;&lt;a href=&#34;#cb39-2&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb39-3&#34;&gt;&lt;a href=&#34;#cb39-3&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; dbg &lt;span class=&#34;st&#34;&gt;&amp;quot;scheme&amp;quot;&lt;/span&gt; pScheme&lt;/span&gt;
&lt;span id=&#34;cb39-4&#34;&gt;&lt;a href=&#34;#cb39-4&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb39-5&#34;&gt;&lt;a href=&#34;#cb39-5&#34;&gt;&lt;/a&gt;  uriAuthority &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; dbg &lt;span class=&#34;st&#34;&gt;&amp;quot;auth&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb39-6&#34;&gt;&lt;a href=&#34;#cb39-6&#34;&gt;&lt;/a&gt;    void (string &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb39-7&#34;&gt;&lt;a href=&#34;#cb39-7&#34;&gt;&lt;/a&gt;    authUser &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; dbg &lt;span class=&#34;st&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb39-8&#34;&gt;&lt;a href=&#34;#cb39-8&#34;&gt;&lt;/a&gt;      user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;
&lt;span id=&#34;cb39-9&#34;&gt;&lt;a href=&#34;#cb39-9&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb39-10&#34;&gt;&lt;a href=&#34;#cb39-10&#34;&gt;&lt;/a&gt;      password &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;
&lt;span id=&#34;cb39-11&#34;&gt;&lt;a href=&#34;#cb39-11&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb39-12&#34;&gt;&lt;a href=&#34;#cb39-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (user, password)&lt;/span&gt;
&lt;span id=&#34;cb39-13&#34;&gt;&lt;a href=&#34;#cb39-13&#34;&gt;&lt;/a&gt;    authHost &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; dbg &lt;span class=&#34;st&#34;&gt;&amp;quot;host&amp;quot;&lt;/span&gt; (some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb39-14&#34;&gt;&lt;a href=&#34;#cb39-14&#34;&gt;&lt;/a&gt;    authPort &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; dbg &lt;span class=&#34;st&#34;&gt;&amp;quot;port&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; optional (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; L.decimal)&lt;/span&gt;
&lt;span id=&#34;cb39-15&#34;&gt;&lt;a href=&#34;#cb39-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&#34;cb39-16&#34;&gt;&lt;a href=&#34;#cb39-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それでは、その不幸な入力に対してもう一度 &lt;code&gt;pUri&lt;/code&gt; を実行してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb40&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb40-1&#34;&gt;&lt;a href=&#34;#cb40-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-2&#34;&gt;&lt;a href=&#34;#cb40-2&#34;&gt;&lt;/a&gt;scheme&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-3&#34;&gt;&lt;a href=&#34;#cb40-3&#34;&gt;&lt;/a&gt;scheme&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MATCH&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;COK&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-4&#34;&gt;&lt;a href=&#34;#cb40-4&#34;&gt;&lt;/a&gt;scheme&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VALUE&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeHttps&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-5&#34;&gt;&lt;a href=&#34;#cb40-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-6&#34;&gt;&lt;a href=&#34;#cb40-6&#34;&gt;&lt;/a&gt;user&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-7&#34;&gt;&lt;a href=&#34;#cb40-7&#34;&gt;&lt;/a&gt;user&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MATCH&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;EOK&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;EMPTY&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-8&#34;&gt;&lt;a href=&#34;#cb40-8&#34;&gt;&lt;/a&gt;user&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VALUE&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-9&#34;&gt;&lt;a href=&#34;#cb40-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-10&#34;&gt;&lt;a href=&#34;#cb40-10&#34;&gt;&lt;/a&gt;host&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-11&#34;&gt;&lt;a href=&#34;#cb40-11&#34;&gt;&lt;/a&gt;host&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MATCH&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;COK&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-12&#34;&gt;&lt;a href=&#34;#cb40-12&#34;&gt;&lt;/a&gt;host&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VALUE&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-13&#34;&gt;&lt;a href=&#34;#cb40-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-14&#34;&gt;&lt;a href=&#34;#cb40-14&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-15&#34;&gt;&lt;a href=&#34;#cb40-15&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MATCH&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;CERR&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-16&#34;&gt;&lt;a href=&#34;#cb40-16&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ERROR&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-17&#34;&gt;&lt;a href=&#34;#cb40-17&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-18&#34;&gt;&lt;a href=&#34;#cb40-18&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; unexpected &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-19&#34;&gt;&lt;a href=&#34;#cb40-19&#34;&gt;&lt;/a&gt;port&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; expecting integer&lt;/span&gt;
&lt;span id=&#34;cb40-20&#34;&gt;&lt;a href=&#34;#cb40-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-21&#34;&gt;&lt;a href=&#34;#cb40-21&#34;&gt;&lt;/a&gt;auth&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IN&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;//mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-22&#34;&gt;&lt;a href=&#34;#cb40-22&#34;&gt;&lt;/a&gt;auth&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MATCH&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;EOK&lt;/span&gt;)&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;EMPTY&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-23&#34;&gt;&lt;a href=&#34;#cb40-23&#34;&gt;&lt;/a&gt;auth&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;VALUE&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-24&#34;&gt;&lt;a href=&#34;#cb40-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-25&#34;&gt;&lt;a href=&#34;#cb40-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-26&#34;&gt;&lt;a href=&#34;#cb40-26&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-27&#34;&gt;&lt;a href=&#34;#cb40-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; https&lt;span class=&#34;op&#34;&gt;://&lt;/span&gt;mark&lt;span class=&#34;op&#34;&gt;:@&lt;/span&gt;example&lt;span class=&#34;op&#34;&gt;.&lt;/span&gt;com&lt;/span&gt;
&lt;span id=&#34;cb40-28&#34;&gt;&lt;a href=&#34;#cb40-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;       &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-29&#34;&gt;&lt;a href=&#34;#cb40-29&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb40-30&#34;&gt;&lt;a href=&#34;#cb40-30&#34;&gt;&lt;/a&gt;expecting end &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt; input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; の内部で何が起こっているのか正確にわかります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;scheme&lt;/code&gt; のマッチに成功します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;user&lt;/code&gt; は失敗します。&lt;code&gt;mark&lt;/code&gt; の所にユーザー名がありますが、&lt;code&gt;:&lt;/code&gt; の後にパスワードはありません（ここではパスワードを空にしないことを要求します）。失敗し、&lt;code&gt;try&lt;/code&gt; のおかげでバックトラックします。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;host&lt;/code&gt; は &lt;code&gt;user&lt;/code&gt; と同じ場所から開始し、入力をホスト名として解釈しようとします。これは成功し、ホスト名として &lt;code&gt;mark&lt;/code&gt; を返すことがわかります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;host&lt;/code&gt; の後にポート番号があるかもしれないので、&lt;code&gt;port&lt;/code&gt; は機会を得ます。それは &lt;code&gt;:&lt;/code&gt; を見ますが、その後に整数がないので &lt;code&gt;port&lt;/code&gt; は失敗します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;そのため、&lt;code&gt;auth&lt;/code&gt; パーサ全体が失敗します（&lt;code&gt;port&lt;/code&gt; は &lt;code&gt;auth&lt;/code&gt; の内側にあり、失敗しました）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;auth&lt;/code&gt; パーサは、何もパースできなかったため、&lt;code&gt;Nothing&lt;/code&gt;を返します。&lt;code&gt;eof&lt;/code&gt; は入力の終わりに達したことを要求しますが、そうではないので、最終的なエラーメッセージが表示されます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;何をすべきでしょうか？これは、&lt;code&gt;try&lt;/code&gt; を使用してコードの大部分を囲むと、 パースエラーが悪化する可能性がある場合の例です。 パースしたい構文をもう一度見てみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;私たちは何を探していますか？ パースのある特定の分岐にコミットできるようにするための何か。 &lt;code&gt;:&lt;/code&gt; を見たときにポート番号が続かなければならないポートのように。 注意深く見れば、二重スラッシュ&lt;code&gt;//&lt;/code&gt;が、URIに認証情報の部分があることを示す記号であることがわかります。 &lt;code&gt;//&lt;/code&gt; のマッチはアトミックパーサ（&lt;code&gt;string&lt;/code&gt;）が使われていることにより、 マッチは自動的にバックトラックするので、 &lt;code&gt;//&lt;/code&gt; にマッチした後は必ず、認証情報の部分を要求することができます。 最初の&lt;code&gt;try&lt;/code&gt;を&lt;code&gt;pUri&lt;/code&gt;から削除しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb42&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb42-1&#34;&gt;&lt;a href=&#34;#cb42-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb42-2&#34;&gt;&lt;a href=&#34;#cb42-2&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb42-3&#34;&gt;&lt;a href=&#34;#cb42-3&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme&lt;/span&gt;
&lt;span id=&#34;cb42-4&#34;&gt;&lt;a href=&#34;#cb42-4&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb42-5&#34;&gt;&lt;a href=&#34;#cb42-5&#34;&gt;&lt;/a&gt;  uriAuthority &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- この行から try を削除した&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb42-6&#34;&gt;&lt;a href=&#34;#cb42-6&#34;&gt;&lt;/a&gt;    void (string &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb42-7&#34;&gt;&lt;a href=&#34;#cb42-7&#34;&gt;&lt;/a&gt;    authUser &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb42-8&#34;&gt;&lt;a href=&#34;#cb42-8&#34;&gt;&lt;/a&gt;      user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;
&lt;span id=&#34;cb42-9&#34;&gt;&lt;a href=&#34;#cb42-9&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb42-10&#34;&gt;&lt;a href=&#34;#cb42-10&#34;&gt;&lt;/a&gt;      password &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;
&lt;span id=&#34;cb42-11&#34;&gt;&lt;a href=&#34;#cb42-11&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb42-12&#34;&gt;&lt;a href=&#34;#cb42-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (user, password)&lt;/span&gt;
&lt;span id=&#34;cb42-13&#34;&gt;&lt;a href=&#34;#cb42-13&#34;&gt;&lt;/a&gt;    authHost &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb42-14&#34;&gt;&lt;a href=&#34;#cb42-14&#34;&gt;&lt;/a&gt;    authPort &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; L.decimal)&lt;/span&gt;
&lt;span id=&#34;cb42-15&#34;&gt;&lt;a href=&#34;#cb42-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&#34;cb42-16&#34;&gt;&lt;a href=&#34;#cb42-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで、より良いパースエラーを得られるようになりました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb43&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb43-1&#34;&gt;&lt;a href=&#34;#cb43-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb43-2&#34;&gt;&lt;a href=&#34;#cb43-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:14:&lt;/span&gt;
&lt;span id=&#34;cb43-3&#34;&gt;&lt;a href=&#34;#cb43-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb43-4&#34;&gt;&lt;a href=&#34;#cb43-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;https&lt;/span&gt;://mark:@example.com&lt;/span&gt;
&lt;span id=&#34;cb43-5&#34;&gt;&lt;a href=&#34;#cb43-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;              ^&lt;/span&gt;
&lt;span id=&#34;cb43-6&#34;&gt;&lt;a href=&#34;#cb43-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb43-7&#34;&gt;&lt;a href=&#34;#cb43-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; integer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まだ少し誤解を招くようですが、まあ、それは私が選んだトリッキーな例です。 たくさんの&lt;code&gt;optional&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Label&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ラベル付けと隠蔽&#34;&gt;ラベル付けと隠蔽&lt;/h2&gt;
&lt;p&gt;時には期待されるアイテムのリストがかなり長くなるかもしれません。 認識されていないスキームを使用しようとしたときに得られるものを覚えていますか？&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb44&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb44-1&#34;&gt;&lt;a href=&#34;#cb44-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;foo://example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb44-2&#34;&gt;&lt;a href=&#34;#cb44-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb44-3&#34;&gt;&lt;a href=&#34;#cb44-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb44-4&#34;&gt;&lt;a href=&#34;#cb44-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;foo&lt;/span&gt;://example.com&lt;/span&gt;
&lt;span id=&#34;cb44-5&#34;&gt;&lt;a href=&#34;#cb44-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb44-6&#34;&gt;&lt;a href=&#34;#cb44-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo://&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb44-7&#34;&gt;&lt;a href=&#34;#cb44-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;, or &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; は、一般的に&lt;em&gt;ラベル&lt;/em&gt;と呼ばれるカスタムで、期待されるアイテムを上書きする方法を提供します。これは、&lt;code&gt;label&lt;/code&gt; プリミティブ(&lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; 演算子の形式のシノニムを持つ)を使用して行われます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb45&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb45-1&#34;&gt;&lt;a href=&#34;#cb45-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb45-2&#34;&gt;&lt;a href=&#34;#cb45-2&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb45-3&#34;&gt;&lt;a href=&#34;#cb45-3&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;valid scheme&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb45-4&#34;&gt;&lt;a href=&#34;#cb45-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- 残りの部分は同じ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb46&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb46-1&#34;&gt;&lt;a href=&#34;#cb46-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;foo://example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb46-2&#34;&gt;&lt;a href=&#34;#cb46-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb46-3&#34;&gt;&lt;a href=&#34;#cb46-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb46-4&#34;&gt;&lt;a href=&#34;#cb46-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;foo&lt;/span&gt;://example.com&lt;/span&gt;
&lt;span id=&#34;cb46-5&#34;&gt;&lt;a href=&#34;#cb46-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb46-6&#34;&gt;&lt;a href=&#34;#cb46-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo://&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb46-7&#34;&gt;&lt;a href=&#34;#cb46-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; valid scheme&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エラーメッセージを読みやすくするために、ラベルを追加します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb47&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb47-1&#34;&gt;&lt;a href=&#34;#cb47-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-2&#34;&gt;&lt;a href=&#34;#cb47-2&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-3&#34;&gt;&lt;a href=&#34;#cb47-3&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;valid scheme&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-4&#34;&gt;&lt;a href=&#34;#cb47-4&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb47-5&#34;&gt;&lt;a href=&#34;#cb47-5&#34;&gt;&lt;/a&gt;  uriAuthority &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-6&#34;&gt;&lt;a href=&#34;#cb47-6&#34;&gt;&lt;/a&gt;    void (string &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb47-7&#34;&gt;&lt;a href=&#34;#cb47-7&#34;&gt;&lt;/a&gt;    authUser &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-8&#34;&gt;&lt;a href=&#34;#cb47-8&#34;&gt;&lt;/a&gt;      user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-9&#34;&gt;&lt;a href=&#34;#cb47-9&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb47-10&#34;&gt;&lt;a href=&#34;#cb47-10&#34;&gt;&lt;/a&gt;      password &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-11&#34;&gt;&lt;a href=&#34;#cb47-11&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb47-12&#34;&gt;&lt;a href=&#34;#cb47-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (user, password)&lt;/span&gt;
&lt;span id=&#34;cb47-13&#34;&gt;&lt;a href=&#34;#cb47-13&#34;&gt;&lt;/a&gt;    authHost &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hostname&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb47-14&#34;&gt;&lt;a href=&#34;#cb47-14&#34;&gt;&lt;/a&gt;    authPort &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; label &lt;span class=&#34;st&#34;&gt;&amp;quot;port number&amp;quot;&lt;/span&gt; L.decimal)&lt;/span&gt;
&lt;span id=&#34;cb47-15&#34;&gt;&lt;a href=&#34;#cb47-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&#34;cb47-16&#34;&gt;&lt;a href=&#34;#cb47-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb48&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb48-1&#34;&gt;&lt;a href=&#34;#cb48-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pUri &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;https://mark:@example.com&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb48-2&#34;&gt;&lt;a href=&#34;#cb48-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:14:&lt;/span&gt;
&lt;span id=&#34;cb48-3&#34;&gt;&lt;a href=&#34;#cb48-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb48-4&#34;&gt;&lt;a href=&#34;#cb48-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;https&lt;/span&gt;://mark:@example.com&lt;/span&gt;
&lt;span id=&#34;cb48-5&#34;&gt;&lt;a href=&#34;#cb48-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;              ^&lt;/span&gt;
&lt;span id=&#34;cb48-6&#34;&gt;&lt;a href=&#34;#cb48-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb48-7&#34;&gt;&lt;a href=&#34;#cb48-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; port number&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もう1つのプリミティブは &lt;code&gt;hidden&lt;/code&gt; と呼ばれます。 &lt;code&gt;label&lt;/code&gt; が名前の変更であることに対し、 hiddenは単にそれらを完全に削除します。 比較しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb49&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb49-1&#34;&gt;&lt;a href=&#34;#cb49-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;many&lt;/span&gt; (char &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;eof&lt;/span&gt; :: Parser ()) &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-2&#34;&gt;&lt;a href=&#34;#cb49-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb49-3&#34;&gt;&lt;a href=&#34;#cb49-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-4&#34;&gt;&lt;a href=&#34;#cb49-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;d&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-5&#34;&gt;&lt;a href=&#34;#cb49-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb49-6&#34;&gt;&lt;a href=&#34;#cb49-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-7&#34;&gt;&lt;a href=&#34;#cb49-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, or end of input&lt;/span&gt;
&lt;span id=&#34;cb49-8&#34;&gt;&lt;a href=&#34;#cb49-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-9&#34;&gt;&lt;a href=&#34;#cb49-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;hidden&lt;/span&gt; (many (char &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;eof&lt;/span&gt; :: Parser ()) &lt;span class=&#34;st&#34;&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-10&#34;&gt;&lt;a href=&#34;#cb49-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb49-11&#34;&gt;&lt;a href=&#34;#cb49-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-12&#34;&gt;&lt;a href=&#34;#cb49-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;d&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-13&#34;&gt;&lt;a href=&#34;#cb49-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb49-14&#34;&gt;&lt;a href=&#34;#cb49-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb49-15&#34;&gt;&lt;a href=&#34;#cb49-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; or end of input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エラーメッセージのノイズを少なくすることが望ましい場合は、 &lt;code&gt;hidden&lt;/code&gt; を使用してください。 例えば、プログラミング言語をパースするときは、通常、各トークンの後に空白文字がある可能性があるため、“expecting white space” というメッセージを削除することをお勧めします。&lt;/p&gt;
&lt;p&gt;演習 : &lt;code&gt;pUri&lt;/code&gt; パーサを完成させることは読者のための課題として残されています。完成に必要なすべてのツールは説明されました。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Run&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パーサの実行&#34;&gt;パーサの実行&lt;/h2&gt;
&lt;p&gt;パーサを構築する方法を詳細に調べました。 しかし、 &lt;code&gt;parseTest&lt;/code&gt; を除いて、 それらを実行できる関数を調べていませんでした。&lt;/p&gt;
&lt;p&gt;慣習的に、あなたがプログラムしたパーサを実行するための “デフォルト”の関数は &lt;code&gt;parse&lt;/code&gt; でした。 しかし、&lt;code&gt;parse&lt;/code&gt; は実際には &lt;code&gt;runParser&lt;/code&gt; のシノニムです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb50&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb50-1&#34;&gt;&lt;a href=&#34;#cb50-1&#34;&gt;&lt;/a&gt;runParser&lt;/span&gt;
&lt;span id=&#34;cb50-2&#34;&gt;&lt;a href=&#34;#cb50-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; e s a &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb50-3&#34;&gt;&lt;a href=&#34;#cb50-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ ソースファイルの名前&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb50-4&#34;&gt;&lt;a href=&#34;#cb50-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; s          &lt;span class=&#34;co&#34;&gt;-- ^ パーサへの入力&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb50-5&#34;&gt;&lt;a href=&#34;#cb50-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseErrorBundle&lt;/span&gt; s e) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2番目の引数は、生成されたパースエラーに含まれる単なるファイル名です。 実際の入力は関数の3番目の引数として渡されるため、 &lt;code&gt;megaparsec&lt;/code&gt; はそのファイルから何も読みません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;runParser&lt;/code&gt; を使用すると、&lt;code&gt;Parsec&lt;/code&gt; モナドを実行できます。 これは、既にご存知のとおり、変換子を使わないバージョンの &lt;code&gt;ParsecT&lt;/code&gt; です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb51&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb51-1&#34;&gt;&lt;a href=&#34;#cb51-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; e s &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; e s &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;runParser&lt;/code&gt; には、&lt;code&gt;runParser&#39;&lt;/code&gt;、&lt;code&gt;runParserT&lt;/code&gt;、 および &lt;code&gt;runParserT&#39;&lt;/code&gt; の3つの変種があります。 接尾辞 &lt;code&gt;T&lt;/code&gt; の付いたバージョンは &lt;code&gt;PrasecT&lt;/code&gt; モナド変換子を実行し、 「プライム」バージョンはパーサの状態を受け取り、返します。 すべての関数を表にまとめましょう。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;引数&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;Parsec&lt;/code&gt; の実行&lt;/th&gt;
&lt;th style=&#34;text-align: left;&#34;&gt;&lt;code&gt;ParsecT&lt;/code&gt; の実行&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;入力とファイル名&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;runParser&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;runParserT&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;カスタム初期状態&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;runParser&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align: left;&#34;&gt;&lt;code&gt;runParserT&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;タブの幅を標準以外の値(デフォルトの値は8)に設定したい場合など、 カスタム初期状態が必要な場合があります。 例として、&lt;code&gt;runParser&#39;&lt;/code&gt; の型シグネチャはこのようになっています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb52&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb52-1&#34;&gt;&lt;a href=&#34;#cb52-1&#34;&gt;&lt;/a&gt;runParser&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb52-2&#34;&gt;&lt;a href=&#34;#cb52-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; e s a &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb52-3&#34;&gt;&lt;a href=&#34;#cb52-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s    &lt;span class=&#34;co&#34;&gt;-- ^ 初期状態&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb52-4&#34;&gt;&lt;a href=&#34;#cb52-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s, &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseErrorBundle&lt;/span&gt; s e) a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;手動で状態を変更することはライブラリの高度な使用法であり、 ここでは説明しません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ParseErrorBundle&lt;/code&gt; とは何かについて疑問に思う場合は、 &lt;a href=&#34;#Error&#34;&gt;この後の節のいずれか&lt;/a&gt;で説明します。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;MonadParsec&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;monadparsec-型クラス&#34;&gt;&lt;code&gt;MonadParsec&lt;/code&gt; 型クラス&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; のすべてのツールは、 &lt;code&gt;MonadParsec&lt;/code&gt; 型クラスの任意のインスタンスと連携します。 型クラスは、プリミティブコンビネータ、 つまりすべての &lt;code&gt;megaparsec&lt;/code&gt; のパーサの基本的な構成要素、 他のコンビネータでは表現できないコンビネータを抽象化します。&lt;/p&gt;
&lt;p&gt;プリミティブコンビネータを型クラスに持つことで、 &lt;code&gt;megaarsec&lt;/code&gt; の &lt;code&gt;ParsecT&lt;/code&gt; の主要なモナド変換子を、 MTL系のよく知られている変換子にラップして、 モナドスタックのレイヤー間でさまざまな相互作用を実現することができます。 動機をよりよく理解するために、 モナドスタック内のレイヤーの順序が重要であることを思い出してください。 このように &lt;code&gt;ReaderT&lt;/code&gt; と &lt;code&gt;State&lt;/code&gt; を組み合わせると、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb53&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb53-1&#34;&gt;&lt;a href=&#34;#cb53-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStack&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyContext&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyState&lt;/span&gt;) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;外側のレイヤー &lt;code&gt;ReaderT&lt;/code&gt; はその下のレイヤー &lt;code&gt;m&lt;/code&gt; の内部構造を検査できません。 &lt;code&gt;ReaderT&lt;/code&gt; の &lt;code&gt;Monad&lt;/code&gt; インスタンスはバインディングの戦略を記述しています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb54&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb54-1&#34;&gt;&lt;a href=&#34;#cb54-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; r m a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; runReaderT ::&lt;/span&gt; r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a }&lt;/span&gt;
&lt;span id=&#34;cb54-2&#34;&gt;&lt;a href=&#34;#cb54-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb54-3&#34;&gt;&lt;a href=&#34;#cb54-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; r m) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb54-4&#34;&gt;&lt;a href=&#34;#cb54-4&#34;&gt;&lt;/a&gt;  m &lt;span class=&#34;op&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; k &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb54-5&#34;&gt;&lt;a href=&#34;#cb54-5&#34;&gt;&lt;/a&gt;    a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; runReaderT m r&lt;/span&gt;
&lt;span id=&#34;cb54-6&#34;&gt;&lt;a href=&#34;#cb54-6&#34;&gt;&lt;/a&gt;    runReaderT (k a) r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実際、&lt;code&gt;m&lt;/code&gt; について私たちが知っている唯一のことは、 それが &lt;code&gt;Monad&lt;/code&gt;のインスタンスであり、 したがって &lt;code&gt;m&lt;/code&gt; の状態はモナディックバインドを介してのみ &lt;code&gt;k&lt;/code&gt; に渡すことができるということです。 とにかくそれが &lt;code&gt;ReaderT&lt;/code&gt; の &lt;code&gt;(&amp;gt;&amp;gt;=)&lt;/code&gt; から私たちが通常欲しいものです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Alternative&lt;/code&gt; 型クラスの &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; メソッドは異なった働きをします。 それは状態を「分割」し、パーサの2つの分岐はもう接触しません。 そのため、最初の分岐が破棄されるとその状態への変更も破棄され、 2番目の分岐に影響を与えることはできないという意味で バックトラックした状態になります (最初の分岐が失敗したときの状態を「バックトラック」します。)。&lt;/p&gt;
&lt;p&gt;説明のために、ReaderTのAlternativeの定義を見てみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb55&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb55-1&#34;&gt;&lt;a href=&#34;#cb55-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; r m) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb55-2&#34;&gt;&lt;a href=&#34;#cb55-2&#34;&gt;&lt;/a&gt;  empty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; liftReaderT empty&lt;/span&gt;
&lt;span id=&#34;cb55-3&#34;&gt;&lt;a href=&#34;#cb55-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; m &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ReaderT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \r &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m r &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; n r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ReaderT&lt;/code&gt; は「ステートレス」なモナド変換子であり、 (何を持っていない) &lt;code&gt;ReaderT&lt;/code&gt; 自体に関連するモナドの状態を組み合わせる必要なしに(ここで &lt;code&gt;m&lt;/code&gt; の &lt;code&gt;Alternative&lt;/code&gt; インスタンスが役に立ちます。) 実際の作業を内部のモナドに委任するのは簡単なので、 これはすべて非常に素晴らしいことです。&lt;/p&gt;
&lt;p&gt;それでは、Stateを見てみましょう。 &lt;code&gt;State s a&lt;/code&gt; は &lt;code&gt;StateT s Identity a&lt;/code&gt; の単なるシノニムなので、 &lt;code&gt;StateT s m&lt;/code&gt; 自体の &lt;code&gt;Alternative&lt;/code&gt; インスタンスを見てください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb56&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb56-1&#34;&gt;&lt;a href=&#34;#cb56-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Functor&lt;/span&gt; m, &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; m) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; s m) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb56-2&#34;&gt;&lt;a href=&#34;#cb56-2&#34;&gt;&lt;/a&gt;  empty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \_ &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; empty&lt;/span&gt;
&lt;span id=&#34;cb56-3&#34;&gt;&lt;a href=&#34;#cb56-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; m &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m s &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; n s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここでは、reader のコンテキスト &lt;code&gt;r&lt;/code&gt; の共有を見たように、 状態 &lt;code&gt;s&lt;/code&gt; の分割を見ることができます。 ただし、&lt;code&gt;m s&lt;/code&gt; と &lt;code&gt;n s&lt;/code&gt; の式はステートフルな結果を生成するため、 モナディック値と一緒に、新しい状態をタプルで返すという違いがあります。 ここでは、&lt;code&gt;m s&lt;/code&gt; か &lt;code&gt;n s&lt;/code&gt; のどちらかで進み、 自然にバックトラックを達成します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ParsecT&lt;/code&gt; はどうですか？ &lt;code&gt;State&lt;/code&gt; を &lt;code&gt;ParsecT&lt;/code&gt; の中に次のように置くことを考えてみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb57&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb57-1&#34;&gt;&lt;a href=&#34;#cb57-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStack&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyState&lt;/span&gt;) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ParsecT&lt;/code&gt; は &lt;code&gt;ReaderT&lt;/code&gt; よりも複雑で、&lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt;の実装にはもっと多くのことが必要です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;パーサ自体の状態管理&lt;/li&gt;
&lt;li&gt;起こるべき（適切な）パースエラーのマージ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ParsecT&lt;/code&gt; の &lt;code&gt;Alternative&lt;/code&gt; のインスタンスへの&lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt;の実装は、 その基盤となる &lt;code&gt;State MyState&lt;/code&gt; モナドの &lt;code&gt;Alternative&lt;/code&gt;インスタンスに その作業を委任することができないので、&lt;code&gt;MyState&lt;/code&gt;の分割は発生せず、 バックトラックはありません。&lt;/p&gt;
&lt;p&gt;例を挙げて説明しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb58&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb58-1&#34;&gt;&lt;a href=&#34;#cb58-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-2&#34;&gt;&lt;a href=&#34;#cb58-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-3&#34;&gt;&lt;a href=&#34;#cb58-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-4&#34;&gt;&lt;a href=&#34;#cb58-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-5&#34;&gt;&lt;a href=&#34;#cb58-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-6&#34;&gt;&lt;a href=&#34;#cb58-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad.State.Strict&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-7&#34;&gt;&lt;a href=&#34;#cb58-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb58-8&#34;&gt;&lt;a href=&#34;#cb58-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-9&#34;&gt;&lt;a href=&#34;#cb58-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb58-10&#34;&gt;&lt;a href=&#34;#cb58-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-11&#34;&gt;&lt;a href=&#34;#cb58-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb58-12&#34;&gt;&lt;a href=&#34;#cb58-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-13&#34;&gt;&lt;a href=&#34;#cb58-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parser0 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-14&#34;&gt;&lt;a href=&#34;#cb58-14&#34;&gt;&lt;/a&gt;parser0 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb58-15&#34;&gt;&lt;a href=&#34;#cb58-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-16&#34;&gt;&lt;a href=&#34;#cb58-16&#34;&gt;&lt;/a&gt;    a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch A&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-17&#34;&gt;&lt;a href=&#34;#cb58-17&#34;&gt;&lt;/a&gt;    b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; get   &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch B&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-18&#34;&gt;&lt;a href=&#34;#cb58-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-19&#34;&gt;&lt;a href=&#34;#cb58-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parser1 ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-20&#34;&gt;&lt;a href=&#34;#cb58-20&#34;&gt;&lt;/a&gt;parser1 &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb58-21&#34;&gt;&lt;a href=&#34;#cb58-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-22&#34;&gt;&lt;a href=&#34;#cb58-22&#34;&gt;&lt;/a&gt;    a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch A&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; empty&lt;/span&gt;
&lt;span id=&#34;cb58-23&#34;&gt;&lt;a href=&#34;#cb58-23&#34;&gt;&lt;/a&gt;    b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; get   &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch B&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-24&#34;&gt;&lt;a href=&#34;#cb58-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-25&#34;&gt;&lt;a href=&#34;#cb58-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb58-26&#34;&gt;&lt;a href=&#34;#cb58-26&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-27&#34;&gt;&lt;a href=&#34;#cb58-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; run p          &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runState (runParserT p &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;) &lt;span class=&#34;st&#34;&gt;&amp;quot;initial&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-28&#34;&gt;&lt;a href=&#34;#cb58-28&#34;&gt;&lt;/a&gt;      (&lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; a0, s0) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; run parser0&lt;/span&gt;
&lt;span id=&#34;cb58-29&#34;&gt;&lt;a href=&#34;#cb58-29&#34;&gt;&lt;/a&gt;      (&lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; a1, s1) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; run parser1&lt;/span&gt;
&lt;span id=&#34;cb58-30&#34;&gt;&lt;a href=&#34;#cb58-30&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-31&#34;&gt;&lt;a href=&#34;#cb58-31&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;Parser 0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-32&#34;&gt;&lt;a href=&#34;#cb58-32&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Result:      &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; a0)&lt;/span&gt;
&lt;span id=&#34;cb58-33&#34;&gt;&lt;a href=&#34;#cb58-33&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Final state: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; s0)&lt;/span&gt;
&lt;span id=&#34;cb58-34&#34;&gt;&lt;a href=&#34;#cb58-34&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-35&#34;&gt;&lt;a href=&#34;#cb58-35&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;Parser 1&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb58-36&#34;&gt;&lt;a href=&#34;#cb58-36&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Result:      &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; a1)&lt;/span&gt;
&lt;span id=&#34;cb58-37&#34;&gt;&lt;a href=&#34;#cb58-37&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Final state: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; s1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これがプログラムを実行した結果です。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parser 0
Result:      &amp;quot;foo&amp;quot;
Final state: &amp;quot;branch A&amp;quot;
Parser 1
Result:      &amp;quot;branch A&amp;quot;
Final state: &amp;quot;branch B&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;parser0&lt;/code&gt; を使うと、分岐 &lt;code&gt;b&lt;/code&gt; が試行されていないことがわかります。 しかしparser1では、&lt;code&gt;empty&lt;/code&gt; によって失敗し、 成功したのは分岐 &lt;code&gt;b&lt;/code&gt; であるにもかかわらず、 最終結果（&lt;code&gt;get&lt;/code&gt; によって返される値）が分岐 &lt;code&gt;a&lt;/code&gt;から得られることは明らかです。 (パーサの文脈では &lt;code&gt;empty&lt;/code&gt; は 「即座に失敗し、何が起こったのかについての情報がない」 という意味です。) バックトラックは発生しません。&lt;/p&gt;
&lt;p&gt;パーサーでカスタム状態をバックトラックしたい場合はどうしますか？ &lt;code&gt;ParsecT&lt;/code&gt; を &lt;code&gt;StateT&lt;/code&gt; 内にラップすることを許可するならば、それを提供することができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb60&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb60-1&#34;&gt;&lt;a href=&#34;#cb60-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStack&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyState&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt;) a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;MyStack&lt;/code&gt; で &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; を使用すると、 使用されるインスタンスは &lt;code&gt;StateT&lt;/code&gt; のインスタンスになります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb61&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb61-1&#34;&gt;&lt;a href=&#34;#cb61-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; m &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; n &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \s &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m s &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; n s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは状態をバックトラックさせ、 それから残りの作業をその内部モナド&lt;code&gt;ParsecT&lt;/code&gt; の &lt;code&gt;Alternative&lt;/code&gt; インスタンスに委任します。 この動作はまさに私たちが望むものです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb62&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb62-1&#34;&gt;&lt;a href=&#34;#cb62-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-2&#34;&gt;&lt;a href=&#34;#cb62-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-3&#34;&gt;&lt;a href=&#34;#cb62-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-4&#34;&gt;&lt;a href=&#34;#cb62-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-5&#34;&gt;&lt;a href=&#34;#cb62-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-6&#34;&gt;&lt;a href=&#34;#cb62-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad.Identity&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-7&#34;&gt;&lt;a href=&#34;#cb62-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad.State.Strict&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-8&#34;&gt;&lt;a href=&#34;#cb62-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb62-9&#34;&gt;&lt;a href=&#34;#cb62-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-10&#34;&gt;&lt;a href=&#34;#cb62-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb62-11&#34;&gt;&lt;a href=&#34;#cb62-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-12&#34;&gt;&lt;a href=&#34;#cb62-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Identity&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb62-13&#34;&gt;&lt;a href=&#34;#cb62-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-14&#34;&gt;&lt;a href=&#34;#cb62-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-15&#34;&gt;&lt;a href=&#34;#cb62-15&#34;&gt;&lt;/a&gt;parser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb62-16&#34;&gt;&lt;a href=&#34;#cb62-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-17&#34;&gt;&lt;a href=&#34;#cb62-17&#34;&gt;&lt;/a&gt;    a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch A&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; empty&lt;/span&gt;
&lt;span id=&#34;cb62-18&#34;&gt;&lt;a href=&#34;#cb62-18&#34;&gt;&lt;/a&gt;    b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; get   &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; put &lt;span class=&#34;st&#34;&gt;&amp;quot;branch B&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-19&#34;&gt;&lt;a href=&#34;#cb62-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-20&#34;&gt;&lt;a href=&#34;#cb62-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb62-21&#34;&gt;&lt;a href=&#34;#cb62-21&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-22&#34;&gt;&lt;a href=&#34;#cb62-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; p            &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runStateT parser &lt;span class=&#34;st&#34;&gt;&amp;quot;initial&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-23&#34;&gt;&lt;a href=&#34;#cb62-23&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; (a, s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; runParser p &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb62-24&#34;&gt;&lt;a href=&#34;#cb62-24&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Result:      &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb62-25&#34;&gt;&lt;a href=&#34;#cb62-25&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;Final state: &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; s)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;プログラムは次のように出力します。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Result:      &amp;quot;initial&amp;quot;
Final state: &amp;quot;branch B&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このアプローチを実行可能にするために、 &lt;code&gt;StateT&lt;/code&gt; はプリミティブパーサのセット全体をサポートするべきであり、 そうすることで &lt;code&gt;ParsecT&lt;/code&gt; と同じようにそれを扱うことができます。 言い換えれば、 内部モナドが(MTLの)&lt;code&gt;MonadWriter&lt;/code&gt;のインスタンスである場合は &lt;code&gt;MonadState&lt;/code&gt; だけではなく、&lt;code&gt;MonadWriter&lt;/code&gt;も &lt;code&gt;MonadParsec&lt;/code&gt;のインスタンスである必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb64&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb64-1&#34;&gt;&lt;a href=&#34;#cb64-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadWriter&lt;/span&gt; w m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadWriter&lt;/span&gt; w (&lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; s m) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確かに、&lt;code&gt;MonadParsec&lt;/code&gt; の内部インスタンスから &lt;code&gt;StateT&lt;/code&gt; に プリミティブを持ち上げることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb65&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb65-1&#34;&gt;&lt;a href=&#34;#cb65-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s (&lt;span class=&#34;dt&#34;&gt;StateT&lt;/span&gt; st m) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt; …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt;は MTL のすべてのモナド変換子に対して &lt;code&gt;MonadParsec&lt;/code&gt; のインスタンスを定義しているので、 ユーザーは変換子を &lt;code&gt;ParsecT&lt;/code&gt; の内側に挿入したり、 それらの変換子で &lt;code&gt;ParsecT&lt;/code&gt; をラップしたりして、 モナドスタックの層間で異なる種類の相互作用を実現できます。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Lexing&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;字句解析&#34;&gt;字句解析&lt;/h2&gt;
&lt;p&gt;字句解析は、入力ストリームを整数、キーワード、シンボルなどのトークン のストリームに変換するプロセスです。 これらは、生の入力を直接パースするよりもパースが容易であるか、 またはパーサジェネレータで生成されたパーサへの入力として期待されます。 字句解析は、&lt;code&gt;alex&lt;/code&gt;などの外部ツールを使用して別のパスで実行できますが、 &lt;code&gt;megaparsec&lt;/code&gt;はパーサの一部として、シームレスに字句解析プログラムを書くことを簡単にする関数も提供します。&lt;/p&gt;
&lt;p&gt;文字ストリーム用の &lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; と バイトストリーム用の &lt;code&gt;Text.Megaparsec.Byte.Lexer&lt;/code&gt; の 2つの字句解析モジュールがあります。 正格な &lt;code&gt;Text&lt;/code&gt; を入力ストリームとして扱うので &lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; を使いますが、 &lt;code&gt;ByteStrings&lt;/code&gt; を使いたい場合はほとんどの関数は &lt;code&gt;Text.Megaparsec.Byte.Lexer&lt;/code&gt; にも反映されます。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;White&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;空白&#34;&gt;空白&lt;/h2&gt;
&lt;p&gt;最初に取り上げる必要があるトピックは、空白の扱いです。 すべてのトークンの前またはすべてのトークンの後に、 一貫した方法で空白を消費することが役立ちます。 Megaparsec の字句解析モジュールは、 「トークンの前に空白を入れず、トークンの後にすべての空白を消費する」 という戦略に従います。&lt;/p&gt;
&lt;p&gt;空白を消費するには、&lt;em&gt;スペースコンシューマ&lt;/em&gt; と呼ばれる特別なパーサが必要です。 &lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; モジュールは、 一般的なスペースコンシューマを構築するためのヘルパーを提供します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb66&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb66-1&#34;&gt;&lt;a href=&#34;#cb66-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;space ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb66-2&#34;&gt;&lt;a href=&#34;#cb66-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m () &lt;span class=&#34;co&#34;&gt;-- ^ 空の入力を受け入れない空白文字のパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb66-3&#34;&gt;&lt;a href=&#34;#cb66-3&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;co&#34;&gt;-- (e.g. &amp;#39;space1&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb66-4&#34;&gt;&lt;a href=&#34;#cb66-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m () &lt;span class=&#34;co&#34;&gt;-- ^ 行コメントのパーサ (e.g. &amp;#39;skipLineComment&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb66-5&#34;&gt;&lt;a href=&#34;#cb66-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m () &lt;span class=&#34;co&#34;&gt;-- ^ ブロックコメントのパーサ (e.g. &amp;#39;skipBlockComment&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb66-6&#34;&gt;&lt;a href=&#34;#cb66-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;space&lt;/code&gt; 関数のドキュメンテーションはそれ自体で非常に包括的ですが、 例を挙げて補足しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb67&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb67-1&#34;&gt;&lt;a href=&#34;#cb67-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-2&#34;&gt;&lt;a href=&#34;#cb67-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-3&#34;&gt;&lt;a href=&#34;#cb67-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-4&#34;&gt;&lt;a href=&#34;#cb67-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-5&#34;&gt;&lt;a href=&#34;#cb67-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb67-6&#34;&gt;&lt;a href=&#34;#cb67-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-7&#34;&gt;&lt;a href=&#34;#cb67-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-8&#34;&gt;&lt;a href=&#34;#cb67-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-9&#34;&gt;&lt;a href=&#34;#cb67-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- (1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-10&#34;&gt;&lt;a href=&#34;#cb67-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-11&#34;&gt;&lt;a href=&#34;#cb67-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-12&#34;&gt;&lt;a href=&#34;#cb67-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-13&#34;&gt;&lt;a href=&#34;#cb67-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;sc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb67-14&#34;&gt;&lt;a href=&#34;#cb67-14&#34;&gt;&lt;/a&gt;sc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.space&lt;/span&gt;
&lt;span id=&#34;cb67-15&#34;&gt;&lt;a href=&#34;#cb67-15&#34;&gt;&lt;/a&gt;  space1                         &lt;span class=&#34;co&#34;&gt;-- (2)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-16&#34;&gt;&lt;a href=&#34;#cb67-16&#34;&gt;&lt;/a&gt;  (L.skipLineComment &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)       &lt;span class=&#34;co&#34;&gt;-- (3)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb67-17&#34;&gt;&lt;a href=&#34;#cb67-17&#34;&gt;&lt;/a&gt;  (L.skipBlockComment &lt;span class=&#34;st&#34;&gt;&amp;quot;/*&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*/&amp;quot;&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- (4)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いくつかのメモ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt;は、修飾付きでインポートされることを意図されています。なぜなら、Text.Megaparsec.Charの&lt;code&gt;space&lt;/code&gt;のように衝突する名前を含んでいるからです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;L.space&lt;/code&gt; の最初の引数は空白を拾うために使用されることになっているパーサであるべきです。重要な点は、&lt;code&gt;L.space&lt;/code&gt;が無限ループに入ってしまうので、空の入力を受け入れてはいけないということです。&lt;code&gt;space1&lt;/code&gt;は、要件を完全に満たす &lt;code&gt;Text.Megaparsec.Char&lt;/code&gt; のパーサです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;L.space&lt;/code&gt; の2番目の引数は、行コメント、すなわち、与えられたトークンのシーケンスで始まり行の終わりで終わるコメントをスキップする方法を定義します。&lt;code&gt;skipLineComment&lt;/code&gt; ヘルパーを使用すると、行コメント用の補助パーサを簡単に作成できます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;L.space&lt;/code&gt; の3番目の引数は、ブロックコメント、つまりトークンの開始シーケンスと終了シーケンスの間のすべてのものをを受け取る方法を定義します。&lt;code&gt;skipBlockComment&lt;/code&gt; ヘルパーは、ネストされていないブロックコメントを扱うことができます。ネストされたブロックコメントをサポートする場合は、代わりに &lt;code&gt;skipBlockCommentNested&lt;/code&gt; を使用してください。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;操作的には、&lt;code&gt;L.space&lt;/code&gt; は3つすべてのパーサを適用できなくなるまで、順番に試行します。つまり、空白がすべて消費されたことになります。 これを知っていれば、文法にブロックコメントや行コメントが含まれていない場合は、&lt;code&gt;L.space&lt;/code&gt;の2番目または3番目の引数として&lt;code&gt;empty&lt;/code&gt;を渡すことができます。 &lt;code&gt;(&amp;lt;|&amp;gt;)&lt;/code&gt; の単位元である &lt;code&gt;empty&lt;/code&gt; は、&lt;code&gt;L.space&lt;/code&gt; が次の空白要素のためにパーサを試みるようにします。まさに望んでいたことです。&lt;/p&gt;
&lt;p&gt;スペースコンシューマ &lt;code&gt;sc&lt;/code&gt; を持っているなら、 さまざまな空白関連のヘルパーを定義できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb68&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb68-1&#34;&gt;&lt;a href=&#34;#cb68-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lexeme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb68-2&#34;&gt;&lt;a href=&#34;#cb68-2&#34;&gt;&lt;/a&gt;lexeme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.lexeme sc&lt;/span&gt;
&lt;span id=&#34;cb68-3&#34;&gt;&lt;a href=&#34;#cb68-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb68-4&#34;&gt;&lt;a href=&#34;#cb68-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;symbol ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb68-5&#34;&gt;&lt;a href=&#34;#cb68-5&#34;&gt;&lt;/a&gt;symbol &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.symbol sc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;lexeme&lt;/code&gt; は、供給されたスペースコンシューマを使用してすべての末尾の空白を取る、語彙素のラッパーです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;symbol&lt;/code&gt; は内部で &lt;code&gt;string&lt;/code&gt; を使って与えられたテキストにマッチさせ、そして同様にすべての末尾の空白を拾うパーサです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私たちはすぐにそれがすべて一緒に動作する方法を見ますが、 最初に &lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; からさらに2,3のヘルパーを 導入する必要があります。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Chara&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;文字と文字列リテラル&#34;&gt;文字と文字列リテラル&lt;/h2&gt;
&lt;p&gt;エスケープ規則はさまざまなので、 文字リテラルおよび文字列リテラルのパースは難しい場合があります。 簡単にするために、&lt;code&gt;megaparsec&lt;/code&gt; は &lt;code&gt;charLiteral&lt;/code&gt; パーサを提供します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb69&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb69-1&#34;&gt;&lt;a href=&#34;#cb69-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;charLiteral ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;charLiteral&lt;/code&gt; の仕事は、Haskellレポートに記述されている文字リテラルの構文に従ってエスケープされる可能性がある単一の文字をパースすることです。 ただし、次の2つの理由から、リテラルを囲む引用符はパースされません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ユーザーは文字リテラルの引用方法を制御できる&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;そのため、charLiteralを使用して文字列リテラルもパースできる&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;charLiteral&lt;/code&gt;の上に構築されたパーサの例をいくつか示します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb70&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb70-1&#34;&gt;&lt;a href=&#34;#cb70-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;charLiteral ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb70-2&#34;&gt;&lt;a href=&#34;#cb70-2&#34;&gt;&lt;/a&gt;charLiteral &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; between (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;) (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;#39;&amp;#39;&lt;/span&gt;) L.charLiteral&lt;/span&gt;
&lt;span id=&#34;cb70-3&#34;&gt;&lt;a href=&#34;#cb70-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb70-4&#34;&gt;&lt;a href=&#34;#cb70-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;stringLiteral ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb70-5&#34;&gt;&lt;a href=&#34;#cb70-5&#34;&gt;&lt;/a&gt;stringLiteral &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; manyTill L.charLiteral (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;\&amp;quot;&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;L.charLiteral&lt;/code&gt; を文字リテラルのパーサに変えるには、囲む引用符を追加するだけです。ここではHaskellの構文に従い、シングルクオートを使います。&lt;code&gt;between&lt;/code&gt;コンビネータは、単純に&lt;code&gt;between open close p = open *&amp;gt; p &amp;lt;* close&lt;/code&gt;ように定義されます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;stringLiteral&lt;/code&gt;はダブルクオートで囲まれた文字列リテラル内の個々の文字をパースするために &lt;code&gt;L.charLiteral&lt;/code&gt; を使用します。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2番目の関数も、&lt;code&gt;manyTill&lt;/code&gt; コンビネータを使用しているため興味深いです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb71&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb71-1&#34;&gt;&lt;a href=&#34;#cb71-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;manyTill ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Alternative&lt;/span&gt; m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m end &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m [a]&lt;/span&gt;
&lt;span id=&#34;cb71-2&#34;&gt;&lt;a href=&#34;#cb71-2&#34;&gt;&lt;/a&gt;manyTill p end &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; go&lt;/span&gt;
&lt;span id=&#34;cb71-3&#34;&gt;&lt;a href=&#34;#cb71-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb71-4&#34;&gt;&lt;a href=&#34;#cb71-4&#34;&gt;&lt;/a&gt;    go &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; ([] &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; end) &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; p &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; go)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;manyTill&lt;/code&gt; は繰り返しごとにパーサ &lt;code&gt;end&lt;/code&gt; を適用しようとし、 失敗するとパーサ &lt;code&gt;p&lt;/code&gt; を実行して &lt;code&gt;p&lt;/code&gt; の結果をリストに蓄積します。&lt;/p&gt;
&lt;p&gt;少なくとも1つのアイテムが存在することを要求する &lt;code&gt;someTill&lt;/code&gt; もあります。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Numbers&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;数字&#34;&gt;数字&lt;/h2&gt;
&lt;p&gt;最後に、非常に一般的なニーズは数値をパースすることです。 整数の場合、10進数、8進数、および16進数の表現で 値をパースできる3つのヘルパーがあります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb72&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb72-1&#34;&gt;&lt;a href=&#34;#cb72-1&#34;&gt;&lt;/a&gt;decimal, octal, hexadecimal&lt;/span&gt;
&lt;span id=&#34;cb72-2&#34;&gt;&lt;a href=&#34;#cb72-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それらを使うのは簡単です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb73&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb73-1&#34;&gt;&lt;a href=&#34;#cb73-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;integer ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb73-2&#34;&gt;&lt;a href=&#34;#cb73-2&#34;&gt;&lt;/a&gt;integer &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lexeme L.decimal&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb74&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb74-1&#34;&gt;&lt;a href=&#34;#cb74-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (integer &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;123  &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-2&#34;&gt;&lt;a href=&#34;#cb74-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;123&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-3&#34;&gt;&lt;a href=&#34;#cb74-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-4&#34;&gt;&lt;a href=&#34;#cb74-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (integer &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;12a  &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-5&#34;&gt;&lt;a href=&#34;#cb74-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:3:&lt;/span&gt;
&lt;span id=&#34;cb74-6&#34;&gt;&lt;a href=&#34;#cb74-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-7&#34;&gt;&lt;a href=&#34;#cb74-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;12a&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-8&#34;&gt;&lt;a href=&#34;#cb74-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   ^&lt;/span&gt;
&lt;span id=&#34;cb74-9&#34;&gt;&lt;a href=&#34;#cb74-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb74-10&#34;&gt;&lt;a href=&#34;#cb74-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; end of input or the rest of integer&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;scientific&lt;/code&gt; は整数と小数の文法を受理し、 &lt;code&gt;float&lt;/code&gt; は小数の文法のみ受理します。 &lt;code&gt;scientific&lt;/code&gt; は&lt;code&gt;scientific&lt;/code&gt;パッケージの &lt;code&gt;Scientific&lt;/code&gt;型を返しますが、 &lt;code&gt;float&lt;/code&gt; はその結果の型が多相的であり、 &lt;code&gt;RealFloat&lt;/code&gt; の任意のインスタンスを返すことができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb75&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb75-1&#34;&gt;&lt;a href=&#34;#cb75-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;scientific ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)              &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m &lt;span class=&#34;dt&#34;&gt;Scientific&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb75-2&#34;&gt;&lt;a href=&#34;#cb75-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;float      ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;RealFloat&lt;/span&gt; a) &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb76&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb76-1&#34;&gt;&lt;a href=&#34;#cb76-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;float ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb76-2&#34;&gt;&lt;a href=&#34;#cb76-2&#34;&gt;&lt;/a&gt;float &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lexeme L.float&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb77&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb77-1&#34;&gt;&lt;a href=&#34;#cb77-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (float &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-2&#34;&gt;&lt;a href=&#34;#cb77-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:4:&lt;/span&gt;
&lt;span id=&#34;cb77-3&#34;&gt;&lt;a href=&#34;#cb77-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-4&#34;&gt;&lt;a href=&#34;#cb77-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;123&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-5&#34;&gt;&lt;a href=&#34;#cb77-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;    ^&lt;/span&gt;
&lt;span id=&#34;cb77-6&#34;&gt;&lt;a href=&#34;#cb77-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb77-7&#34;&gt;&lt;a href=&#34;#cb77-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, or digit&lt;/span&gt;
&lt;span id=&#34;cb77-8&#34;&gt;&lt;a href=&#34;#cb77-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-9&#34;&gt;&lt;a href=&#34;#cb77-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (float &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;123.45&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-10&#34;&gt;&lt;a href=&#34;#cb77-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;123.45&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-11&#34;&gt;&lt;a href=&#34;#cb77-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-12&#34;&gt;&lt;a href=&#34;#cb77-12&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (float &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;123d&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-13&#34;&gt;&lt;a href=&#34;#cb77-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:4:&lt;/span&gt;
&lt;span id=&#34;cb77-14&#34;&gt;&lt;a href=&#34;#cb77-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-15&#34;&gt;&lt;a href=&#34;#cb77-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;123d&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-16&#34;&gt;&lt;a href=&#34;#cb77-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;    ^&lt;/span&gt;
&lt;span id=&#34;cb77-17&#34;&gt;&lt;a href=&#34;#cb77-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb77-18&#34;&gt;&lt;a href=&#34;#cb77-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;, &lt;span class=&#34;st&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;, or digit&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらすべてのパーサは符号付き数値をパースしないことに注意してください。 符号付き数値用のパーサを作成するには、 既存のパーサを &lt;code&gt;signed&lt;/code&gt; コンビネータでラップする必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb78&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb78-1&#34;&gt;&lt;a href=&#34;#cb78-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;signedInteger ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Integer&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb78-2&#34;&gt;&lt;a href=&#34;#cb78-2&#34;&gt;&lt;/a&gt;signedInteger &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.signed sc integer&lt;/span&gt;
&lt;span id=&#34;cb78-3&#34;&gt;&lt;a href=&#34;#cb78-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb78-4&#34;&gt;&lt;a href=&#34;#cb78-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;signedFloat ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Double&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb78-5&#34;&gt;&lt;a href=&#34;#cb78-5&#34;&gt;&lt;/a&gt;signedFloat &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.signed sc float&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;signed&lt;/code&gt; の最初の引数(スペースコンシューマ)は、符号と実際の数字の間の空白の消費を制御します。スペースを入れたくない場合は、代わりに&lt;code&gt;return ()&lt;/code&gt;を渡してください。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;lookAhead&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;notfollowedby-と-lookahead&#34;&gt;&lt;code&gt;notFollowedBy&lt;/code&gt; と &lt;code&gt;lookAhead&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;実際にはパーサの位置を進めずに入力ストリームの 先読みを実行できる(&lt;code&gt;try&lt;/code&gt; に加えて)さらに2つのプリミティブがあります。&lt;/p&gt;
&lt;p&gt;１つめは &lt;code&gt;notFollowedBy&lt;/code&gt; と呼ばれるものです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb79&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb79-1&#34;&gt;&lt;a href=&#34;#cb79-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;notFollowedBy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;引数のパーサが失敗したときにのみ成功し、 入力を消費したり、パーサの状態を変更することはありません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;notFollowedBy&lt;/code&gt; を使いたいと思うかもしれない例として、 キーワードのパースを考えます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb80&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb80-1&#34;&gt;&lt;a href=&#34;#cb80-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pKeyword ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb80-2&#34;&gt;&lt;a href=&#34;#cb80-2&#34;&gt;&lt;/a&gt;pKeyword keyword &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lexeme (string keyword)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このパーサは問題を抱えています。 マッチさせるキーワードが単に識別子の接頭辞であるならどうでしょうか？ その場合、それは間違いなくキーワードではありません。 したがって、&lt;code&gt;notFollowedBy&lt;/code&gt; を使用して そのようなケースを排除する必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb81&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb81-1&#34;&gt;&lt;a href=&#34;#cb81-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pKeyword ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb81-2&#34;&gt;&lt;a href=&#34;#cb81-2&#34;&gt;&lt;/a&gt;pKeyword keyword &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lexeme (string keyword &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; notFollowedBy alphaNumChar)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;もう1つのプリミティブは&lt;code&gt;lookAhead&lt;/code&gt;です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb82&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb82-1&#34;&gt;&lt;a href=&#34;#cb82-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lookAhead ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lookAhead&lt;/code&gt; の引数 &lt;code&gt;p&lt;/code&gt; が成功すると、&lt;code&gt;lookAhead p&lt;/code&gt; 全体も成功しますが、 入力ストリーム（およびパーサの状態全体）はそのまま残ります。 つまり、何も消費されません。&lt;/p&gt;
&lt;p&gt;これが有用である可能性がある場所の一例は、 すでにパースされた入力に対してチェックを実行し、 失敗または正常に継続することです。 慣用表現として、次のようなコードで表すことができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb83&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb83-1&#34;&gt;&lt;a href=&#34;#cb83-1&#34;&gt;&lt;/a&gt;withPredicate1&lt;/span&gt;
&lt;span id=&#34;cb83-2&#34;&gt;&lt;a href=&#34;#cb83-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)       &lt;span class=&#34;co&#34;&gt;-- ^ パース後の入力の振る舞いの確認&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb83-3&#34;&gt;&lt;a href=&#34;#cb83-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ^ チェックが失敗した時に表示するメッセージ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb83-4&#34;&gt;&lt;a href=&#34;#cb83-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb83-5&#34;&gt;&lt;a href=&#34;#cb83-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 振る舞いを確認したパーサの結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb83-6&#34;&gt;&lt;a href=&#34;#cb83-6&#34;&gt;&lt;/a&gt;withPredicate1 f msg p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb83-7&#34;&gt;&lt;a href=&#34;#cb83-7&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lookAhead p&lt;/span&gt;
&lt;span id=&#34;cb83-8&#34;&gt;&lt;a href=&#34;#cb83-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; f r&lt;/span&gt;
&lt;span id=&#34;cb83-9&#34;&gt;&lt;a href=&#34;#cb83-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; p&lt;/span&gt;
&lt;span id=&#34;cb83-10&#34;&gt;&lt;a href=&#34;#cb83-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fail&lt;/span&gt; msg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは &lt;code&gt;lookAhead&lt;/code&gt; を使用した例ですが、 チェックが成功した場合に2回パーサを実行しており、 良くないことにも注意してください。 ここに &lt;code&gt;getOffset&lt;/code&gt; 関数を使用した代わりの解決方法があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb84&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb84-1&#34;&gt;&lt;a href=&#34;#cb84-1&#34;&gt;&lt;/a&gt;withPredicate2&lt;/span&gt;
&lt;span id=&#34;cb84-2&#34;&gt;&lt;a href=&#34;#cb84-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)       &lt;span class=&#34;co&#34;&gt;-- ^ パース後の入力の振る舞いの確認&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-3&#34;&gt;&lt;a href=&#34;#cb84-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ^ チェックが失敗した時に表示するメッセージ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-4&#34;&gt;&lt;a href=&#34;#cb84-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-5&#34;&gt;&lt;a href=&#34;#cb84-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 振る舞いを確認したパーサの結果&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-6&#34;&gt;&lt;a href=&#34;#cb84-6&#34;&gt;&lt;/a&gt;withPredicate2 f msg p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-7&#34;&gt;&lt;a href=&#34;#cb84-7&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb84-8&#34;&gt;&lt;a href=&#34;#cb84-8&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; p&lt;/span&gt;
&lt;span id=&#34;cb84-9&#34;&gt;&lt;a href=&#34;#cb84-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; f r&lt;/span&gt;
&lt;span id=&#34;cb84-10&#34;&gt;&lt;a href=&#34;#cb84-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; r&lt;/span&gt;
&lt;span id=&#34;cb84-11&#34;&gt;&lt;a href=&#34;#cb84-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb84-12&#34;&gt;&lt;a href=&#34;#cb84-12&#34;&gt;&lt;/a&gt;      setOffset o&lt;/span&gt;
&lt;span id=&#34;cb84-13&#34;&gt;&lt;a href=&#34;#cb84-13&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;fail&lt;/span&gt; msg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにして、入力ストリームの &lt;code&gt;offset&lt;/code&gt; を &lt;code&gt;p&lt;/code&gt; を実行する前の状態に設定してから失敗します。 未消費の残りとオフセットの位置に不一致がありますが、 &lt;code&gt;fail&lt;/code&gt; を呼び出してすぐにパースを終了するので、 この場合では問題になりません。 他の場合で問題になるかもしれませんが、 そのような状況でより良くする方法については、 この章の後半で説明します。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Expr&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;式のパース&#34;&gt;式のパース&lt;/h2&gt;
&lt;p&gt;「式」とは、 項とそれらの項に適用される演算子から形成される構造を意味します。 演算子は、 異なる優先順位で、前置、中置、後置、左と右の結合にすることができます。 このような構文の例として、学校でよく知られている算術式があります。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a * (b + 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2種類の項、変数(&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt;)と整数(&lt;code&gt;2&lt;/code&gt;)を見ることができます。 2つの演算子、&lt;code&gt;*&lt;/code&gt;と&lt;code&gt;+&lt;/code&gt;もあります。&lt;/p&gt;
&lt;p&gt;式のパーサを書くには時間がかかるかもしれません。 これ手助けするために、 &lt;a href=&#34;https://hackage.haskell.org/package/parser-combinators&#34;&gt;&lt;code&gt;parser-combinators&lt;/code&gt;&lt;/a&gt;パッケージ には &lt;code&gt;Control.Monad.Combinators.Expr&lt;/code&gt; モジュールが付属しています。 これは、&lt;code&gt;Operator&lt;/code&gt;データ型と&lt;code&gt;makeExprParser&lt;/code&gt;ヘルパーの 2つのだけをエクスポートします。&lt;/p&gt;
&lt;p&gt;両方ともよくドキュメント化されているので、 このセクションではドキュメント化を繰り返すことはせず、 代わりに単純だが完全に機能する式のパーサを書くつもりです。&lt;/p&gt;
&lt;p&gt;式を表すデータ型を &lt;a href=&#34;https://ja.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E6%A7%8B%E6%96%87%E6%9C%A8&#34;&gt;AST&lt;/a&gt;として定義することから始めましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb86&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb86-1&#34;&gt;&lt;a href=&#34;#cb86-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-2&#34;&gt;&lt;a href=&#34;#cb86-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Var&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-3&#34;&gt;&lt;a href=&#34;#cb86-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-4&#34;&gt;&lt;a href=&#34;#cb86-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Negation&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-5&#34;&gt;&lt;a href=&#34;#cb86-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt;      &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-6&#34;&gt;&lt;a href=&#34;#cb86-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Subtr&lt;/span&gt;    &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-7&#34;&gt;&lt;a href=&#34;#cb86-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Product&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-8&#34;&gt;&lt;a href=&#34;#cb86-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Division&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb86-9&#34;&gt;&lt;a href=&#34;#cb86-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;makeExprParser&lt;/code&gt; を使用するには、 項のパーサと演算子テーブルを指定する必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb87&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb87-1&#34;&gt;&lt;a href=&#34;#cb87-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;makeExprParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb87-2&#34;&gt;&lt;a href=&#34;#cb87-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a               &lt;span class=&#34;co&#34;&gt;-- ^ 項のパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb87-3&#34;&gt;&lt;a href=&#34;#cb87-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; [[&lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; m a]]  &lt;span class=&#34;co&#34;&gt;-- ^ 演算子テーブル, &amp;#39;Operator&amp;#39;を参照&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb87-4&#34;&gt;&lt;a href=&#34;#cb87-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a               &lt;span class=&#34;co&#34;&gt;-- ^ 式のパーサの結果&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それでは項のパーサから始めましょう。 結合性や優先順位のようなものを扱う場合、式をパースするアルゴリズムでは、 項をボックスとみなし、分割できない全体として考えることをお勧めします。 この場合、このカテゴリに分類されるものが3つあります。 変数、整数、および括弧内の式全体です。 前の章の定義を使用して、項のパーサを次のように定義できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb88&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb88-1&#34;&gt;&lt;a href=&#34;#cb88-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pVariable ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-2&#34;&gt;&lt;a href=&#34;#cb88-2&#34;&gt;&lt;/a&gt;pVariable &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Var&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lexeme&lt;/span&gt;
&lt;span id=&#34;cb88-3&#34;&gt;&lt;a href=&#34;#cb88-3&#34;&gt;&lt;/a&gt;  ((&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; letterChar &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; many alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;variable&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb88-4&#34;&gt;&lt;a href=&#34;#cb88-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-5&#34;&gt;&lt;a href=&#34;#cb88-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pInteger ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-6&#34;&gt;&lt;a href=&#34;#cb88-6&#34;&gt;&lt;/a&gt;pInteger &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lexeme L.decimal&lt;/span&gt;
&lt;span id=&#34;cb88-7&#34;&gt;&lt;a href=&#34;#cb88-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-8&#34;&gt;&lt;a href=&#34;#cb88-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parens ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb88-9&#34;&gt;&lt;a href=&#34;#cb88-9&#34;&gt;&lt;/a&gt;parens &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; between (symbol &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;) (symbol &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb88-10&#34;&gt;&lt;a href=&#34;#cb88-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-11&#34;&gt;&lt;a href=&#34;#cb88-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pTerm ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-12&#34;&gt;&lt;a href=&#34;#cb88-12&#34;&gt;&lt;/a&gt;pTerm &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice&lt;/span&gt;
&lt;span id=&#34;cb88-13&#34;&gt;&lt;a href=&#34;#cb88-13&#34;&gt;&lt;/a&gt;  [ parens pExpr&lt;/span&gt;
&lt;span id=&#34;cb88-14&#34;&gt;&lt;a href=&#34;#cb88-14&#34;&gt;&lt;/a&gt;  , pVariable&lt;/span&gt;
&lt;span id=&#34;cb88-15&#34;&gt;&lt;a href=&#34;#cb88-15&#34;&gt;&lt;/a&gt;  , pInteger&lt;/span&gt;
&lt;span id=&#34;cb88-16&#34;&gt;&lt;a href=&#34;#cb88-16&#34;&gt;&lt;/a&gt;  ]&lt;/span&gt;
&lt;span id=&#34;cb88-17&#34;&gt;&lt;a href=&#34;#cb88-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-18&#34;&gt;&lt;a href=&#34;#cb88-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pExpr ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-19&#34;&gt;&lt;a href=&#34;#cb88-19&#34;&gt;&lt;/a&gt;pExpr &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; makeExprParser pTerm operatorTable&lt;/span&gt;
&lt;span id=&#34;cb88-20&#34;&gt;&lt;a href=&#34;#cb88-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb88-21&#34;&gt;&lt;a href=&#34;#cb88-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;operatorTable ::&lt;/span&gt; [[&lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb88-22&#34;&gt;&lt;a href=&#34;#cb88-22&#34;&gt;&lt;/a&gt;operatorTable &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- TODO&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pVariable&lt;/code&gt;、&lt;code&gt;pInteger&lt;/code&gt;、および&lt;code&gt;parens&lt;/code&gt;の定義は、 ここまでで問題なく進むはずです。 文法が重ならないので &lt;code&gt;pTerm&lt;/code&gt; に &lt;code&gt;try&lt;/code&gt; が必要ないという点も、 ここではとてもラッキーです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;開き括弧 &lt;code&gt;(&lt;/code&gt; がある場合は、括弧内に式が続くことを知っているので、そのブランチにコミットします。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文字を見れば、それが識別子の始まりであることがわかります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数字が見えれば、それが整数の始まりであることがわかります。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後に、&lt;code&gt;pExpr&lt;/code&gt; を終了するために、 &lt;code&gt;operatorTable&lt;/code&gt; を定義する必要があります。 型からネストされたリストであることがわかります。 すべての内部リストはサポートしたい演算子のリストです。 それらはすべて同じ優先順位を持っています。 外側のリストは優先順位の降順で並べられているので、 高い位置に演算子のグループを配置するほど、 それらはより強く結合されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb89&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb89-1&#34;&gt;&lt;a href=&#34;#cb89-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; m a &lt;span class=&#34;co&#34;&gt;-- 注意&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-2&#34;&gt;&lt;a href=&#34;#cb89-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InfixN&lt;/span&gt;  (m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)) &lt;span class=&#34;co&#34;&gt;-- ^ 非結合の中置&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-3&#34;&gt;&lt;a href=&#34;#cb89-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InfixL&lt;/span&gt;  (m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)) &lt;span class=&#34;co&#34;&gt;-- ^ 左結合の中置&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-4&#34;&gt;&lt;a href=&#34;#cb89-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InfixR&lt;/span&gt;  (m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a)) &lt;span class=&#34;co&#34;&gt;-- ^ 右結合の中置&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-5&#34;&gt;&lt;a href=&#34;#cb89-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prefix&lt;/span&gt;  (m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a))      &lt;span class=&#34;co&#34;&gt;-- ^ 前置&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-6&#34;&gt;&lt;a href=&#34;#cb89-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Postfix&lt;/span&gt; (m (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; a))      &lt;span class=&#34;co&#34;&gt;-- ^ 後置&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-7&#34;&gt;&lt;a href=&#34;#cb89-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-8&#34;&gt;&lt;a href=&#34;#cb89-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;operatorTable ::&lt;/span&gt; [[&lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;]]&lt;/span&gt;
&lt;span id=&#34;cb89-9&#34;&gt;&lt;a href=&#34;#cb89-9&#34;&gt;&lt;/a&gt;operatorTable &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-10&#34;&gt;&lt;a href=&#34;#cb89-10&#34;&gt;&lt;/a&gt;  [ [ prefix &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Negation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-11&#34;&gt;&lt;a href=&#34;#cb89-11&#34;&gt;&lt;/a&gt;    , prefix &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-12&#34;&gt;&lt;a href=&#34;#cb89-12&#34;&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id=&#34;cb89-13&#34;&gt;&lt;a href=&#34;#cb89-13&#34;&gt;&lt;/a&gt;  , [ binary &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Product&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-14&#34;&gt;&lt;a href=&#34;#cb89-14&#34;&gt;&lt;/a&gt;    , binary &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Division&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-15&#34;&gt;&lt;a href=&#34;#cb89-15&#34;&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id=&#34;cb89-16&#34;&gt;&lt;a href=&#34;#cb89-16&#34;&gt;&lt;/a&gt;  , [ binary &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-17&#34;&gt;&lt;a href=&#34;#cb89-17&#34;&gt;&lt;/a&gt;    , binary &lt;span class=&#34;st&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Subtr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-18&#34;&gt;&lt;a href=&#34;#cb89-18&#34;&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id=&#34;cb89-19&#34;&gt;&lt;a href=&#34;#cb89-19&#34;&gt;&lt;/a&gt;  ]&lt;/span&gt;
&lt;span id=&#34;cb89-20&#34;&gt;&lt;a href=&#34;#cb89-20&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-21&#34;&gt;&lt;a href=&#34;#cb89-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;binary ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-22&#34;&gt;&lt;a href=&#34;#cb89-22&#34;&gt;&lt;/a&gt;binary  name f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;InfixL&lt;/span&gt;  (f &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; symbol name)&lt;/span&gt;
&lt;span id=&#34;cb89-23&#34;&gt;&lt;a href=&#34;#cb89-23&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-24&#34;&gt;&lt;a href=&#34;#cb89-24&#34;&gt;&lt;/a&gt;prefix,&lt;span class=&#34;ot&#34;&gt; postfix ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Operator&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Expr&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb89-25&#34;&gt;&lt;a href=&#34;#cb89-25&#34;&gt;&lt;/a&gt;prefix  name f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Prefix&lt;/span&gt;  (f &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; symbol name)&lt;/span&gt;
&lt;span id=&#34;cb89-26&#34;&gt;&lt;a href=&#34;#cb89-26&#34;&gt;&lt;/a&gt;postfix name f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Postfix&lt;/span&gt; (f &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; symbol name)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;binary&lt;/code&gt; で &lt;code&gt;InfixL&lt;/code&gt; 内部の &lt;code&gt;Parser (Expr -&amp;gt; Expr -&amp;gt; Expr)&lt;/code&gt; を どのように配置し、 同様に&lt;code&gt;prefix&lt;/code&gt; と &lt;code&gt;postfix&lt;/code&gt; に &lt;code&gt;Parser (Expr -&amp;gt; Expr)&lt;/code&gt; を どのように配置しているのか注意してください。 すなわち、&lt;code&gt;symbol name&lt;/code&gt; を実行し、 &lt;code&gt;Expr&lt;/code&gt; 型の最終結果を得るために項に適用する関数を返します。&lt;/p&gt;
&lt;p&gt;これでパーサを試すことができます。準備は完了です！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb90&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb90-1&#34;&gt;&lt;a href=&#34;#cb90-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pExpr &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;a * (b + 2)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-2&#34;&gt;&lt;a href=&#34;#cb90-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Product&lt;/span&gt; (Var &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Sum&lt;/span&gt; (Var &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Int&lt;/span&gt; 2&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb90-3&#34;&gt;&lt;a href=&#34;#cb90-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-4&#34;&gt;&lt;a href=&#34;#cb90-4&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pExpr &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;a * b + 2&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-5&#34;&gt;&lt;a href=&#34;#cb90-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Sum&lt;/span&gt; (Product (Var &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Var&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Int&lt;/span&gt; 2&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-6&#34;&gt;&lt;a href=&#34;#cb90-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-7&#34;&gt;&lt;a href=&#34;#cb90-7&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pExpr &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;a * b / 2&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-8&#34;&gt;&lt;a href=&#34;#cb90-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;Division&lt;/span&gt; (Product (Var &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Var&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;) &lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;Int&lt;/span&gt; 2&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-9&#34;&gt;&lt;a href=&#34;#cb90-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-10&#34;&gt;&lt;a href=&#34;#cb90-10&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pExpr &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;a * (b $ 2)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-11&#34;&gt;&lt;a href=&#34;#cb90-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:8:&lt;/span&gt;
&lt;span id=&#34;cb90-12&#34;&gt;&lt;a href=&#34;#cb90-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-13&#34;&gt;&lt;a href=&#34;#cb90-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;a&lt;/span&gt; * (b $ 2)&lt;/span&gt;
&lt;span id=&#34;cb90-14&#34;&gt;&lt;a href=&#34;#cb90-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;        ^&lt;/span&gt;
&lt;span id=&#34;cb90-15&#34;&gt;&lt;a href=&#34;#cb90-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb90-16&#34;&gt;&lt;a href=&#34;#cb90-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; or operator&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Text.Megaparsec.Expr&lt;/code&gt; モジュールのドキュメントには、 あまり標準的ではない状況で役立つヒントがいくつか含まれているので、 それを読むことをお勧めします。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Indentation&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;indentation-sensitiveなパース&#34;&gt;Indentation-sensitiveなパース&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Text.Megaparsec.Char.Lexer&lt;/code&gt; モジュールには、 Indentation-sensitive な文法をパースするときに役立つツールが含まれています。 最初に利用可能なコンビネータを見直し、 次にIndentation-sensitiveなパーサを書くことによって それらを使えるようにします。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;nonIndented&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;nonindented-と-indentblock&#34;&gt;&lt;code&gt;nonIndented&lt;/code&gt; と &lt;code&gt;indentBlock&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;最も単純な&lt;code&gt;nonIndented&lt;/code&gt; から始めましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb91&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb91-1&#34;&gt;&lt;a href=&#34;#cb91-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;nonIndented ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb91-2&#34;&gt;&lt;a href=&#34;#cb91-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m ()              &lt;span class=&#34;co&#34;&gt;-- ^ インデント (スペース) の消費方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb91-3&#34;&gt;&lt;a href=&#34;#cb91-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a               &lt;span class=&#34;co&#34;&gt;-- ^ 内側のパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb91-4&#34;&gt;&lt;a href=&#34;#cb91-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それはその内側のパーサが インデントされていない入力を消費することを確認できます。 これは、Indentation-sensitiveな入力による 高レベルなパーサの背後にあるモデルの一部です。 インデントされていないトップレベルの項目があり、 すべてのインデントされたトークンはそれらのトップレベル定義の 直接的または間接的な子であると述べます。 &lt;code&gt;megaparsec&lt;/code&gt;では、これを表現するために追加の状態を必要としません。 インデントは常に相対的なので、 私たちの考えは、参照トークンとインデントトークンのために パーサを明示的に結び付けることです。 そして、パーサの純粋な組み合わせによって Indentation-sensitiveな文法を定義することです。&lt;/p&gt;
&lt;p&gt;それでは、インデントブロックのパーサを どのように定義すればよいのでしょうか。 &lt;code&gt;indentBlock&lt;/code&gt;のシグネチャを見てみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb92&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb92-1&#34;&gt;&lt;a href=&#34;#cb92-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;indentBlock ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m, &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s &lt;span class=&#34;op&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb92-2&#34;&gt;&lt;a href=&#34;#cb92-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m ()              &lt;span class=&#34;co&#34;&gt;-- ^ インデント (スペース) の消費方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb92-3&#34;&gt;&lt;a href=&#34;#cb92-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;IndentOpt&lt;/span&gt; m a b) &lt;span class=&#34;co&#34;&gt;-- ^ 「参照」トークン の消費方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb92-4&#34;&gt;&lt;a href=&#34;#cb92-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はじめに、インデントの消費方法を指定します。 ここで注意すべき重要なことは、 このスペースを消費するパーサは改行も消費しなければならないのに対し、 トークン(参照トークンとインデントトークン)は 通常改行をそれらの後に消費するべきではないということです。&lt;/p&gt;
&lt;p&gt;ご覧のとおり、2番目の引数を使用すると参照トークンをパースし、 次に&lt;code&gt;indentBlock&lt;/code&gt;に何をするかを指示するデータ構造を返すことができます。 いくつかのオプションがあります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb93&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb93-1&#34;&gt;&lt;a href=&#34;#cb93-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IndentOpt&lt;/span&gt; m a b&lt;/span&gt;
&lt;span id=&#34;cb93-2&#34;&gt;&lt;a href=&#34;#cb93-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IndentNone&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb93-3&#34;&gt;&lt;a href=&#34;#cb93-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ インデントトークンを消費せず、値を返すだけ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-4&#34;&gt;&lt;a href=&#34;#cb93-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IndentMany&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt;) ([b] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) (m b)&lt;/span&gt;
&lt;span id=&#34;cb93-5&#34;&gt;&lt;a href=&#34;#cb93-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ 多くの(0個の場合を含む)インデントトークンをパースし, 与えられたインデント&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-6&#34;&gt;&lt;a href=&#34;#cb93-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- レベルを使う (&amp;#39;Nothing&amp;#39; の場合は最初にインデントされたトークンのレベルを使う)。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-7&#34;&gt;&lt;a href=&#34;#cb93-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 2番目の引数は最終結果を取得する方法を示し、三番目の&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-8&#34;&gt;&lt;a href=&#34;#cb93-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 引数はインデントされたトークンをパースする方法を示す。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-9&#34;&gt;&lt;a href=&#34;#cb93-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IndentSome&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt;) ([b] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) (m b)&lt;/span&gt;
&lt;span id=&#34;cb93-10&#34;&gt;&lt;a href=&#34;#cb93-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ &amp;#39;IndentMany&amp;#39;に似ているが、少なくとも1つのインデントトークンが&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb93-11&#34;&gt;&lt;a href=&#34;#cb93-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 出現することを要求する。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;考えを変えてインデントのないトークンをパースすることができます。 多くの（つまり、場合によっては0個の）インデントトークンをパースするか、 少なくとも1つのそのようなトークンを要求することができます。 &lt;code&gt;indentBlock&lt;/code&gt;が最初のインデントトークンのインデントレベルを検出して それを使用するか、手動でインデントレベルを指定することができます。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;SimpleIndented&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;単純なインデントされたリストのパース&#34;&gt;単純なインデントされたリストのパース&lt;/h2&gt;
&lt;p&gt;いくつかの項目の単純なインデントされたリストをパースしましょう。 インポートセクションから始めます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb94&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb94-1&#34;&gt;&lt;a href=&#34;#cb94-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-2&#34;&gt;&lt;a href=&#34;#cb94-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TupleSections     #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-3&#34;&gt;&lt;a href=&#34;#cb94-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-4&#34;&gt;&lt;a href=&#34;#cb94-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-5&#34;&gt;&lt;a href=&#34;#cb94-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-6&#34;&gt;&lt;a href=&#34;#cb94-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-7&#34;&gt;&lt;a href=&#34;#cb94-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad&lt;/span&gt; (void)&lt;/span&gt;
&lt;span id=&#34;cb94-8&#34;&gt;&lt;a href=&#34;#cb94-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb94-9&#34;&gt;&lt;a href=&#34;#cb94-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-10&#34;&gt;&lt;a href=&#34;#cb94-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-11&#34;&gt;&lt;a href=&#34;#cb94-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-12&#34;&gt;&lt;a href=&#34;#cb94-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-13&#34;&gt;&lt;a href=&#34;#cb94-13&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb94-14&#34;&gt;&lt;a href=&#34;#cb94-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2種類のスペースコンシューマが必要になります。 1つは改行を消費する&lt;code&gt;scn&lt;/code&gt;、もう1つは消費しない&lt;code&gt;sc&lt;/code&gt;です（実際にはここではスペースとタブのみをパースします）。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb95&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb95-1&#34;&gt;&lt;a href=&#34;#cb95-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lineComment ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb95-2&#34;&gt;&lt;a href=&#34;#cb95-2&#34;&gt;&lt;/a&gt;lineComment &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.skipLineComment &lt;span class=&#34;st&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb95-3&#34;&gt;&lt;a href=&#34;#cb95-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb95-4&#34;&gt;&lt;a href=&#34;#cb95-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;scn ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb95-5&#34;&gt;&lt;a href=&#34;#cb95-5&#34;&gt;&lt;/a&gt;scn &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.space space1 lineComment empty&lt;/span&gt;
&lt;span id=&#34;cb95-6&#34;&gt;&lt;a href=&#34;#cb95-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb95-7&#34;&gt;&lt;a href=&#34;#cb95-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;sc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb95-8&#34;&gt;&lt;a href=&#34;#cb95-8&#34;&gt;&lt;/a&gt;sc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.space (void &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; some (char &lt;span class=&#34;ch&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;)) lineComment empty&lt;/span&gt;
&lt;span id=&#34;cb95-9&#34;&gt;&lt;a href=&#34;#cb95-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb95-10&#34;&gt;&lt;a href=&#34;#cb95-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lexeme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb95-11&#34;&gt;&lt;a href=&#34;#cb95-11&#34;&gt;&lt;/a&gt;lexeme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.lexeme sc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;楽しみのために、&lt;code&gt;#&lt;/code&gt;で始まる行のコメントを許可します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pItemList&lt;/code&gt; は、それ自体が参照トークン（リストのヘッダー） とインデントトークン（リストの項目）の組み合わせである トップレベルの形式です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb96&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb96-1&#34;&gt;&lt;a href=&#34;#cb96-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pItemList ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;]) &lt;span class=&#34;co&#34;&gt;-- ヘッダとアイテムのリスト&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb96-2&#34;&gt;&lt;a href=&#34;#cb96-2&#34;&gt;&lt;/a&gt;pItemList &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.nonIndented scn (L.indentBlock scn p)&lt;/span&gt;
&lt;span id=&#34;cb96-3&#34;&gt;&lt;a href=&#34;#cb96-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb96-4&#34;&gt;&lt;a href=&#34;#cb96-4&#34;&gt;&lt;/a&gt;    p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb96-5&#34;&gt;&lt;a href=&#34;#cb96-5&#34;&gt;&lt;/a&gt;      header &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pItem&lt;/span&gt;
&lt;span id=&#34;cb96-6&#34;&gt;&lt;a href=&#34;#cb96-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;L.IndentMany&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (header, )) pItem)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;私たちの目的であるアイテムは、英数字とハイフンのシーケンスです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb97&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb97-1&#34;&gt;&lt;a href=&#34;#cb97-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pItem ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb97-2&#34;&gt;&lt;a href=&#34;#cb97-2&#34;&gt;&lt;/a&gt;pItem &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; lexeme (some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;list item&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GHCiでコードをロードし、 組み込みの&lt;code&gt;parseTest&lt;/code&gt;の助けを借りて試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb98&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb98-1&#34;&gt;&lt;a href=&#34;#cb98-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-2&#34;&gt;&lt;a href=&#34;#cb98-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb98-3&#34;&gt;&lt;a href=&#34;#cb98-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-4&#34;&gt;&lt;a href=&#34;#cb98-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-5&#34;&gt;&lt;a href=&#34;#cb98-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb98-6&#34;&gt;&lt;a href=&#34;#cb98-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb98-7&#34;&gt;&lt;a href=&#34;#cb98-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; list item&lt;/span&gt;
&lt;span id=&#34;cb98-8&#34;&gt;&lt;a href=&#34;#cb98-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-9&#34;&gt;&lt;a href=&#34;#cb98-9&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-10&#34;&gt;&lt;a href=&#34;#cb98-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;,[]&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-11&#34;&gt;&lt;a href=&#34;#cb98-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-12&#34;&gt;&lt;a href=&#34;#cb98-12&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;  something&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-13&#34;&gt;&lt;a href=&#34;#cb98-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:3:&lt;/span&gt;
&lt;span id=&#34;cb98-14&#34;&gt;&lt;a href=&#34;#cb98-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-15&#34;&gt;&lt;a href=&#34;#cb98-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;ex&#34;&gt;something&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-16&#34;&gt;&lt;a href=&#34;#cb98-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   ^&lt;/span&gt;
&lt;span id=&#34;cb98-17&#34;&gt;&lt;a href=&#34;#cb98-17&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;incorrect&lt;/span&gt; indentation (got 3, should be equal to 1)&lt;/span&gt;
&lt;span id=&#34;cb98-18&#34;&gt;&lt;a href=&#34;#cb98-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-19&#34;&gt;&lt;a href=&#34;#cb98-19&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\none\ntwo\nthree&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-20&#34;&gt;&lt;a href=&#34;#cb98-20&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb98-21&#34;&gt;&lt;a href=&#34;#cb98-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-22&#34;&gt;&lt;a href=&#34;#cb98-22&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;one&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-23&#34;&gt;&lt;a href=&#34;#cb98-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb98-24&#34;&gt;&lt;a href=&#34;#cb98-24&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb98-25&#34;&gt;&lt;a href=&#34;#cb98-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; end of input&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;IndentMany&lt;/code&gt; オプションを使用しているので、 空のリストでも問題ありませんが、 組み込みのコンビネータ&lt;code&gt;space&lt;/code&gt;はエラーメッセージから 「より多くのスペースを期待する」というフレーズを隠しているので、 このエラーメッセージは完全に妥当です。&lt;/p&gt;
&lt;p&gt;続けましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb99&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb99-1&#34;&gt;&lt;a href=&#34;#cb99-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n  one\n    two\n  three&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-2&#34;&gt;&lt;a href=&#34;#cb99-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;3&lt;/span&gt;:5:&lt;/span&gt;
&lt;span id=&#34;cb99-3&#34;&gt;&lt;a href=&#34;#cb99-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-4&#34;&gt;&lt;a href=&#34;#cb99-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;     &lt;span class=&#34;ex&#34;&gt;two&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-5&#34;&gt;&lt;a href=&#34;#cb99-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;     ^&lt;/span&gt;
&lt;span id=&#34;cb99-6&#34;&gt;&lt;a href=&#34;#cb99-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;incorrect&lt;/span&gt; indentation (got 5, should be equal to 3)&lt;/span&gt;
&lt;span id=&#34;cb99-7&#34;&gt;&lt;a href=&#34;#cb99-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-8&#34;&gt;&lt;a href=&#34;#cb99-8&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n  one\n  two\n three&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-9&#34;&gt;&lt;a href=&#34;#cb99-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;4&lt;/span&gt;:2:&lt;/span&gt;
&lt;span id=&#34;cb99-10&#34;&gt;&lt;a href=&#34;#cb99-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-11&#34;&gt;&lt;a href=&#34;#cb99-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;  &lt;span class=&#34;ex&#34;&gt;three&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-12&#34;&gt;&lt;a href=&#34;#cb99-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;  ^&lt;/span&gt;
&lt;span id=&#34;cb99-13&#34;&gt;&lt;a href=&#34;#cb99-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;incorrect&lt;/span&gt; indentation (got 2, should be equal to 3)&lt;/span&gt;
&lt;span id=&#34;cb99-14&#34;&gt;&lt;a href=&#34;#cb99-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-15&#34;&gt;&lt;a href=&#34;#cb99-15&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n  one\n  two\n  three&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb99-16&#34;&gt;&lt;a href=&#34;#cb99-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;,[&lt;span class=&#34;st&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;,&lt;span class=&#34;st&#34;&gt;&amp;quot;three&amp;quot;&lt;/span&gt;]&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;IndentMany&lt;/code&gt; を &lt;code&gt;IndentSome&lt;/code&gt; に、&lt;code&gt;Nothing&lt;/code&gt; を&lt;code&gt;Just (mkPos 5)&lt;/code&gt;に 置き換えます（インデントレベルは1から数えられるため、 インデントされる項目の前に4つのスペースが必要になります）。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb100&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb100-1&#34;&gt;&lt;a href=&#34;#cb100-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pItemList ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb100-2&#34;&gt;&lt;a href=&#34;#cb100-2&#34;&gt;&lt;/a&gt;pItemList &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.nonIndented scn (L.indentBlock scn p)&lt;/span&gt;
&lt;span id=&#34;cb100-3&#34;&gt;&lt;a href=&#34;#cb100-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb100-4&#34;&gt;&lt;a href=&#34;#cb100-4&#34;&gt;&lt;/a&gt;    p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb100-5&#34;&gt;&lt;a href=&#34;#cb100-5&#34;&gt;&lt;/a&gt;      header &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pItem&lt;/span&gt;
&lt;span id=&#34;cb100-6&#34;&gt;&lt;a href=&#34;#cb100-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;L.IndentSome&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (mkPos &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;)) (&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (header, )) pItem)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで、&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb101&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb101-1&#34;&gt;&lt;a href=&#34;#cb101-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-2&#34;&gt;&lt;a href=&#34;#cb101-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb101-3&#34;&gt;&lt;a href=&#34;#cb101-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-4&#34;&gt;&lt;a href=&#34;#cb101-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-5&#34;&gt;&lt;a href=&#34;#cb101-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb101-6&#34;&gt;&lt;a href=&#34;#cb101-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;incorrect&lt;/span&gt; indentation (got 1, should be greater than 1)&lt;/span&gt;
&lt;span id=&#34;cb101-7&#34;&gt;&lt;a href=&#34;#cb101-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-8&#34;&gt;&lt;a href=&#34;#cb101-8&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n  one&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-9&#34;&gt;&lt;a href=&#34;#cb101-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt;:3:&lt;/span&gt;
&lt;span id=&#34;cb101-10&#34;&gt;&lt;a href=&#34;#cb101-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-11&#34;&gt;&lt;a href=&#34;#cb101-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;ex&#34;&gt;one&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-12&#34;&gt;&lt;a href=&#34;#cb101-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   ^&lt;/span&gt;
&lt;span id=&#34;cb101-13&#34;&gt;&lt;a href=&#34;#cb101-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;incorrect&lt;/span&gt; indentation (got 3, should be equal to 5)&lt;/span&gt;
&lt;span id=&#34;cb101-14&#34;&gt;&lt;a href=&#34;#cb101-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-15&#34;&gt;&lt;a href=&#34;#cb101-15&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pItemList &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;st&#34;&gt;&amp;quot;something\n    one&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb101-16&#34;&gt;&lt;a href=&#34;#cb101-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;something&amp;quot;&lt;/span&gt;,[&lt;span class=&#34;st&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;]&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最初のメッセージは少し驚くかもしれませんが、 リスト内に少なくとも1つの項目がなければならないことを &lt;code&gt;megaparsec&lt;/code&gt;は知っているので、インデントレベルをチェックし、 そしてそれは1であり、間違っているので報告します。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;NestedIndented&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ネストされたインデントのあるリスト&#34;&gt;ネストされたインデントのあるリスト&lt;/h2&gt;
&lt;p&gt;リストのアイテムにサブアイテムを含めることを許可しましょう。 これには、新しいパーサ&lt;code&gt;pComplexItem&lt;/code&gt;が必要になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb102&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb102-1&#34;&gt;&lt;a href=&#34;#cb102-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;pComplexItem&lt;/span&gt; :: Parser (String, [String])&lt;/span&gt;
&lt;span id=&#34;cb102-2&#34;&gt;&lt;a href=&#34;#cb102-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;pComplexItem&lt;/span&gt; = L.indentBlock scn p&lt;/span&gt;
&lt;span id=&#34;cb102-3&#34;&gt;&lt;a href=&#34;#cb102-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb102-4&#34;&gt;&lt;a href=&#34;#cb102-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;p&lt;/span&gt; = do&lt;/span&gt;
&lt;span id=&#34;cb102-5&#34;&gt;&lt;a href=&#34;#cb102-5&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ex&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;- pItem&lt;/span&gt;
&lt;span id=&#34;cb102-6&#34;&gt;&lt;a href=&#34;#cb102-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;bu&#34;&gt;return&lt;/span&gt; (L.IndentMany Nothing (return . (header, )) &lt;span class=&#34;ex&#34;&gt;pItem&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb102-7&#34;&gt;&lt;a href=&#34;#cb102-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb102-8&#34;&gt;&lt;a href=&#34;#cb102-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;pItemList&lt;/span&gt; :: Parser (String, [(String, [String])])&lt;/span&gt;
&lt;span id=&#34;cb102-9&#34;&gt;&lt;a href=&#34;#cb102-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;pItemList&lt;/span&gt; = L.nonIndented scn (L.indentBlock scn p)&lt;/span&gt;
&lt;span id=&#34;cb102-10&#34;&gt;&lt;a href=&#34;#cb102-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ex&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb102-11&#34;&gt;&lt;a href=&#34;#cb102-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;ex&#34;&gt;p&lt;/span&gt; = do&lt;/span&gt;
&lt;span id=&#34;cb102-12&#34;&gt;&lt;a href=&#34;#cb102-12&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;ex&#34;&gt;header&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;- pItem&lt;/span&gt;
&lt;span id=&#34;cb102-13&#34;&gt;&lt;a href=&#34;#cb102-13&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;bu&#34;&gt;return&lt;/span&gt; (L.IndentSome Nothing (return . (header, )) &lt;span class=&#34;ex&#34;&gt;pComplexItem&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のような入力を与えます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;first-chapter
  paragraph-one
      note-A # an important note here!
      note-B
  paragraph-two
    note-1
    note-2
  paragraph-three&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このような結果が得られます。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Right
  ( &amp;quot;first-chapter&amp;quot;
  , [ (&amp;quot;paragraph-one&amp;quot;,   [&amp;quot;note-A&amp;quot;,&amp;quot;note-B&amp;quot;])
    , (&amp;quot;paragraph-two&amp;quot;,   [&amp;quot;note-1&amp;quot;,&amp;quot;note-2&amp;quot;])
    , (&amp;quot;paragraph-three&amp;quot;, [])
    ]
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは、このアプローチがネストされたインデントのある構造に対して 追加の状態を必要とせずにどのように拡張するかを示しています。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;LineFold&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;行の畳み込みの追加&#34;&gt;行の畳み込みの追加&lt;/h2&gt;
&lt;p&gt;行の畳み込みは、後続の項目のインデントレベルが 最初の項目のインデントレベルよりも大きい限り、 1行または複数行に配置できる複数の要素で構成されます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lineFold&lt;/code&gt; という別のヘルパーを利用しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb105&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb105-1&#34;&gt;&lt;a href=&#34;#cb105-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pComplexItem ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;, [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&#34;cb105-2&#34;&gt;&lt;a href=&#34;#cb105-2&#34;&gt;&lt;/a&gt;pComplexItem &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.indentBlock scn p&lt;/span&gt;
&lt;span id=&#34;cb105-3&#34;&gt;&lt;a href=&#34;#cb105-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb105-4&#34;&gt;&lt;a href=&#34;#cb105-4&#34;&gt;&lt;/a&gt;    p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb105-5&#34;&gt;&lt;a href=&#34;#cb105-5&#34;&gt;&lt;/a&gt;      header &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pItem&lt;/span&gt;
&lt;span id=&#34;cb105-6&#34;&gt;&lt;a href=&#34;#cb105-6&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;L.IndentMany&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; (header, )) pLineFold)&lt;/span&gt;
&lt;span id=&#34;cb105-7&#34;&gt;&lt;a href=&#34;#cb105-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb105-8&#34;&gt;&lt;a href=&#34;#cb105-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pLineFold ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb105-9&#34;&gt;&lt;a href=&#34;#cb105-9&#34;&gt;&lt;/a&gt;pLineFold &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; L.lineFold scn &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; \sc&amp;#39; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb105-10&#34;&gt;&lt;a href=&#34;#cb105-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; ps &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`sepBy1`&lt;/span&gt; try sc&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb105-11&#34;&gt;&lt;a href=&#34;#cb105-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;unwords&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; ps &lt;span class=&#34;op&#34;&gt;&amp;lt;*&lt;/span&gt; scn &lt;span class=&#34;co&#34;&gt;-- (1)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;lineFold&lt;/code&gt;は次のように機能します。 改行を受理するスペースコンシューマ&lt;code&gt;scn&lt;/code&gt;を提供し、 行の畳み込みの要素間のスペースを消費するために コールバックで使用できる特別なスペースコンシューマ&lt;code&gt;sc&#39;&lt;/code&gt;を返します。&lt;/p&gt;
&lt;p&gt;なぜ &lt;code&gt;try sc&#39;&lt;/code&gt; と (1) の行で &lt;code&gt;scn&lt;/code&gt;を使うのですか？状況は以下のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;行の畳込みの要素は、開始位置よりもインデントが大きくなります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sc&#39;&lt;/code&gt;は、空白を消費した後の列が最初の列よりも大きくなるように、改行とともに空白を消費します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;停止させるには、&lt;code&gt;sc&#39;&lt;/code&gt; は逆の状況に遭遇する必要があります。つまり、消費後の列は最初の列以下になります。その時点では (tryのおかげで) 入力を消費せずに失敗し、&lt;code&gt;scn&lt;/code&gt; はその列から始まる新しいものの前の空白を取り上げるために使用されます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;先程使用していた &lt;code&gt;sc&#39;&lt;/code&gt; はすでに改行文字を消費するスペースコンシューマによって空白を調べています。したがって、末尾の空白を拾うときに改行も消費するのは論理的なことです。(1) の行で &lt;code&gt;sc&lt;/code&gt;ではなく&lt;code&gt;scn&lt;/code&gt;が使用されるのはこのためです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;練習問題：私たちのパーサーの最終版で遊ぶことは 読者のための練習として残されています。 複数の単語からなる「項目」を作成することができ、 それらが折り返されている限り、 それらはそれらの間の単一のスペースでパースされ連結されます。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Efficient&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;効率のよいパーサを書く&#34;&gt;効率のよいパーサを書く&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; のパーサの性能を向上させるために 何を試みるべきか議論しましょう。 プロファイリングとベンチマークによって 改善があるかどうかを常に確認する必要があることに注意してください。 これは、パフォーマンスを調整するときに正しいことを 行っているかどうかを理解するための唯一の方法です。&lt;/p&gt;
&lt;p&gt;一般的なアドバイス：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;あなたのパーサが普通の&lt;code&gt;Parsec&lt;/code&gt;モナド (これは&lt;code&gt;Identity&lt;/code&gt;を組み合わせた&lt;code&gt;ParsecT&lt;/code&gt;のモナド変換子であることを思い出してください。これは非常に軽量です) の代わりにモナドスタックを使っている場合、少なくとも&lt;code&gt;transformer&lt;/code&gt;ライブラリのバージョン0.5と、&lt;code&gt;megaparsec&lt;/code&gt; のバージョン7.0以上を必ず使用してください。これらのバージョンでは、どちらのライブラリもパフォーマンスが大幅に向上しているため、何もしなくても優れたパフォーマンスを得ることができます。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Parsec&lt;/code&gt; モナドは、 &lt;code&gt;ParsecT&lt;/code&gt; ベースのモナド変換子よりも常に高速になります。どうしても必要な場合以外は、&lt;code&gt;StateT&lt;/code&gt;、&lt;code&gt;WriterT&lt;/code&gt;、およびその他のモナド変換子を使用しないでください。スタックに追加すればするほど遅くなります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;バックトラックはコストの高い操作です。すべての分岐が失敗する前に入力に深く入り込むことができるような長い分岐の連鎖を作ることを避けてください。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;あなたが本当にそうしたい理由がない限り、パーサの多相性を保ってはいけません。トップレベルの定義ごとに、&lt;code&gt;Parser = Parsec Void Text&lt;/code&gt; などの具体的な型を指定して、パーサの型を修正することをお勧めします。このようにすればGHCはより良く最適化できるでしょう。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;惜しみなくインライン展開しましょう(もちろん、理にかなっているときに)。特に短い関数では、インライン展開による違いを見たとき、あなたは目を疑うでしょう。 これは特に、あるモジュールで定義され、別のモジュールで使用されるパーサに当てはまります。なぜなら&lt;code&gt;INLINE&lt;/code&gt;および&lt;code&gt;INLINEABLE&lt;/code&gt;プラグマはGHCに関数定義をインタフェースファイルにダンプさせるので、特殊化が容易になるからです。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可能な場合は、&lt;code&gt;takeWhileP&lt;/code&gt;、&lt;code&gt;takeWhile1P&lt;/code&gt;、および&lt;code&gt;takeP&lt;/code&gt;などの高速なプリミティブを使用してください。&lt;a href=&#34;https://markkarpov.com/post/megaparsec-more-speed-more-power.html#there-is-hope&#34;&gt;このブログ記事&lt;/a&gt;では、なぜそれらがとても速いのかを説明します。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可能であれば &lt;code&gt;oneOf&lt;/code&gt;と&lt;code&gt;noneOf&lt;/code&gt;を避け、&lt;code&gt;satisfy&lt;/code&gt; と &lt;code&gt;notChar&lt;/code&gt; を選択してください。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上記の点のほとんどは追加のコメントを必要としませんが、 新しい高速のプリミティブ、&lt;code&gt;takeWhileP&lt;/code&gt; 、 &lt;code&gt;takeWhile1P&lt;/code&gt; 、 および &lt;code&gt;takeP&lt;/code&gt; を使用する習慣を身に付けることが有益であると思います。 最初の2つは、いくつかの&lt;code&gt;many&lt;/code&gt;と&lt;code&gt;some&lt;/code&gt;ベースの構造を置き換え、 それらを早くし、返されるデータの型を入力ストリームのチャンクに変更すること、つまり以前議論した &lt;code&gt;Tokens s&lt;/code&gt; 型に変更できるため、特に一般的です。&lt;/p&gt;
&lt;p&gt;たとえば、URIをパースしたときに、 認証の構成要素内でユーザ名をパースするための 次のコードがあったことを思い出してください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb106&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb106-1&#34;&gt;&lt;a href=&#34;#cb106-1&#34;&gt;&lt;/a&gt;  user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは &lt;code&gt;takeWhile1P&lt;/code&gt; に置き換え可能です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb107&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb107-1&#34;&gt;&lt;a href=&#34;#cb107-1&#34;&gt;&lt;/a&gt;user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; takeWhile1P (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;alpha num character&amp;quot;&lt;/span&gt;) &lt;span class=&#34;fu&#34;&gt;isAlphaNum&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb107-2&#34;&gt;&lt;a href=&#34;#cb107-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;--                  ^                            ^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb107-3&#34;&gt;&lt;a href=&#34;#cb107-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;--                  |                            |&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb107-4&#34;&gt;&lt;a href=&#34;#cb107-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- マッチさせるトークンのラベル                 述語&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ByteStrings&lt;/code&gt; と &lt;code&gt;Text&lt;/code&gt;をパースすると、 これは元の方法よりはるかに高速になります。 また、&lt;code&gt;takeWhile1P&lt;/code&gt; から直接 &lt;code&gt;Text&lt;/code&gt;を取得するため、 &lt;code&gt;T.pack&lt;/code&gt;は不要になりました。&lt;/p&gt;
&lt;p&gt;以下の式は、&lt;code&gt;takeWhileP&lt;/code&gt; と &lt;code&gt;takeWhile1P&lt;/code&gt; の &lt;code&gt;Maybe String&lt;/code&gt; 引数の意味を理解するのに役立つかもしれません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb108&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb108-1&#34;&gt;&lt;a href=&#34;#cb108-1&#34;&gt;&lt;/a&gt;takeWhileP  (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;) f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; many (satisfy f &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb108-2&#34;&gt;&lt;a href=&#34;#cb108-2&#34;&gt;&lt;/a&gt;takeWhileP  &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;      f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; many (satisfy f)&lt;/span&gt;
&lt;span id=&#34;cb108-3&#34;&gt;&lt;a href=&#34;#cb108-3&#34;&gt;&lt;/a&gt;takeWhile1P (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;) f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (satisfy f &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb108-4&#34;&gt;&lt;a href=&#34;#cb108-4&#34;&gt;&lt;/a&gt;takeWhile1P &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;      f &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (satisfy f)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;Error&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パースエラー&#34;&gt;パースエラー&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; のほとんどの機能の使い方を調べてきたので、 パースエラーの定義する方法、通知する方法、 実行中のパーサ内での処理方法について学びましょう。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;ErrDef&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パースエラーの定義&#34;&gt;パースエラーの定義&lt;/h2&gt;
&lt;p&gt;型&lt;code&gt;ParseError&lt;/code&gt; は次のように定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb109&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb109-1&#34;&gt;&lt;a href=&#34;#cb109-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e&lt;/span&gt;
&lt;span id=&#34;cb109-2&#34;&gt;&lt;a href=&#34;#cb109-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s))) (&lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)))&lt;/span&gt;
&lt;span id=&#34;cb109-3&#34;&gt;&lt;a href=&#34;#cb109-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ Megaparsecの機構によって生成された自明なエラー。 データコンストラクタには、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb109-4&#34;&gt;&lt;a href=&#34;#cb109-4&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- エラーのオフセット、予期しないトークン（存在する場合）、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb109-5&#34;&gt;&lt;a href=&#34;#cb109-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- および予期するトークンが含まれます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb109-6&#34;&gt;&lt;a href=&#34;#cb109-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e))&lt;/span&gt;
&lt;span id=&#34;cb109-7&#34;&gt;&lt;a href=&#34;#cb109-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ ファンシーなカスタムエラー。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ParseError&lt;/code&gt;は、多くても1つの予期しないアイテムと 予期するアイテムの（空かもしれない）コレクションを持つ &lt;code&gt;TrivialError&lt;/code&gt;、 または &lt;code&gt;FancyError&lt;/code&gt; のいずれかです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ParseError s e&lt;/code&gt; は、2つの型変数によってパラメータ化されています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt; は入力ストリームの型です。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt; は、パースエラーのカスタムコンポーネントの型です。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ErrorItem&lt;/code&gt; は次のように定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb110&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb110-1&#34;&gt;&lt;a href=&#34;#cb110-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; t&lt;/span&gt;
&lt;span id=&#34;cb110-2&#34;&gt;&lt;a href=&#34;#cb110-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;NonEmpty&lt;/span&gt; t)      &lt;span class=&#34;co&#34;&gt;-- ^ 空ではないトークンのストリーム&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb110-3&#34;&gt;&lt;a href=&#34;#cb110-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Label&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;NonEmpty&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)    &lt;span class=&#34;co&#34;&gt;-- ^ ラベル (空ではない)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb110-4&#34;&gt;&lt;a href=&#34;#cb110-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EndOfInput&lt;/span&gt;               &lt;span class=&#34;co&#34;&gt;-- ^ 入力の終わり&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これが&lt;code&gt;ErrorFancy&lt;/code&gt; です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb111&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb111-1&#34;&gt;&lt;a href=&#34;#cb111-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb111-2&#34;&gt;&lt;a href=&#34;#cb111-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-3&#34;&gt;&lt;a href=&#34;#cb111-3&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ パーサモナドで &amp;#39;fail&amp;#39;が使われている&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-4&#34;&gt;&lt;a href=&#34;#cb111-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ordering&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-5&#34;&gt;&lt;a href=&#34;#cb111-5&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ インデントの誤りによるエラー：参照レベルと実際のレベルの間の&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-6&#34;&gt;&lt;a href=&#34;#cb111-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- 望ましい順序、参照インデントレベル、実際のインデントレベル。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-7&#34;&gt;&lt;a href=&#34;#cb111-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb111-8&#34;&gt;&lt;a href=&#34;#cb111-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ カスタムエラーデータ、 &amp;#39;Error Fancy&amp;#39;の&amp;#39;e&amp;#39;を&amp;#39;Void&amp;#39;に&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb111-9&#34;&gt;&lt;a href=&#34;#cb111-9&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- することで都合に応じて無効にすることができます。&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ErrorFancy&lt;/code&gt;には、2つの一般的なケースのための データコンストラクタが含まれており、 &lt;code&gt;megaparsec&lt;/code&gt;はそのまま使えるようになっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fail&lt;/code&gt;関数の使用により、パーサが任意の&lt;code&gt;String&lt;/code&gt; で失敗の報告をする。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;前の章で見たインデント関連の問題です。 すぐに使えるindentation-sensitive な文法を扱うためのツールを 提供しているので、インデントの問題に関する正しく型付けされた 情報を保存する方法が必要です。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後に、&lt;code&gt;ErrorCustom&lt;/code&gt;は&lt;code&gt;ErrorFancy&lt;/code&gt;型に任意のデータを 埋め込むことを可能にする一種の「拡張スロット」です。 パースエラーにカスタムデータが必要ない場合は、 &lt;code&gt;ErrorFancy&lt;/code&gt;を&lt;code&gt;Void&lt;/code&gt;でパラメータ化します。 &lt;code&gt;Void&lt;/code&gt;はボトムしか含まないため、&lt;code&gt;ErrorCustom&lt;/code&gt;は「キャンセル」されるか、 または代数データ型と数値の間の類推に従うと「0倍」になります。&lt;/p&gt;
&lt;p&gt;ライブラリの古いバージョンでは、&lt;code&gt;ParseError&lt;/code&gt; は &lt;code&gt;parse&lt;/code&gt;のような 関数によって直接返していました。しかしバージョン7はエラーごとの 行と列の計算が遅れます。 同様にエラーが発生した場合に表示するために入力から関連する行を取得します。 この情報は通常、パーサが失敗した場合にのみ役立つので、 パースを高速化するために行われます。 古いバージョンのライブラリのもう1つの問題は、 一度に複数のパースエラーを表示する場合では、 正しい行を取得するために毎回入力を再びトラバースする必要があることです。&lt;/p&gt;
&lt;p&gt;この問題は&lt;code&gt;ParseErrorBundle&lt;/code&gt;データ型で解決されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb112&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb112-1&#34;&gt;&lt;a href=&#34;#cb112-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | エラーの効率的かつ正確なプリティプリントが可能な、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-2&#34;&gt;&lt;a href=&#34;#cb112-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- &amp;#39;PosState&amp;#39;を備えた &amp;#39;ParseError&amp;#39;の空でないコレクション。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-3&#34;&gt;&lt;a href=&#34;#cb112-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-4&#34;&gt;&lt;a href=&#34;#cb112-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseErrorBundle&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseErrorBundle&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-5&#34;&gt;&lt;a href=&#34;#cb112-5&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; bundleErrors ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NonEmpty&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e)&lt;/span&gt;
&lt;span id=&#34;cb112-6&#34;&gt;&lt;a href=&#34;#cb112-6&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ パースエラーのオフセットでソートされた &amp;#39;ParseError&amp;#39;のコレクション&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-7&#34;&gt;&lt;a href=&#34;#cb112-7&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; bundlePosState ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PosState&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb112-8&#34;&gt;&lt;a href=&#34;#cb112-8&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;co&#34;&gt;-- ^ 行と列の計算に使用される状態&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb112-9&#34;&gt;&lt;a href=&#34;#cb112-9&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パーサを実行するすべての関数は、正しく設定された &lt;code&gt;bundlePosState&lt;/code&gt;と 単一の&lt;code&gt;ParseError&lt;/code&gt;を内部に持つ&lt;code&gt;ParseErrorBundle&lt;/code&gt;を返します。 &lt;code&gt;ParseErrorBundle&lt;/code&gt;をユーザに表示する前に、 内部の&lt;code&gt;ParseError&lt;/code&gt;のコレクションを拡張できます。 &lt;code&gt;ParseErrors&lt;/code&gt;をそれらのオフセットでソートしておくことはユーザーの責任です。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;SigErr&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パースエラーを通知する方法&#34;&gt;パースエラーを通知する方法&lt;/h2&gt;
&lt;p&gt;パースエラーを通知するためのさまざまな方法について説明しましょう。 最も簡単な関数は&lt;code&gt;fail&lt;/code&gt;です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb113&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb113-1&#34;&gt;&lt;a href=&#34;#cb113-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; parseTest (&lt;span class=&#34;fu&#34;&gt;fail&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;I&amp;#39;m failing, help me!&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb113-2&#34;&gt;&lt;a href=&#34;#cb113-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb113-3&#34;&gt;&lt;a href=&#34;#cb113-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb113-4&#34;&gt;&lt;a href=&#34;#cb113-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;empty line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb113-5&#34;&gt;&lt;a href=&#34;#cb113-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb113-6&#34;&gt;&lt;a href=&#34;#cb113-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;I&amp;#39;m&lt;/span&gt; failing, help me&lt;span class=&#34;op&#34;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parsec&lt;/code&gt;のような、より単純なパーサライブラリに精通している 多くの人々にとってはこれで十分です。 しかし、パースエラーをユーザーに表示することだけではなく、 それを分析したり操作したりする必要があるかもしれません。 これが&lt;code&gt;String&lt;/code&gt;があまり便利ではないところです。&lt;/p&gt;
&lt;p&gt;自明なパースエラーは通常 &lt;code&gt;megaparsec&lt;/code&gt; によって生成されますが、 &lt;code&gt;failure&lt;/code&gt;コンビネータを使って自分自身でそのようなエラーを 知らせることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb114&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb114-1&#34;&gt;&lt;a href=&#34;#cb114-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;failure ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb114-2&#34;&gt;&lt;a href=&#34;#cb114-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 予期しないアイテム（ある場合）&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb114-3&#34;&gt;&lt;a href=&#34;#cb114-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 予期するアイテム&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb114-4&#34;&gt;&lt;a href=&#34;#cb114-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb115&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb115-1&#34;&gt;&lt;a href=&#34;#cb115-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;unfortunateParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb115-2&#34;&gt;&lt;a href=&#34;#cb115-2&#34;&gt;&lt;/a&gt;unfortunateParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; failure (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;EndOfInput&lt;/span&gt;) (Set.fromList es)&lt;/span&gt;
&lt;span id=&#34;cb115-3&#34;&gt;&lt;a href=&#34;#cb115-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb115-4&#34;&gt;&lt;a href=&#34;#cb115-4&#34;&gt;&lt;/a&gt;    es &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; (NE.fromList &lt;span class=&#34;st&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;), &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; (NE.fromList &lt;span class=&#34;st&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb116&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb116-1&#34;&gt;&lt;a href=&#34;#cb116-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; unfortunateParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb116-2&#34;&gt;&lt;a href=&#34;#cb116-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb116-3&#34;&gt;&lt;a href=&#34;#cb116-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb116-4&#34;&gt;&lt;a href=&#34;#cb116-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb116-5&#34;&gt;&lt;a href=&#34;#cb116-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb116-6&#34;&gt;&lt;a href=&#34;#cb116-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; end of input&lt;/span&gt;
&lt;span id=&#34;cb116-7&#34;&gt;&lt;a href=&#34;#cb116-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; or &lt;span class=&#34;st&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fail&lt;/code&gt;に基づいたアプローチとは異なり、 簡単なパースエラーはパターンマッチによる検査や変更が容易です。&lt;/p&gt;
&lt;p&gt;ファンシーエラーについては、 &lt;code&gt;fancyFaliure&lt;/code&gt;コンビネータで対応します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb117&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb117-1&#34;&gt;&lt;a href=&#34;#cb117-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;fancyFailure ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb117-2&#34;&gt;&lt;a href=&#34;#cb117-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e) &lt;span class=&#34;co&#34;&gt;-- ^ ファンシーエラーのコンポーネント&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb117-3&#34;&gt;&lt;a href=&#34;#cb117-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fancyFailure&lt;/code&gt; を使う際には、直接 &lt;code&gt;fancyFailure&lt;/code&gt; を呼び出すのではなく、 字句解析モジュールにある次のようなヘルパーとして定義するのが 望ましいことがよくあります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb118&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb118-1&#34;&gt;&lt;a href=&#34;#cb118-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;incorrectIndent ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb118-2&#34;&gt;&lt;a href=&#34;#cb118-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Ordering&lt;/span&gt;  &lt;span class=&#34;co&#34;&gt;-- ^ 参照レベルと実際のレベル間の望ましい順序&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb118-3&#34;&gt;&lt;a href=&#34;#cb118-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt;               &lt;span class=&#34;co&#34;&gt;-- ^ 参照インデントレベル&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb118-4&#34;&gt;&lt;a href=&#34;#cb118-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Pos&lt;/span&gt;               &lt;span class=&#34;co&#34;&gt;-- ^ 実際のインデントレベル&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb118-5&#34;&gt;&lt;a href=&#34;#cb118-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb118-6&#34;&gt;&lt;a href=&#34;#cb118-6&#34;&gt;&lt;/a&gt;incorrectIndent &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; ref actual &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; fancyFailure &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; E.singleton &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb118-7&#34;&gt;&lt;a href=&#34;#cb118-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; ref actual&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あなたのパーサにカスタムパースエラーコンポーネントを追加する例として、 与えられた&lt;code&gt;Text&lt;/code&gt;の値がキーワードではないことを示す、 特別なパースエラーを定義することを通して見てみましょう。&lt;/p&gt;
&lt;p&gt;まず、サポートしたいシナリオを表現するコンストラクタを使用して データ型を定義する必要があります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb119&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb119-1&#34;&gt;&lt;a href=&#34;#cb119-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NotKeyword&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb119-2&#34;&gt;&lt;a href=&#34;#cb119-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そしてそれをパースエラーで表示する方法を&lt;code&gt;megaparsec&lt;/code&gt;に伝えてください。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb120&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb120-1&#34;&gt;&lt;a href=&#34;#cb120-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ShowErrorComponent&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb120-2&#34;&gt;&lt;a href=&#34;#cb120-2&#34;&gt;&lt;/a&gt;  showErrorComponent (&lt;span class=&#34;dt&#34;&gt;NotKeyword&lt;/span&gt; txt) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; T.unpack txt &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot; is not a keyword&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、&lt;code&gt;Parser&lt;/code&gt;型シノニムを更新します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb121&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb121-1&#34;&gt;&lt;a href=&#34;#cb121-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;その後、&lt;code&gt;notKeyword&lt;/code&gt;ヘルパーを定義できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb122&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb122-1&#34;&gt;&lt;a href=&#34;#cb122-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;notKeyword ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb122-2&#34;&gt;&lt;a href=&#34;#cb122-2&#34;&gt;&lt;/a&gt;notKeyword &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; customFailure &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NotKeyword&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;customFailure&lt;/code&gt;は&lt;code&gt;Text.Megaparsec&lt;/code&gt;モジュールの便利なヘルパーです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb123&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb123-1&#34;&gt;&lt;a href=&#34;#cb123-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;customFailure ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb123-2&#34;&gt;&lt;a href=&#34;#cb123-2&#34;&gt;&lt;/a&gt;customFailure &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; fancyFailure &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; E.singleton &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb124&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb124-1&#34;&gt;&lt;a href=&#34;#cb124-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (notKeyword &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; :: Parser ()) &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb124-2&#34;&gt;&lt;a href=&#34;#cb124-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:1:&lt;/span&gt;
&lt;span id=&#34;cb124-3&#34;&gt;&lt;a href=&#34;#cb124-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb124-4&#34;&gt;&lt;a href=&#34;#cb124-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;empty&lt;/span&gt; line&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb124-5&#34;&gt;&lt;a href=&#34;#cb124-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; ^&lt;/span&gt;
&lt;span id=&#34;cb124-6&#34;&gt;&lt;a href=&#34;#cb124-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;foo&lt;/span&gt; is not a keyword&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;DispErr&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;パースエラーの表示&#34;&gt;パースエラーの表示&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ParseErrorBundle&lt;/code&gt;の表示は&lt;code&gt;errorBundlePretty&lt;/code&gt;関数で行われます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb125&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb125-1&#34;&gt;&lt;a href=&#34;#cb125-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | &amp;#39;ParseErrorBundle&amp;#39;をプリティプリントします。バンドル内のすべての &amp;#39;ParseError&amp;#39;は、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-2&#34;&gt;&lt;a href=&#34;#cb125-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 入力ストリームに対して単一の効率的なパスを実行することによって、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-3&#34;&gt;&lt;a href=&#34;#cb125-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 対応する問題が起きている行とともに順番にプリティプリントされます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-4&#34;&gt;&lt;a href=&#34;#cb125-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- レンダリングされた &amp;#39;String&amp;#39;は常に改行で終わります。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-5&#34;&gt;&lt;a href=&#34;#cb125-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-6&#34;&gt;&lt;a href=&#34;#cb125-6&#34;&gt;&lt;/a&gt;errorBundlePretty&lt;/span&gt;
&lt;span id=&#34;cb125-7&#34;&gt;&lt;a href=&#34;#cb125-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; ( &lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; s&lt;/span&gt;
&lt;span id=&#34;cb125-8&#34;&gt;&lt;a href=&#34;#cb125-8&#34;&gt;&lt;/a&gt;     , &lt;span class=&#34;dt&#34;&gt;ShowErrorComponent&lt;/span&gt; e&lt;/span&gt;
&lt;span id=&#34;cb125-9&#34;&gt;&lt;a href=&#34;#cb125-9&#34;&gt;&lt;/a&gt;     )&lt;/span&gt;
&lt;span id=&#34;cb125-10&#34;&gt;&lt;a href=&#34;#cb125-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseErrorBundle&lt;/span&gt; s e &lt;span class=&#34;co&#34;&gt;-- ^ 表示するパースエラーバンドル&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb125-11&#34;&gt;&lt;a href=&#34;#cb125-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;               &lt;span class=&#34;co&#34;&gt;-- ^ バンドルのテキスト表現&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;99％のケースで、あなたはこの1つの関数だけを必要とするでしょう。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;ChatchErr&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;実行中のパーサでパースエラーをチャッチする&#34;&gt;実行中のパーサでパースエラーをチャッチする&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; のもう1つの便利な機能は、 パースエラーを「キャッチ」し、それを何らかの方法で変更してから、 例外のように再びスローすることが可能なことです。 これはプリミティブ &lt;code&gt;observing&lt;/code&gt; によって有効になります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb126&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb126-1&#34;&gt;&lt;a href=&#34;#cb126-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | @&amp;#39;observing&amp;#39; p@ はパーサ @p@ の失敗を「観察」することを可能にします.&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-2&#34;&gt;&lt;a href=&#34;#cb126-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 実際にはパーサを終了せずに、代わりに &amp;#39;Left&amp;#39;の &amp;#39;ParseError&amp;#39;を取得します。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-3&#34;&gt;&lt;a href=&#34;#cb126-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 成功すると、パースされた値はいつものように &amp;#39;Right&amp;#39; で返されます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-4&#34;&gt;&lt;a href=&#34;#cb126-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- このプリミティブは、発生したパースエラーを観察することを可能にするだけで、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-5&#34;&gt;&lt;a href=&#34;#cb126-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- パーサ @p@ の動作をバックトラックしたり変更したりすることはありません。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-6&#34;&gt;&lt;a href=&#34;#cb126-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-7&#34;&gt;&lt;a href=&#34;#cb126-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;observing ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb126-8&#34;&gt;&lt;a href=&#34;#cb126-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; m a             &lt;span class=&#34;co&#34;&gt;-- ^ The parser to run&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb126-9&#34;&gt;&lt;a href=&#34;#cb126-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s) e) a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは、の典型的な &lt;code&gt;observing&lt;/code&gt; の使い方を示す完全なプログラムです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb127&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb127-1&#34;&gt;&lt;a href=&#34;#cb127-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-2&#34;&gt;&lt;a href=&#34;#cb127-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeApplications  #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-3&#34;&gt;&lt;a href=&#34;#cb127-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-4&#34;&gt;&lt;a href=&#34;#cb127-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-5&#34;&gt;&lt;a href=&#34;#cb127-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-6&#34;&gt;&lt;a href=&#34;#cb127-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- import Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-7&#34;&gt;&lt;a href=&#34;#cb127-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt; (intercalate)&lt;/span&gt;
&lt;span id=&#34;cb127-8&#34;&gt;&lt;a href=&#34;#cb127-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb127-9&#34;&gt;&lt;a href=&#34;#cb127-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb127-10&#34;&gt;&lt;a href=&#34;#cb127-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-11&#34;&gt;&lt;a href=&#34;#cb127-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-12&#34;&gt;&lt;a href=&#34;#cb127-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-13&#34;&gt;&lt;a href=&#34;#cb127-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Set&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-14&#34;&gt;&lt;a href=&#34;#cb127-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-15&#34;&gt;&lt;a href=&#34;#cb127-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-16&#34;&gt;&lt;a href=&#34;#cb127-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-17&#34;&gt;&lt;a href=&#34;#cb127-17&#34;&gt;&lt;/a&gt;    [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;co&#34;&gt;-- 位置スタック&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-18&#34;&gt;&lt;a href=&#34;#cb127-18&#34;&gt;&lt;/a&gt;    (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb127-19&#34;&gt;&lt;a href=&#34;#cb127-19&#34;&gt;&lt;/a&gt;    (&lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb127-20&#34;&gt;&lt;a href=&#34;#cb127-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-21&#34;&gt;&lt;a href=&#34;#cb127-21&#34;&gt;&lt;/a&gt;    [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;co&#34;&gt;-- 位置スタック&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-22&#34;&gt;&lt;a href=&#34;#cb127-22&#34;&gt;&lt;/a&gt;    (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- Custom をネストさせないように Void になっている&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-23&#34;&gt;&lt;a href=&#34;#cb127-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb127-24&#34;&gt;&lt;a href=&#34;#cb127-24&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-25&#34;&gt;&lt;a href=&#34;#cb127-25&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ShowErrorComponent&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-26&#34;&gt;&lt;a href=&#34;#cb127-26&#34;&gt;&lt;/a&gt;  showErrorComponent (&lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; stack us es) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-27&#34;&gt;&lt;a href=&#34;#cb127-27&#34;&gt;&lt;/a&gt;    parseErrorTextPretty (&lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; us es)&lt;/span&gt;
&lt;span id=&#34;cb127-28&#34;&gt;&lt;a href=&#34;#cb127-28&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; showPosStack stack&lt;/span&gt;
&lt;span id=&#34;cb127-29&#34;&gt;&lt;a href=&#34;#cb127-29&#34;&gt;&lt;/a&gt;  showErrorComponent (&lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; stack cs) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-30&#34;&gt;&lt;a href=&#34;#cb127-30&#34;&gt;&lt;/a&gt;    parseErrorTextPretty (&lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;undefined&lt;/span&gt; (Set.singleton cs))&lt;/span&gt;
&lt;span id=&#34;cb127-31&#34;&gt;&lt;a href=&#34;#cb127-31&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; showPosStack stack&lt;/span&gt;
&lt;span id=&#34;cb127-32&#34;&gt;&lt;a href=&#34;#cb127-32&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-33&#34;&gt;&lt;a href=&#34;#cb127-33&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;showPosStack ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-34&#34;&gt;&lt;a href=&#34;#cb127-34&#34;&gt;&lt;/a&gt;showPosStack &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; intercalate &lt;span class=&#34;st&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; (&lt;span class=&#34;st&#34;&gt;&amp;quot;in &amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb127-35&#34;&gt;&lt;a href=&#34;#cb127-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-36&#34;&gt;&lt;a href=&#34;#cb127-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-37&#34;&gt;&lt;a href=&#34;#cb127-37&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-38&#34;&gt;&lt;a href=&#34;#cb127-38&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;inside ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb127-39&#34;&gt;&lt;a href=&#34;#cb127-39&#34;&gt;&lt;/a&gt;inside location p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-40&#34;&gt;&lt;a href=&#34;#cb127-40&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; observing p&lt;/span&gt;
&lt;span id=&#34;cb127-41&#34;&gt;&lt;a href=&#34;#cb127-41&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; r &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-42&#34;&gt;&lt;a href=&#34;#cb127-42&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; _ us es) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-43&#34;&gt;&lt;a href=&#34;#cb127-43&#34;&gt;&lt;/a&gt;      fancyFailure &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; Set.singleton &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-44&#34;&gt;&lt;a href=&#34;#cb127-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; [location] us es&lt;/span&gt;
&lt;span id=&#34;cb127-45&#34;&gt;&lt;a href=&#34;#cb127-45&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; _ xs) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-46&#34;&gt;&lt;a href=&#34;#cb127-46&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; f (&lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; msg) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-47&#34;&gt;&lt;a href=&#34;#cb127-47&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; [location] (&lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; msg)&lt;/span&gt;
&lt;span id=&#34;cb127-48&#34;&gt;&lt;a href=&#34;#cb127-48&#34;&gt;&lt;/a&gt;          f (&lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; rlvl alvl) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-49&#34;&gt;&lt;a href=&#34;#cb127-49&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; [location] (&lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; rlvl alvl)&lt;/span&gt;
&lt;span id=&#34;cb127-50&#34;&gt;&lt;a href=&#34;#cb127-50&#34;&gt;&lt;/a&gt;          f (&lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; ps us es)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-51&#34;&gt;&lt;a href=&#34;#cb127-51&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; (location&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ps) us es&lt;/span&gt;
&lt;span id=&#34;cb127-52&#34;&gt;&lt;a href=&#34;#cb127-52&#34;&gt;&lt;/a&gt;          f (&lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; ps cs)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-53&#34;&gt;&lt;a href=&#34;#cb127-53&#34;&gt;&lt;/a&gt;            &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; (location&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ps) cs&lt;/span&gt;
&lt;span id=&#34;cb127-54&#34;&gt;&lt;a href=&#34;#cb127-54&#34;&gt;&lt;/a&gt;      fancyFailure (Set.map f xs)&lt;/span&gt;
&lt;span id=&#34;cb127-55&#34;&gt;&lt;a href=&#34;#cb127-55&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&#34;cb127-56&#34;&gt;&lt;a href=&#34;#cb127-56&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-57&#34;&gt;&lt;a href=&#34;#cb127-57&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;myParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-58&#34;&gt;&lt;a href=&#34;#cb127-58&#34;&gt;&lt;/a&gt;myParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; some (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb127-59&#34;&gt;&lt;a href=&#34;#cb127-59&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-60&#34;&gt;&lt;a href=&#34;#cb127-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb127-61&#34;&gt;&lt;a href=&#34;#cb127-61&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-62&#34;&gt;&lt;a href=&#34;#cb127-62&#34;&gt;&lt;/a&gt;  parseTest (inside &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; myParser) &lt;span class=&#34;st&#34;&gt;&amp;quot;aaacc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb127-63&#34;&gt;&lt;a href=&#34;#cb127-63&#34;&gt;&lt;/a&gt;  parseTest (inside &lt;span class=&#34;st&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; inside &lt;span class=&#34;st&#34;&gt;&amp;quot;bar&amp;quot;&lt;/span&gt; myParser) &lt;span class=&#34;st&#34;&gt;&amp;quot;aaacc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演習: このプログラムがどのように機能するのか詳細に理解しなさい。&lt;/p&gt;
&lt;p&gt;このプログラムを実行すると、次のように出力されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb128&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb128-1&#34;&gt;&lt;a href=&#34;#cb128-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-2&#34;&gt;&lt;a href=&#34;#cb128-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-3&#34;&gt;&lt;a href=&#34;#cb128-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; aaacc&lt;/span&gt;
&lt;span id=&#34;cb128-4&#34;&gt;&lt;a href=&#34;#cb128-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-5&#34;&gt;&lt;a href=&#34;#cb128-5&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-6&#34;&gt;&lt;a href=&#34;#cb128-6&#34;&gt;&lt;/a&gt;expecting &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-7&#34;&gt;&lt;a href=&#34;#cb128-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; foo&lt;/span&gt;
&lt;span id=&#34;cb128-8&#34;&gt;&lt;a href=&#34;#cb128-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-9&#34;&gt;&lt;a href=&#34;#cb128-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-10&#34;&gt;&lt;a href=&#34;#cb128-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; aaacc&lt;/span&gt;
&lt;span id=&#34;cb128-11&#34;&gt;&lt;a href=&#34;#cb128-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;^&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-12&#34;&gt;&lt;a href=&#34;#cb128-12&#34;&gt;&lt;/a&gt;unexpected &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-13&#34;&gt;&lt;a href=&#34;#cb128-13&#34;&gt;&lt;/a&gt;expecting &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb128-14&#34;&gt;&lt;a href=&#34;#cb128-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; foo, &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; bar&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;したがって、この機能を使用してパースエラーに対する位置ラベルの添付や、 実際にパースエラーが何らかの方法で処理される領域を定義できます。 このイディオムは非常に便利なので、 プリミティブ &lt;code&gt;observing&lt;/code&gt; の観点から構築された &lt;code&gt;region&lt;/code&gt; と呼ばれる非プリミティブヘルパーもあります。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb129&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb129-1&#34;&gt;&lt;a href=&#34;#cb129-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | 内部のラッパーで発生する &amp;#39;ParseError&amp;#39;の処理方法を指定します。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-2&#34;&gt;&lt;a href=&#34;#cb129-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- これは、通常と遅延の両方の &amp;#39;ParseError&amp;#39;に適用されます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-3&#34;&gt;&lt;a href=&#34;#cb129-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-4&#34;&gt;&lt;a href=&#34;#cb129-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 実装の副作用として、内部計算は遅延エラーの空のコレクションから始まり、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-5&#34;&gt;&lt;a href=&#34;#cb129-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- それらは更新され、 &amp;#39;region&amp;#39; から出て行くときに「復元」されます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-6&#34;&gt;&lt;a href=&#34;#cb129-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-7&#34;&gt;&lt;a href=&#34;#cb129-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;region ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb129-8&#34;&gt;&lt;a href=&#34;#cb129-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e)&lt;/span&gt;
&lt;span id=&#34;cb129-9&#34;&gt;&lt;a href=&#34;#cb129-9&#34;&gt;&lt;/a&gt;     &lt;span class=&#34;co&#34;&gt;-- ^ &amp;#39;ParseError&amp;#39; を処理する方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-10&#34;&gt;&lt;a href=&#34;#cb129-10&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a     &lt;span class=&#34;co&#34;&gt;-- ^ 処理を適用する 「領域」&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-11&#34;&gt;&lt;a href=&#34;#cb129-11&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb129-12&#34;&gt;&lt;a href=&#34;#cb129-12&#34;&gt;&lt;/a&gt;region f m &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-13&#34;&gt;&lt;a href=&#34;#cb129-13&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; observing m&lt;/span&gt;
&lt;span id=&#34;cb129-14&#34;&gt;&lt;a href=&#34;#cb129-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; r &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-15&#34;&gt;&lt;a href=&#34;#cb129-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; err &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; parseError (f err) &lt;span class=&#34;co&#34;&gt;-- 次の章を見てください&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb129-16&#34;&gt;&lt;a href=&#34;#cb129-16&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; x&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;演習: 上記のプログラムで &lt;code&gt;region&lt;/code&gt; を使用して &lt;code&gt;inside&lt;/code&gt; 関数を書き換えなさい。&lt;/p&gt;
&lt;p&gt;回答例:&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb130&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb130-1&#34;&gt;&lt;a href=&#34;#cb130-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;inside&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb130-2&#34;&gt;&lt;a href=&#34;#cb130-2&#34;&gt;&lt;/a&gt;inside&amp;#39; location p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; region (processParseError location) p&lt;/span&gt;
&lt;span id=&#34;cb130-3&#34;&gt;&lt;a href=&#34;#cb130-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-4&#34;&gt;&lt;a href=&#34;#cb130-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;processParseError ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-5&#34;&gt;&lt;a href=&#34;#cb130-5&#34;&gt;&lt;/a&gt;processParseError location (&lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; i us es) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-6&#34;&gt;&lt;a href=&#34;#cb130-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; Set.singleton &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-7&#34;&gt;&lt;a href=&#34;#cb130-7&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; [location] us es&lt;/span&gt;
&lt;span id=&#34;cb130-8&#34;&gt;&lt;a href=&#34;#cb130-8&#34;&gt;&lt;/a&gt;processParseError location (&lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; i xs) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-9&#34;&gt;&lt;a href=&#34;#cb130-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; i &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; Set.map (processErrorFancy location) xs&lt;/span&gt;
&lt;span id=&#34;cb130-10&#34;&gt;&lt;a href=&#34;#cb130-10&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-11&#34;&gt;&lt;a href=&#34;#cb130-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;processErrorFancy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Custom&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-12&#34;&gt;&lt;a href=&#34;#cb130-12&#34;&gt;&lt;/a&gt;processErrorFancy location (&lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; msg) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-13&#34;&gt;&lt;a href=&#34;#cb130-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; [location] (&lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; msg)&lt;/span&gt;
&lt;span id=&#34;cb130-14&#34;&gt;&lt;a href=&#34;#cb130-14&#34;&gt;&lt;/a&gt;processErrorFancy location (&lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; rlvl alvl) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-15&#34;&gt;&lt;a href=&#34;#cb130-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; [location] (&lt;span class=&#34;dt&#34;&gt;ErrorIndentation&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;ord&lt;/span&gt; rlvl alvl)&lt;/span&gt;
&lt;span id=&#34;cb130-16&#34;&gt;&lt;a href=&#34;#cb130-16&#34;&gt;&lt;/a&gt;processErrorFancy location (&lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; ps us es)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-17&#34;&gt;&lt;a href=&#34;#cb130-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;TrivialWithLocation&lt;/span&gt; (location&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ps) us es&lt;/span&gt;
&lt;span id=&#34;cb130-18&#34;&gt;&lt;a href=&#34;#cb130-18&#34;&gt;&lt;/a&gt;processErrorFancy location (&lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; ps cs)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb130-19&#34;&gt;&lt;a href=&#34;#cb130-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;ErrorCustom&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FancyWithLocation&lt;/span&gt; (location&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ps) cs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;Control&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;パースエラー位置のコントロール&#34;&gt;パースエラー位置のコントロール&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;region&lt;/code&gt; の定義では、 &lt;code&gt;parseError&lt;/code&gt; プリミティブが使われていました。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb131&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb131-1&#34;&gt;&lt;a href=&#34;#cb131-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;parseError ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これはエラーを報告する基本的なプリミティブであり、 これまで見てきた他の関数は &lt;code&gt;parseError&lt;/code&gt; を使用して定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb132&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb132-1&#34;&gt;&lt;a href=&#34;#cb132-1&#34;&gt;&lt;/a&gt;failure&lt;/span&gt;
&lt;span id=&#34;cb132-2&#34;&gt;&lt;a href=&#34;#cb132-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb132-3&#34;&gt;&lt;a href=&#34;#cb132-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ Unexpected item (if any)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb132-4&#34;&gt;&lt;a href=&#34;#cb132-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ Expected items&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb132-5&#34;&gt;&lt;a href=&#34;#cb132-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb132-6&#34;&gt;&lt;a href=&#34;#cb132-6&#34;&gt;&lt;/a&gt;failure us ps &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb132-7&#34;&gt;&lt;a href=&#34;#cb132-7&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb132-8&#34;&gt;&lt;a href=&#34;#cb132-8&#34;&gt;&lt;/a&gt;  parseError (&lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt; o us ps)&lt;/span&gt;
&lt;span id=&#34;cb132-9&#34;&gt;&lt;a href=&#34;#cb132-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb132-10&#34;&gt;&lt;a href=&#34;#cb132-10&#34;&gt;&lt;/a&gt;fancyFailure&lt;/span&gt;
&lt;span id=&#34;cb132-11&#34;&gt;&lt;a href=&#34;#cb132-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb132-12&#34;&gt;&lt;a href=&#34;#cb132-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e) &lt;span class=&#34;co&#34;&gt;-- ^ Fancy error components&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb132-13&#34;&gt;&lt;a href=&#34;#cb132-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id=&#34;cb132-14&#34;&gt;&lt;a href=&#34;#cb132-14&#34;&gt;&lt;/a&gt;fancyFailure xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb132-15&#34;&gt;&lt;a href=&#34;#cb132-15&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb132-16&#34;&gt;&lt;a href=&#34;#cb132-16&#34;&gt;&lt;/a&gt;  parseError (&lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; o xs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parseError&lt;/code&gt;ができることの1つは、エラーオフセット（つまり、位置）を 入力ストリームの現在の位置以外に設定することです。 パースの結果をさかのぼって拒否する例に戻りましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb133&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb133-1&#34;&gt;&lt;a href=&#34;#cb133-1&#34;&gt;&lt;/a&gt;withPredicate2&lt;/span&gt;
&lt;span id=&#34;cb133-2&#34;&gt;&lt;a href=&#34;#cb133-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)       &lt;span class=&#34;co&#34;&gt;-- ^ パースした入力に行うチェック&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb133-3&#34;&gt;&lt;a href=&#34;#cb133-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ^ チェックが失敗したときに表示するメッセージ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb133-4&#34;&gt;&lt;a href=&#34;#cb133-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb133-5&#34;&gt;&lt;a href=&#34;#cb133-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ チェックを実行するパーサを返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb133-6&#34;&gt;&lt;a href=&#34;#cb133-6&#34;&gt;&lt;/a&gt;withPredicate2 f msg p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb133-7&#34;&gt;&lt;a href=&#34;#cb133-7&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb133-8&#34;&gt;&lt;a href=&#34;#cb133-8&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; p&lt;/span&gt;
&lt;span id=&#34;cb133-9&#34;&gt;&lt;a href=&#34;#cb133-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; f r&lt;/span&gt;
&lt;span id=&#34;cb133-10&#34;&gt;&lt;a href=&#34;#cb133-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; r&lt;/span&gt;
&lt;span id=&#34;cb133-11&#34;&gt;&lt;a href=&#34;#cb133-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb133-12&#34;&gt;&lt;a href=&#34;#cb133-12&#34;&gt;&lt;/a&gt;      setOffset o&lt;/span&gt;
&lt;span id=&#34;cb133-13&#34;&gt;&lt;a href=&#34;#cb133-13&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;fail&lt;/span&gt; msg&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;setOffset o&lt;/code&gt;はエラーの位置を適切に設定しますが、 副作用としてパーサの状態も無効になり、 オフセットは現実を反映しなくなります。 これは、より複雑なパーサでは現実的な問題になる可能性があります。 たとえば、&lt;code&gt;withPredicate2&lt;/code&gt;を&lt;code&gt;observing&lt;/code&gt;で囲み、 &lt;code&gt;fail&lt;/code&gt;の後に実行されるコードがあることを想像してください。&lt;/p&gt;
&lt;p&gt;最終的に&lt;code&gt;parseError&lt;/code&gt;と&lt;code&gt;region&lt;/code&gt;により問題の適切な解決策が得られます。 &lt;code&gt;parseError&lt;/code&gt;を使用してパースエラーの場所をリセットするか、 最初に&lt;code&gt;parseError&lt;/code&gt;を使用します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb134&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb134-1&#34;&gt;&lt;a href=&#34;#cb134-1&#34;&gt;&lt;/a&gt;withPredicate3&lt;/span&gt;
&lt;span id=&#34;cb134-2&#34;&gt;&lt;a href=&#34;#cb134-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)       &lt;span class=&#34;co&#34;&gt;-- ^ パースした入力に行うチェック&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-3&#34;&gt;&lt;a href=&#34;#cb134-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ^ チェックが失敗したときに表示するメッセージ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-4&#34;&gt;&lt;a href=&#34;#cb134-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-5&#34;&gt;&lt;a href=&#34;#cb134-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ チェックを実行するパーサを返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-6&#34;&gt;&lt;a href=&#34;#cb134-6&#34;&gt;&lt;/a&gt;withPredicate3 f msg p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-7&#34;&gt;&lt;a href=&#34;#cb134-7&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb134-8&#34;&gt;&lt;a href=&#34;#cb134-8&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; p&lt;/span&gt;
&lt;span id=&#34;cb134-9&#34;&gt;&lt;a href=&#34;#cb134-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; f r&lt;/span&gt;
&lt;span id=&#34;cb134-10&#34;&gt;&lt;a href=&#34;#cb134-10&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; r&lt;/span&gt;
&lt;span id=&#34;cb134-11&#34;&gt;&lt;a href=&#34;#cb134-11&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; region (setErrorOffset o) (&lt;span class=&#34;fu&#34;&gt;fail&lt;/span&gt; msg)&lt;/span&gt;
&lt;span id=&#34;cb134-12&#34;&gt;&lt;a href=&#34;#cb134-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-13&#34;&gt;&lt;a href=&#34;#cb134-13&#34;&gt;&lt;/a&gt;withPredicate4&lt;/span&gt;
&lt;span id=&#34;cb134-14&#34;&gt;&lt;a href=&#34;#cb134-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Bool&lt;/span&gt;)       &lt;span class=&#34;co&#34;&gt;-- ^ パースした入力に行うチェック&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-15&#34;&gt;&lt;a href=&#34;#cb134-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;            &lt;span class=&#34;co&#34;&gt;-- ^ チェックが失敗したときに表示するメッセージ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-16&#34;&gt;&lt;a href=&#34;#cb134-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ 実行するパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-17&#34;&gt;&lt;a href=&#34;#cb134-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a          &lt;span class=&#34;co&#34;&gt;-- ^ チェックを実行するパーサを返す&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-18&#34;&gt;&lt;a href=&#34;#cb134-18&#34;&gt;&lt;/a&gt;withPredicate4 f msg p &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb134-19&#34;&gt;&lt;a href=&#34;#cb134-19&#34;&gt;&lt;/a&gt;  o &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; getOffset&lt;/span&gt;
&lt;span id=&#34;cb134-20&#34;&gt;&lt;a href=&#34;#cb134-20&#34;&gt;&lt;/a&gt;  r &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; p&lt;/span&gt;
&lt;span id=&#34;cb134-21&#34;&gt;&lt;a href=&#34;#cb134-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; f r&lt;/span&gt;
&lt;span id=&#34;cb134-22&#34;&gt;&lt;a href=&#34;#cb134-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; r&lt;/span&gt;
&lt;span id=&#34;cb134-23&#34;&gt;&lt;a href=&#34;#cb134-23&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; parseError (&lt;span class=&#34;dt&#34;&gt;FancyError&lt;/span&gt; o (Set.singleton (&lt;span class=&#34;dt&#34;&gt;ErrorFail&lt;/span&gt; msg)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a name=&#34;Multi&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;複数のパースエラーを報告する&#34;&gt;複数のパースエラーを報告する&lt;/h3&gt;
&lt;p&gt;最終的に、&lt;code&gt;megaparsec&lt;/code&gt;は1回の実行で複数のパースエラーを通知できます。 これによって複数の問題を一度に修正できるため、 パーサをより少ない回数で実行する必要のある エンドユーザにとって役立つ場合があります。&lt;/p&gt;
&lt;p&gt;マルチエラーパーサを使用するための前提条件の1つは、 入力の問題のある部分をスキップして、 正常であることがわかっている位置からパースを再開できることです。 この部分は、&lt;code&gt;withRecovery&lt;/code&gt;プリミティブを使用して実現されます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb135&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb135-1&#34;&gt;&lt;a href=&#34;#cb135-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | @&amp;#39;withRecovery&amp;#39; r p@ は、パーサ @p@ が失敗した場合でもパースを続行できます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-2&#34;&gt;&lt;a href=&#34;#cb135-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- この場合、実際の &amp;#39;ParseError&amp;#39; を引数とする @r@ が呼び出されます。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-3&#34;&gt;&lt;a href=&#34;#cb135-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- よくある使い方として、特定のオブジェクトのパースの失敗を意味する値を返すことで、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-4&#34;&gt;&lt;a href=&#34;#cb135-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- その入力の一部を消費し次のオブジェクトの開始位置に移動します。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-5&#34;&gt;&lt;a href=&#34;#cb135-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;--&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-6&#34;&gt;&lt;a href=&#34;#cb135-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- @r@ が失敗すると、元のエラーメッセージが &amp;#39;withRecovery&amp;#39; なしで報告されることに注意してください。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-7&#34;&gt;&lt;a href=&#34;#cb135-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- パーサ @r@ を回復してもエラーメッセージに影響することはありません。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-8&#34;&gt;&lt;a href=&#34;#cb135-8&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-9&#34;&gt;&lt;a href=&#34;#cb135-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-10&#34;&gt;&lt;a href=&#34;#cb135-10&#34;&gt;&lt;/a&gt;withRecovery&lt;/span&gt;
&lt;span id=&#34;cb135-11&#34;&gt;&lt;a href=&#34;#cb135-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class=&#34;co&#34;&gt;-- ^ 失敗の回復方法&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-12&#34;&gt;&lt;a href=&#34;#cb135-12&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a             &lt;span class=&#34;co&#34;&gt;-- ^ オリジナルのパーサ&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb135-13&#34;&gt;&lt;a href=&#34;#cb135-13&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m a             &lt;span class=&#34;co&#34;&gt;-- ^ 失敗から回復できるパーサ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Megaparsec 8 より前のユーザは、成功と失敗の可能性を含む直和型になるように型&lt;code&gt;a&lt;/code&gt;を選択する必要がありました。 たとえば、&lt;code&gt;Either (ParseError s e) Result&lt;/code&gt; です。 パースエラーを収集し、後で表示する前に手動で&lt;code&gt;ParseErrorBundle&lt;/code&gt;に追加する必要がありました。 言うまでもなく、これらはすべて、ユーザフレンドリーではない高度な使用例です。&lt;/p&gt;
&lt;p&gt;Megaparsec 8 は、遅延パースエラーをサポートします。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb136&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb136-1&#34;&gt;&lt;a href=&#34;#cb136-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | 後で報告するために &amp;#39;ParseError&amp;#39;を登録します。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-2&#34;&gt;&lt;a href=&#34;#cb136-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- このアクションはパースを終了せず、パースの最後に考慮される&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-3&#34;&gt;&lt;a href=&#34;#cb136-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 「遅延」&amp;#39;ParseError&amp;#39;のコレクションに与えられた「ParseError」を&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-4&#34;&gt;&lt;a href=&#34;#cb136-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 追加するだけです。 このコレクションが空の場合のみ、&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-5&#34;&gt;&lt;a href=&#34;#cb136-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- パーサは成功します。 これは、複数のパースエラーを一度に報告する&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-6&#34;&gt;&lt;a href=&#34;#cb136-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- 主な方法です。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-7&#34;&gt;&lt;a href=&#34;#cb136-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-8&#34;&gt;&lt;a href=&#34;#cb136-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;registerParseError ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; s e &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb136-9&#34;&gt;&lt;a href=&#34;#cb136-9&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-10&#34;&gt;&lt;a href=&#34;#cb136-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | &amp;#39;failure&amp;#39;に似ていますが、 遅延&amp;#39;ParseError&amp;#39;のためのものです。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-11&#34;&gt;&lt;a href=&#34;#cb136-11&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-12&#34;&gt;&lt;a href=&#34;#cb136-12&#34;&gt;&lt;/a&gt;registerFailure&lt;/span&gt;
&lt;span id=&#34;cb136-13&#34;&gt;&lt;a href=&#34;#cb136-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb136-14&#34;&gt;&lt;a href=&#34;#cb136-14&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 期待しないアイテム (あれば)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-15&#34;&gt;&lt;a href=&#34;#cb136-15&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorItem&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s)) &lt;span class=&#34;co&#34;&gt;-- ^ 期待するアイテム&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-16&#34;&gt;&lt;a href=&#34;#cb136-16&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;
&lt;span id=&#34;cb136-17&#34;&gt;&lt;a href=&#34;#cb136-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-18&#34;&gt;&lt;a href=&#34;#cb136-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- | &amp;#39;fancyFailure&amp;#39;に似ていますが、 遅延&amp;#39;ParseError&amp;#39;のためのものです。&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-19&#34;&gt;&lt;a href=&#34;#cb136-19&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-20&#34;&gt;&lt;a href=&#34;#cb136-20&#34;&gt;&lt;/a&gt;registerFancyFailure&lt;/span&gt;
&lt;span id=&#34;cb136-21&#34;&gt;&lt;a href=&#34;#cb136-21&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MonadParsec&lt;/span&gt; e s m&lt;/span&gt;
&lt;span id=&#34;cb136-22&#34;&gt;&lt;a href=&#34;#cb136-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ErrorFancy&lt;/span&gt; e) &lt;span class=&#34;co&#34;&gt;-- ^ Fancy error components&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb136-23&#34;&gt;&lt;a href=&#34;#cb136-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m ()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらのエラーは &lt;code&gt;withRecovery&lt;/code&gt; のエラー処理コールバックに登録でき、結果の型は &lt;code&gt;Maybe Result&lt;/code&gt; になります。 これにより、遅延エラーが最終的な &lt;code&gt;ParseErrorBundle&lt;/code&gt; に含まれるようになり、遅延エラーのコレクションが空でない場合に パーサが最終的に失敗するようになります。&lt;/p&gt;
&lt;p&gt;以上のことから、マルチエラーパーサを書く習慣がユーザ間でより一般的になることを願っています。&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Testing&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;megaparsec-パーサのテスト&#34;&gt;Megaparsec パーサのテスト&lt;/h2&gt;
&lt;p&gt;パーサのテストは、ほとんどの人が遅かれ早かれ直面する実践的なタスクであり、 それをカバーしなければなりません。 &lt;code&gt;megaparsec&lt;/code&gt; のパーサをテストするための推奨される方法は &lt;a href=&#34;https://hackage.haskell.org/package/hspec-megaparsec&#34;&gt;&lt;code&gt;hspec-megaparsec&lt;/code&gt;&lt;/a&gt;パッケージを使うことです。 このパッケージは、&lt;code&gt;hspec&lt;/code&gt; テストフレームワークで動作する &lt;code&gt;shouldParse&lt;/code&gt;、 &lt;code&gt;parseSatisfies&lt;/code&gt; などのユーティリティテスト関数のを追加します。&lt;/p&gt;
&lt;p&gt;次の例から見てみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb137&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb137-1&#34;&gt;&lt;a href=&#34;#cb137-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-2&#34;&gt;&lt;a href=&#34;#cb137-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-3&#34;&gt;&lt;a href=&#34;#cb137-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-4&#34;&gt;&lt;a href=&#34;#cb137-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-5&#34;&gt;&lt;a href=&#34;#cb137-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-6&#34;&gt;&lt;a href=&#34;#cb137-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb137-7&#34;&gt;&lt;a href=&#34;#cb137-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-8&#34;&gt;&lt;a href=&#34;#cb137-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.Hspec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-9&#34;&gt;&lt;a href=&#34;#cb137-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Test.Hspec.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-10&#34;&gt;&lt;a href=&#34;#cb137-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-11&#34;&gt;&lt;a href=&#34;#cb137-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-12&#34;&gt;&lt;a href=&#34;#cb137-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-13&#34;&gt;&lt;a href=&#34;#cb137-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-14&#34;&gt;&lt;a href=&#34;#cb137-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-15&#34;&gt;&lt;a href=&#34;#cb137-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;myParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-16&#34;&gt;&lt;a href=&#34;#cb137-16&#34;&gt;&lt;/a&gt;myParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; some (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb137-17&#34;&gt;&lt;a href=&#34;#cb137-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-18&#34;&gt;&lt;a href=&#34;#cb137-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb137-19&#34;&gt;&lt;a href=&#34;#cb137-19&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; hspec &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-20&#34;&gt;&lt;a href=&#34;#cb137-20&#34;&gt;&lt;/a&gt;  describe &lt;span class=&#34;st&#34;&gt;&amp;quot;myParser&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-21&#34;&gt;&lt;a href=&#34;#cb137-21&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;returns correct result&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-22&#34;&gt;&lt;a href=&#34;#cb137-22&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`shouldParse`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-23&#34;&gt;&lt;a href=&#34;#cb137-23&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;result of parsing satisfies what it should&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb137-24&#34;&gt;&lt;a href=&#34;#cb137-24&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`parseSatisfies`&lt;/span&gt; ((&lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;4&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;shouldParse&lt;/code&gt; は、パース結果 &lt;code&gt;Either（ParseErrorBundle s e）a&lt;/code&gt; と比較する型 &lt;code&gt;a&lt;/code&gt; の値を引数として受け取ります。 おそらく最も一般的なヘルパーです。 &lt;code&gt;parseSatisfies&lt;/code&gt; は非常に似ていますが、期待される結果と等しいかどうかを比較する代わりに、任意の述語を適用することによって結果をチェックすることができます。&lt;/p&gt;
&lt;p&gt;その他の単純なテスト関数は、 &lt;code&gt;shouldSucceedOn&lt;/code&gt; と &lt;code&gt;shouldFailOn&lt;/code&gt; です（これらはめったに使われません）。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb138&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb138-1&#34;&gt;&lt;a href=&#34;#cb138-1&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;should parse &amp;#39;a&amp;#39;s all right&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb138-2&#34;&gt;&lt;a href=&#34;#cb138-2&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`shouldSucceedOn`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;aaaa&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb138-3&#34;&gt;&lt;a href=&#34;#cb138-3&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;should fail on &amp;#39;b&amp;#39;s&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb138-4&#34;&gt;&lt;a href=&#34;#cb138-4&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`shouldFailOn`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; で、パーサが生み出すパースエラーを詳細にテストしたいです。 パースエラーをテストするには &lt;code&gt;shouldFailWith&lt;/code&gt; があります。 これは次のように使用できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb139&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb139-1&#34;&gt;&lt;a href=&#34;#cb139-1&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;fails on &amp;#39;b&amp;#39;s producing correct error message&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb139-2&#34;&gt;&lt;a href=&#34;#cb139-2&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`shouldFailWith`&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb139-3&#34;&gt;&lt;a href=&#34;#cb139-3&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;dt&#34;&gt;TrivialError&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb139-4&#34;&gt;&lt;a href=&#34;#cb139-4&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb139-5&#34;&gt;&lt;a href=&#34;#cb139-5&#34;&gt;&lt;/a&gt;          (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; (&lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:|&lt;/span&gt; [])))&lt;/span&gt;
&lt;span id=&#34;cb139-6&#34;&gt;&lt;a href=&#34;#cb139-6&#34;&gt;&lt;/a&gt;          (Set.singleton (&lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; (&lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:|&lt;/span&gt; [])))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように &lt;code&gt;TrivialError&lt;/code&gt; を書き出すのは面倒です。 &lt;code&gt;ParseError&lt;/code&gt; の定義には、&lt;code&gt;Set&lt;/code&gt; や &lt;code&gt;NonEmpty&lt;/code&gt; のような 「不便な」型が含まれています。これらは、 今見たとおり直接入力するのには便利ではありません。 幸い、&lt;code&gt;Test.Hspec.Megaparsec&lt;/code&gt; は、 &lt;code&gt;ParserErrors&lt;/code&gt;をより簡単に構築するためのAPIを提供する &lt;code&gt;Text.Megaparsec.Error.Builder&lt;/code&gt; モジュールも再エクスポートします。 代わりに &lt;code&gt;err&lt;/code&gt; ヘルパーを使用しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb140&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb140-1&#34;&gt;&lt;a href=&#34;#cb140-1&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;fails on &amp;#39;b&amp;#39;s producing correct error message&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb140-2&#34;&gt;&lt;a href=&#34;#cb140-2&#34;&gt;&lt;/a&gt;      parse myParser &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;`shouldFailWith`&lt;/span&gt; err &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; (utok &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; etok &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;err&lt;/code&gt; の最初の引数は、パースエラーのオフセット（エラーが発生する前に消費されたトークンの数）です。今回はそれは単に0です。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;utok&lt;/code&gt; は「期待しないトークン」を表し、同様に &lt;code&gt;etok&lt;/code&gt; は「期待するトークン」を意味します。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;演習: ファンシーパースエラーを構築するために、&lt;code&gt;errFancy&lt;/code&gt; と呼ばれる同様のヘルパーがありますので、それをよく理解してください。&lt;/p&gt;
&lt;p&gt;最後に、&lt;code&gt;failsLeaving&lt;/code&gt; と &lt;code&gt;succeedsLeaving&lt;/code&gt; を使用して、 パース後に入力のどの部分が未消費のままであるかをテストすることができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb141&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb141-1&#34;&gt;&lt;a href=&#34;#cb141-1&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;consumes all &amp;#39;a&amp;#39;s but does not touch &amp;#39;b&amp;#39;s&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-2&#34;&gt;&lt;a href=&#34;#cb141-2&#34;&gt;&lt;/a&gt;      runParser&amp;#39; myParser (initialState &lt;span class=&#34;st&#34;&gt;&amp;quot;aaabbb&amp;quot;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`succeedsLeaving`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-3&#34;&gt;&lt;a href=&#34;#cb141-3&#34;&gt;&lt;/a&gt;    it &lt;span class=&#34;st&#34;&gt;&amp;quot;fails without consuming anything&amp;quot;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb141-4&#34;&gt;&lt;a href=&#34;#cb141-4&#34;&gt;&lt;/a&gt;      runParser&amp;#39; myParser (initialState &lt;span class=&#34;st&#34;&gt;&amp;quot;bbbccc&amp;quot;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;`failsLeaving`&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;bbbccc&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これらは、パーサのカスタム初期状態を受け取り、 その最終状態を返す &lt;code&gt;runParser&#39;&lt;/code&gt; または &lt;code&gt;runParserT&#39;&lt;/code&gt; と共に 使用する必要があります（これにより、 パース後に入力ストリームの残りをチェックすることができます）。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb142&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb142-1&#34;&gt;&lt;a href=&#34;#cb142-1&#34;&gt;&lt;/a&gt;runParser&amp;#39;&lt;/span&gt;
&lt;span id=&#34;cb142-2&#34;&gt;&lt;a href=&#34;#cb142-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; e s a      &lt;span class=&#34;co&#34;&gt;-- ^ Parser to run&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb142-3&#34;&gt;&lt;a href=&#34;#cb142-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s           &lt;span class=&#34;co&#34;&gt;-- ^ Initial state&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb142-4&#34;&gt;&lt;a href=&#34;#cb142-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s, &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s) e) a)&lt;/span&gt;
&lt;span id=&#34;cb142-5&#34;&gt;&lt;a href=&#34;#cb142-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb142-6&#34;&gt;&lt;a href=&#34;#cb142-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;runParserT&amp;#39; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monad&lt;/span&gt; m&lt;/span&gt;
&lt;span id=&#34;cb142-7&#34;&gt;&lt;a href=&#34;#cb142-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;ParsecT&lt;/span&gt; e s m a   &lt;span class=&#34;co&#34;&gt;-- ^ Parser to run&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb142-8&#34;&gt;&lt;a href=&#34;#cb142-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s           &lt;span class=&#34;co&#34;&gt;-- ^ Initial state&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb142-9&#34;&gt;&lt;a href=&#34;#cb142-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt; s, &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;ParseError&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt; s) e) a)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;initialState&lt;/code&gt; 関数は入力ストリームを受け取り、 その入力ストリームとデフォルト値で埋められた レコードフィールドの初期状態を返します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hspec-megaparsec&lt;/code&gt; を使用するためのその他のヒントは次のとおりです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/mrkkrp/megaparsec/tree/master/megaparsec-tests&#34;&gt;Megaparsec自身のテスト&lt;/a&gt; はhspec-megaparsecを使って書かれています。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hspec-megaparsec&lt;/code&gt; 自体に付属している&lt;a href=&#34;https://github.com/mrkkrp/hspec-megaparsec/blob/master/tests/Main.hs&#34;&gt;トイテストスイート&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a name=&#34;CustomInput&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;カスタム入力ストリームの操作&#34;&gt;カスタム入力ストリームの操作&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;megaparsec&lt;/code&gt; は、 &lt;code&gt;Stream&lt;/code&gt; 型クラスのインスタンスである入力をパースできます。 これは、&lt;code&gt;alex&lt;/code&gt;などの字句解析ツールと組み合わせて使用できることを 意味します。&lt;/p&gt;
&lt;p&gt;主題から離れないようにするため、 &lt;code&gt;alex&lt;/code&gt; がどのようにしてトークンのストリーム生成するのかは説明しません。 また、次の形式を想定します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb143&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb143-1&#34;&gt;&lt;a href=&#34;#cb143-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE LambdaCase        #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-2&#34;&gt;&lt;a href=&#34;#cb143-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-3&#34;&gt;&lt;a href=&#34;#cb143-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecoedWildCards   #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-4&#34;&gt;&lt;a href=&#34;#cb143-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE TypeFamilies      #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-5&#34;&gt;&lt;a href=&#34;#cb143-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-6&#34;&gt;&lt;a href=&#34;#cb143-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-7&#34;&gt;&lt;a href=&#34;#cb143-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-8&#34;&gt;&lt;a href=&#34;#cb143-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.NonEmpty&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;NonEmpty&lt;/span&gt; (..))&lt;/span&gt;
&lt;span id=&#34;cb143-9&#34;&gt;&lt;a href=&#34;#cb143-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Proxy&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-10&#34;&gt;&lt;a href=&#34;#cb143-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-11&#34;&gt;&lt;a href=&#34;#cb143-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-12&#34;&gt;&lt;a href=&#34;#cb143-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List&lt;/span&gt;          &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;DL&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-13&#34;&gt;&lt;a href=&#34;#cb143-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.List.NonEmpty&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;NE&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-14&#34;&gt;&lt;a href=&#34;#cb143-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Set&lt;/span&gt;           &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Set&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-15&#34;&gt;&lt;a href=&#34;#cb143-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-16&#34;&gt;&lt;a href=&#34;#cb143-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-17&#34;&gt;&lt;a href=&#34;#cb143-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-18&#34;&gt;&lt;a href=&#34;#cb143-18&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plus&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-19&#34;&gt;&lt;a href=&#34;#cb143-19&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-20&#34;&gt;&lt;a href=&#34;#cb143-20&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-21&#34;&gt;&lt;a href=&#34;#cb143-21&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;OpenParen&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-22&#34;&gt;&lt;a href=&#34;#cb143-22&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;CloseParen&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb143-23&#34;&gt;&lt;a href=&#34;#cb143-23&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;パースエラーを報告するために、 トークンの開始位置、終了位置、長さを知る方法が必要なので、 &lt;code&gt;WithPos&lt;/code&gt; を追加しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb144&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb144-1&#34;&gt;&lt;a href=&#34;#cb144-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb144-2&#34;&gt;&lt;a href=&#34;#cb144-2&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; startPos ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SourcePos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb144-3&#34;&gt;&lt;a href=&#34;#cb144-3&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; endPos ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SourcePos&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb144-4&#34;&gt;&lt;a href=&#34;#cb144-4&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; tokenLength ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb144-5&#34;&gt;&lt;a href=&#34;#cb144-5&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; tokenVal ::&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb144-6&#34;&gt;&lt;a href=&#34;#cb144-6&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Ord&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでストリームのデータ型ができます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb145&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb145-1&#34;&gt;&lt;a href=&#34;#cb145-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb145-2&#34;&gt;&lt;a href=&#34;#cb145-2&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; myStreamInput ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;co&#34;&gt;-- 問題のある行を表示するため&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb145-3&#34;&gt;&lt;a href=&#34;#cb145-3&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; unMyStream ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb145-4&#34;&gt;&lt;a href=&#34;#cb145-4&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に、&lt;code&gt;MyStream&lt;/code&gt; を &lt;code&gt;Stream&lt;/code&gt; 型クラスのインスタンスにする必要があります。 関連型関数 &lt;code&gt;Token&lt;/code&gt; と &lt;code&gt;Tokens&lt;/code&gt; を定義したいので、 &lt;code&gt;TypeFamilies&lt;/code&gt; の言語拡張が必要です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb146&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb146-1&#34;&gt;&lt;a href=&#34;#cb146-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Stream&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb146-2&#34;&gt;&lt;a href=&#34;#cb146-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Token&lt;/span&gt;  &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb146-3&#34;&gt;&lt;a href=&#34;#cb146-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb146-4&#34;&gt;&lt;a href=&#34;#cb146-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- …&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt; は &lt;code&gt;Text.Megaparsec.Stream&lt;/code&gt; モジュールに 詳しいドキュメントがあります。 足りないメソッドを定義していきましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb147&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb147-1&#34;&gt;&lt;a href=&#34;#cb147-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;co&#34;&gt;-- …&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-2&#34;&gt;&lt;a href=&#34;#cb147-2&#34;&gt;&lt;/a&gt;  tokenToChunk &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; [x]&lt;/span&gt;
&lt;span id=&#34;cb147-3&#34;&gt;&lt;a href=&#34;#cb147-3&#34;&gt;&lt;/a&gt;  tokensToChunk &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; xs&lt;/span&gt;
&lt;span id=&#34;cb147-4&#34;&gt;&lt;a href=&#34;#cb147-4&#34;&gt;&lt;/a&gt;  chunkToTokens &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;id&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-5&#34;&gt;&lt;a href=&#34;#cb147-5&#34;&gt;&lt;/a&gt;  chunkLength &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;length&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-6&#34;&gt;&lt;a href=&#34;#cb147-6&#34;&gt;&lt;/a&gt;  chunkEmpty &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-7&#34;&gt;&lt;a href=&#34;#cb147-7&#34;&gt;&lt;/a&gt;  take1_ (&lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; _ []) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-8&#34;&gt;&lt;a href=&#34;#cb147-8&#34;&gt;&lt;/a&gt;  take1_ (&lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; str (t&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;ts)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-9&#34;&gt;&lt;a href=&#34;#cb147-9&#34;&gt;&lt;/a&gt;    ( t&lt;/span&gt;
&lt;span id=&#34;cb147-10&#34;&gt;&lt;a href=&#34;#cb147-10&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;drop&lt;/span&gt; (tokensLength pxy (t&lt;span class=&#34;op&#34;&gt;:|&lt;/span&gt;[])) str) ts&lt;/span&gt;
&lt;span id=&#34;cb147-11&#34;&gt;&lt;a href=&#34;#cb147-11&#34;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&#34;cb147-12&#34;&gt;&lt;a href=&#34;#cb147-12&#34;&gt;&lt;/a&gt;  takeN_ n (&lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; str s)&lt;/span&gt;
&lt;span id=&#34;cb147-13&#34;&gt;&lt;a href=&#34;#cb147-13&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; n &lt;span class=&#34;op&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; ([], &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; str s)&lt;/span&gt;
&lt;span id=&#34;cb147-14&#34;&gt;&lt;a href=&#34;#cb147-14&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;null&lt;/span&gt; s    &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-15&#34;&gt;&lt;a href=&#34;#cb147-15&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;otherwise&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-16&#34;&gt;&lt;a href=&#34;#cb147-16&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (x, s&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;splitAt&lt;/span&gt; n s&lt;/span&gt;
&lt;span id=&#34;cb147-17&#34;&gt;&lt;a href=&#34;#cb147-17&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; NE.nonEmpty x &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-18&#34;&gt;&lt;a href=&#34;#cb147-18&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; str s&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb147-19&#34;&gt;&lt;a href=&#34;#cb147-19&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; nex &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;drop&lt;/span&gt; (tokensLength pxy nex) str) s&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb147-20&#34;&gt;&lt;a href=&#34;#cb147-20&#34;&gt;&lt;/a&gt;  takeWhile_ f (&lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; str s) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-21&#34;&gt;&lt;a href=&#34;#cb147-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;let&lt;/span&gt; (x, s&amp;#39;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; DL.span f s&lt;/span&gt;
&lt;span id=&#34;cb147-22&#34;&gt;&lt;a href=&#34;#cb147-22&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; NE.nonEmpty x &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-23&#34;&gt;&lt;a href=&#34;#cb147-23&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; str s&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb147-24&#34;&gt;&lt;a href=&#34;#cb147-24&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; nex &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; (x, &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;drop&lt;/span&gt; (tokensLength pxy nex) str) s&amp;#39;)&lt;/span&gt;
&lt;span id=&#34;cb147-25&#34;&gt;&lt;a href=&#34;#cb147-25&#34;&gt;&lt;/a&gt;  showTokens &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; DL.intercalate &lt;span class=&#34;st&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-26&#34;&gt;&lt;a href=&#34;#cb147-26&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; NE.toList&lt;/span&gt;
&lt;span id=&#34;cb147-27&#34;&gt;&lt;a href=&#34;#cb147-27&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; (showMyToken &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; tokenVal)&lt;/span&gt;
&lt;span id=&#34;cb147-28&#34;&gt;&lt;a href=&#34;#cb147-28&#34;&gt;&lt;/a&gt;  tokensLength &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; xs &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;sum&lt;/span&gt; (tokenLength &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; xs)&lt;/span&gt;
&lt;span id=&#34;cb147-29&#34;&gt;&lt;a href=&#34;#cb147-29&#34;&gt;&lt;/a&gt;  reachOffset o &lt;span class=&#34;dt&#34;&gt;PosState&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-30&#34;&gt;&lt;a href=&#34;#cb147-30&#34;&gt;&lt;/a&gt;    ( prefix &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; restOfLine&lt;/span&gt;
&lt;span id=&#34;cb147-31&#34;&gt;&lt;a href=&#34;#cb147-31&#34;&gt;&lt;/a&gt;    , &lt;span class=&#34;dt&#34;&gt;PosState&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-32&#34;&gt;&lt;a href=&#34;#cb147-32&#34;&gt;&lt;/a&gt;        { pstateInput &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-33&#34;&gt;&lt;a href=&#34;#cb147-33&#34;&gt;&lt;/a&gt;            { myStreamInput &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; postStr&lt;/span&gt;
&lt;span id=&#34;cb147-34&#34;&gt;&lt;a href=&#34;#cb147-34&#34;&gt;&lt;/a&gt;            , unMyStream &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; post&lt;/span&gt;
&lt;span id=&#34;cb147-35&#34;&gt;&lt;a href=&#34;#cb147-35&#34;&gt;&lt;/a&gt;            }&lt;/span&gt;
&lt;span id=&#34;cb147-36&#34;&gt;&lt;a href=&#34;#cb147-36&#34;&gt;&lt;/a&gt;        , pstateOffset &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;max&lt;/span&gt; pstateOffset o&lt;/span&gt;
&lt;span id=&#34;cb147-37&#34;&gt;&lt;a href=&#34;#cb147-37&#34;&gt;&lt;/a&gt;        , pstateSourcePos &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; newSourcePos&lt;/span&gt;
&lt;span id=&#34;cb147-38&#34;&gt;&lt;a href=&#34;#cb147-38&#34;&gt;&lt;/a&gt;        , pstateTabWidth &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pstateTabWidth&lt;/span&gt;
&lt;span id=&#34;cb147-39&#34;&gt;&lt;a href=&#34;#cb147-39&#34;&gt;&lt;/a&gt;        , pstateLinePrefix &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; prefix&lt;/span&gt;
&lt;span id=&#34;cb147-40&#34;&gt;&lt;a href=&#34;#cb147-40&#34;&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id=&#34;cb147-41&#34;&gt;&lt;a href=&#34;#cb147-41&#34;&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id=&#34;cb147-42&#34;&gt;&lt;a href=&#34;#cb147-42&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-43&#34;&gt;&lt;a href=&#34;#cb147-43&#34;&gt;&lt;/a&gt;      prefix &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-44&#34;&gt;&lt;a href=&#34;#cb147-44&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; sameLine&lt;/span&gt;
&lt;span id=&#34;cb147-45&#34;&gt;&lt;a href=&#34;#cb147-45&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; pstateLinePrefix &lt;span class=&#34;op&#34;&gt;++&lt;/span&gt; preStr&lt;/span&gt;
&lt;span id=&#34;cb147-46&#34;&gt;&lt;a href=&#34;#cb147-46&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; preStr&lt;/span&gt;
&lt;span id=&#34;cb147-47&#34;&gt;&lt;a href=&#34;#cb147-47&#34;&gt;&lt;/a&gt;      sameLine &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; sourceLine newSourcePos &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; sourceLine pstateSourcePos&lt;/span&gt;
&lt;span id=&#34;cb147-48&#34;&gt;&lt;a href=&#34;#cb147-48&#34;&gt;&lt;/a&gt;      newSourcePos &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-49&#34;&gt;&lt;a href=&#34;#cb147-49&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; post &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-50&#34;&gt;&lt;a href=&#34;#cb147-50&#34;&gt;&lt;/a&gt;          [] &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; pstateSourcePos&lt;/span&gt;
&lt;span id=&#34;cb147-51&#34;&gt;&lt;a href=&#34;#cb147-51&#34;&gt;&lt;/a&gt;          (x&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;_) &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; startPos x&lt;/span&gt;
&lt;span id=&#34;cb147-52&#34;&gt;&lt;a href=&#34;#cb147-52&#34;&gt;&lt;/a&gt;      (pre, post) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;splitAt&lt;/span&gt; (o &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt; pstateOffset) (unMyStream pstateInput)&lt;/span&gt;
&lt;span id=&#34;cb147-53&#34;&gt;&lt;a href=&#34;#cb147-53&#34;&gt;&lt;/a&gt;      (preStr, postStr) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;splitAt&lt;/span&gt; tokensConsumed (myStreamInput pstateInput)&lt;/span&gt;
&lt;span id=&#34;cb147-54&#34;&gt;&lt;a href=&#34;#cb147-54&#34;&gt;&lt;/a&gt;      tokensConsumed &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-55&#34;&gt;&lt;a href=&#34;#cb147-55&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; NE.nonEmpty pre &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-56&#34;&gt;&lt;a href=&#34;#cb147-56&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-57&#34;&gt;&lt;a href=&#34;#cb147-57&#34;&gt;&lt;/a&gt;          &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; nePre &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; tokensLength pxy nePre&lt;/span&gt;
&lt;span id=&#34;cb147-58&#34;&gt;&lt;a href=&#34;#cb147-58&#34;&gt;&lt;/a&gt;      restOfLine &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;takeWhile&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;ch&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;) postStr&lt;/span&gt;
&lt;span id=&#34;cb147-59&#34;&gt;&lt;a href=&#34;#cb147-59&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-60&#34;&gt;&lt;a href=&#34;#cb147-60&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pxy ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-61&#34;&gt;&lt;a href=&#34;#cb147-61&#34;&gt;&lt;/a&gt;pxy &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Proxy&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-62&#34;&gt;&lt;a href=&#34;#cb147-62&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-63&#34;&gt;&lt;a href=&#34;#cb147-63&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;showMyToken ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-64&#34;&gt;&lt;a href=&#34;#cb147-64&#34;&gt;&lt;/a&gt;showMyToken &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; \&lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-65&#34;&gt;&lt;a href=&#34;#cb147-65&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; n)    &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;show&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb147-66&#34;&gt;&lt;a href=&#34;#cb147-66&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Plus&lt;/span&gt;       &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-67&#34;&gt;&lt;a href=&#34;#cb147-67&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Mul&lt;/span&gt;        &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-68&#34;&gt;&lt;a href=&#34;#cb147-68&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Div&lt;/span&gt;        &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-69&#34;&gt;&lt;a href=&#34;#cb147-69&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;OpenParen&lt;/span&gt;  &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb147-70&#34;&gt;&lt;a href=&#34;#cb147-70&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;CloseParen&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Stream&lt;/code&gt; 型クラスに関する詳しい参考資料 (そしてなぜこのようになっているのか)は &lt;a href=&#34;https://markkarpov.com/post/megaparsec-more-speed-more-power.html&#34;&gt;このブログ記事&lt;/a&gt; に書いてあります。&lt;/p&gt;
&lt;p&gt;これで &lt;code&gt;Parser&lt;/code&gt; 型が定義できます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb148&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb148-1&#34;&gt;&lt;a href=&#34;#cb148-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次のステップは、 &lt;code&gt;token&lt;/code&gt; と (意味があるなら)&lt;code&gt;tokens&lt;/code&gt; のプリミティブを使って、 基本的なパーサを定義することです。 そのまま使用できるストリームには、 &lt;code&gt;Text.Megaparsec.Byte&lt;/code&gt; および &lt;code&gt;Text.Megaparsec.Char&lt;/code&gt; モジュールが ありますが、カスタムトークンを使用する場合はカスタムヘルパーが必要です。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb149&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb149-1&#34;&gt;&lt;a href=&#34;#cb149-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;liftMyToken ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-2&#34;&gt;&lt;a href=&#34;#cb149-2&#34;&gt;&lt;/a&gt;liftMyToken myToken &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; pos pos &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; myToken&lt;/span&gt;
&lt;span id=&#34;cb149-3&#34;&gt;&lt;a href=&#34;#cb149-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-4&#34;&gt;&lt;a href=&#34;#cb149-4&#34;&gt;&lt;/a&gt;    pos &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; initialPos &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-5&#34;&gt;&lt;a href=&#34;#cb149-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-6&#34;&gt;&lt;a href=&#34;#cb149-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pToken ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyToken&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-7&#34;&gt;&lt;a href=&#34;#cb149-7&#34;&gt;&lt;/a&gt;pToken c &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; token test (Set.singleton &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Tokens&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; nes &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; liftMyToken &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb149-8&#34;&gt;&lt;a href=&#34;#cb149-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-9&#34;&gt;&lt;a href=&#34;#cb149-9&#34;&gt;&lt;/a&gt;    test (&lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; _ _ _ x) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-10&#34;&gt;&lt;a href=&#34;#cb149-10&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;kw&#34;&gt;if&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;==&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb149-11&#34;&gt;&lt;a href=&#34;#cb149-11&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;then&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; x&lt;/span&gt;
&lt;span id=&#34;cb149-12&#34;&gt;&lt;a href=&#34;#cb149-12&#34;&gt;&lt;/a&gt;        &lt;span class=&#34;kw&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-13&#34;&gt;&lt;a href=&#34;#cb149-13&#34;&gt;&lt;/a&gt;    nes x &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;op&#34;&gt;:|&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb149-14&#34;&gt;&lt;a href=&#34;#cb149-14&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-15&#34;&gt;&lt;a href=&#34;#cb149-15&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pInt ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-16&#34;&gt;&lt;a href=&#34;#cb149-16&#34;&gt;&lt;/a&gt;pInt &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; token test Set.empty &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-17&#34;&gt;&lt;a href=&#34;#cb149-17&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb149-18&#34;&gt;&lt;a href=&#34;#cb149-18&#34;&gt;&lt;/a&gt;    test (&lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; _ _ _ (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; n)) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; n&lt;/span&gt;
&lt;span id=&#34;cb149-19&#34;&gt;&lt;a href=&#34;#cb149-19&#34;&gt;&lt;/a&gt;    test _ &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最後に、足し算をパースするテストパーサを用意しましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb150&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb150-1&#34;&gt;&lt;a href=&#34;#cb150-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pSum ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb150-2&#34;&gt;&lt;a href=&#34;#cb150-2&#34;&gt;&lt;/a&gt;pSum &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb150-3&#34;&gt;&lt;a href=&#34;#cb150-3&#34;&gt;&lt;/a&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pInt&lt;/span&gt;
&lt;span id=&#34;cb150-4&#34;&gt;&lt;a href=&#34;#cb150-4&#34;&gt;&lt;/a&gt;  _ &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pToken &lt;span class=&#34;dt&#34;&gt;Plus&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb150-5&#34;&gt;&lt;a href=&#34;#cb150-5&#34;&gt;&lt;/a&gt;  b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pInt&lt;/span&gt;
&lt;span id=&#34;cb150-6&#34;&gt;&lt;a href=&#34;#cb150-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (a, b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;入力例は次のようにします。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb151&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb151-1&#34;&gt;&lt;a href=&#34;#cb151-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;exampleStream ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb151-2&#34;&gt;&lt;a href=&#34;#cb151-2&#34;&gt;&lt;/a&gt;exampleStream &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;MyStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb151-3&#34;&gt;&lt;a href=&#34;#cb151-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;st&#34;&gt;&amp;quot;5 + 6&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb151-4&#34;&gt;&lt;a href=&#34;#cb151-4&#34;&gt;&lt;/a&gt;  [ at &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb151-5&#34;&gt;&lt;a href=&#34;#cb151-5&#34;&gt;&lt;/a&gt;  , at &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Plus&lt;/span&gt;         &lt;span class=&#34;co&#34;&gt;-- (1)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb151-6&#34;&gt;&lt;a href=&#34;#cb151-6&#34;&gt;&lt;/a&gt;  , at &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;5&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb151-7&#34;&gt;&lt;a href=&#34;#cb151-7&#34;&gt;&lt;/a&gt;  ]&lt;/span&gt;
&lt;span id=&#34;cb151-8&#34;&gt;&lt;a href=&#34;#cb151-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb151-9&#34;&gt;&lt;a href=&#34;#cb151-9&#34;&gt;&lt;/a&gt;    at  l c &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;WithPos&lt;/span&gt; (at&amp;#39; l c) (at&amp;#39; l (c &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;)) &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb151-10&#34;&gt;&lt;a href=&#34;#cb151-10&#34;&gt;&lt;/a&gt;    at&amp;#39; l c &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SourcePos&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; (mkPos l) (mkPos c)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;試してみましょう。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb152&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb152-1&#34;&gt;&lt;a href=&#34;#cb152-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pSum &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;ex&#34;&gt;exampleStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb152-2&#34;&gt;&lt;a href=&#34;#cb152-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;ex&#34;&gt;5&lt;/span&gt;,6&lt;span class=&#34;kw&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;行(1)の &lt;code&gt;Plus&lt;/code&gt; を &lt;code&gt;Div&lt;/code&gt; に変更すると、正しいパースエラーが発生します。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb153&#34;&gt;&lt;pre class=&#34;sourceCode bash&#34;&gt;&lt;code class=&#34;sourceCode bash&#34;&gt;&lt;span id=&#34;cb153-1&#34;&gt;&lt;a href=&#34;#cb153-1&#34;&gt;&lt;/a&gt;λ&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;parseTest&lt;/span&gt; (pSum &lt;span class=&#34;op&#34;&gt;&amp;lt;&lt;/span&gt;* eof) &lt;span class=&#34;ex&#34;&gt;exampleStream&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb153-2&#34;&gt;&lt;a href=&#34;#cb153-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt;:3:&lt;/span&gt;
&lt;span id=&#34;cb153-3&#34;&gt;&lt;a href=&#34;#cb153-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb153-4&#34;&gt;&lt;a href=&#34;#cb153-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;ex&#34;&gt;5&lt;/span&gt; + 6&lt;/span&gt;
&lt;span id=&#34;cb153-5&#34;&gt;&lt;a href=&#34;#cb153-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;|&lt;/span&gt;   ^^&lt;/span&gt;
&lt;span id=&#34;cb153-6&#34;&gt;&lt;a href=&#34;#cb153-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;unexpected&lt;/span&gt; /&lt;/span&gt;
&lt;span id=&#34;cb153-7&#34;&gt;&lt;a href=&#34;#cb153-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ex&#34;&gt;expecting&lt;/span&gt; +&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;言い換えると、カスタムストリームのパースが可能な 十分に機能するパーサができました。&lt;/p&gt;
&lt;h2 id=&#34;演習の回答例puri-を完成させる&#34;&gt;演習の回答例(&lt;code&gt;pUri&lt;/code&gt; を完成させる)&lt;/h2&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb154&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb154-1&#34;&gt;&lt;a href=&#34;#cb154-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-2&#34;&gt;&lt;a href=&#34;#cb154-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards   #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-3&#34;&gt;&lt;a href=&#34;#cb154-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-4&#34;&gt;&lt;a href=&#34;#cb154-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-5&#34;&gt;&lt;a href=&#34;#cb154-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-6&#34;&gt;&lt;a href=&#34;#cb154-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Applicative&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (some,many)&lt;/span&gt;
&lt;span id=&#34;cb154-7&#34;&gt;&lt;a href=&#34;#cb154-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Control.Monad&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-8&#34;&gt;&lt;a href=&#34;#cb154-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-9&#34;&gt;&lt;a href=&#34;#cb154-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Void&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-10&#34;&gt;&lt;a href=&#34;#cb154-10&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-11&#34;&gt;&lt;a href=&#34;#cb154-11&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;hiding&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;State&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-12&#34;&gt;&lt;a href=&#34;#cb154-12&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-13&#34;&gt;&lt;a href=&#34;#cb154-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;T&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-14&#34;&gt;&lt;a href=&#34;#cb154-14&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;qualified&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text.Megaparsec.Char.Lexer&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;L&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-15&#34;&gt;&lt;a href=&#34;#cb154-15&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-16&#34;&gt;&lt;a href=&#34;#cb154-16&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parsec&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Void&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-17&#34;&gt;&lt;a href=&#34;#cb154-17&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-18&#34;&gt;&lt;a href=&#34;#cb154-18&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-19&#34;&gt;&lt;a href=&#34;#cb154-19&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; uriScheme    ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-20&#34;&gt;&lt;a href=&#34;#cb154-20&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; uriAuthority ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-21&#34;&gt;&lt;a href=&#34;#cb154-21&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; uriPath      ::&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb154-22&#34;&gt;&lt;a href=&#34;#cb154-22&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; uriQuery     ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-23&#34;&gt;&lt;a href=&#34;#cb154-23&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; uriFlagment  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-24&#34;&gt;&lt;a href=&#34;#cb154-24&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-25&#34;&gt;&lt;a href=&#34;#cb154-25&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-26&#34;&gt;&lt;a href=&#34;#cb154-26&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-27&#34;&gt;&lt;a href=&#34;#cb154-27&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeData&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-28&#34;&gt;&lt;a href=&#34;#cb154-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeFile&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-29&#34;&gt;&lt;a href=&#34;#cb154-29&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeFtp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-30&#34;&gt;&lt;a href=&#34;#cb154-30&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeHttp&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-31&#34;&gt;&lt;a href=&#34;#cb154-31&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeHttps&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-32&#34;&gt;&lt;a href=&#34;#cb154-32&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeIrc&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-33&#34;&gt;&lt;a href=&#34;#cb154-33&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;SchemeMailto&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-34&#34;&gt;&lt;a href=&#34;#cb154-34&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-35&#34;&gt;&lt;a href=&#34;#cb154-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-36&#34;&gt;&lt;a href=&#34;#cb154-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-37&#34;&gt;&lt;a href=&#34;#cb154-37&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; authUser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;) &lt;span class=&#34;co&#34;&gt;-- (user, password)&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-38&#34;&gt;&lt;a href=&#34;#cb154-38&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; authHost ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-39&#34;&gt;&lt;a href=&#34;#cb154-39&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; authPort ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-40&#34;&gt;&lt;a href=&#34;#cb154-40&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-41&#34;&gt;&lt;a href=&#34;#cb154-41&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-42&#34;&gt;&lt;a href=&#34;#cb154-42&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Scheme&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-43&#34;&gt;&lt;a href=&#34;#cb154-43&#34;&gt;&lt;/a&gt;pScheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice&lt;/span&gt;
&lt;span id=&#34;cb154-44&#34;&gt;&lt;a href=&#34;#cb154-44&#34;&gt;&lt;/a&gt;  [ &lt;span class=&#34;dt&#34;&gt;SchemeData&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-45&#34;&gt;&lt;a href=&#34;#cb154-45&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeFile&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-46&#34;&gt;&lt;a href=&#34;#cb154-46&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeFtp&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;ftp&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-47&#34;&gt;&lt;a href=&#34;#cb154-47&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeHttps&lt;/span&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-48&#34;&gt;&lt;a href=&#34;#cb154-48&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeHttp&lt;/span&gt;   &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-49&#34;&gt;&lt;a href=&#34;#cb154-49&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeIrc&lt;/span&gt;    &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;irc&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-50&#34;&gt;&lt;a href=&#34;#cb154-50&#34;&gt;&lt;/a&gt;  , &lt;span class=&#34;dt&#34;&gt;SchemeMailto&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&lt;/span&gt; string &lt;span class=&#34;st&#34;&gt;&amp;quot;mailto&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id=&#34;cb154-51&#34;&gt;&lt;a href=&#34;#cb154-51&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-52&#34;&gt;&lt;a href=&#34;#cb154-52&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;alternatives ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-53&#34;&gt;&lt;a href=&#34;#cb154-53&#34;&gt;&lt;/a&gt;alternatives &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; try foo &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; bar&lt;/span&gt;
&lt;span id=&#34;cb154-54&#34;&gt;&lt;a href=&#34;#cb154-54&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-55&#34;&gt;&lt;a href=&#34;#cb154-55&#34;&gt;&lt;/a&gt;    foo &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (,) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-56&#34;&gt;&lt;a href=&#34;#cb154-56&#34;&gt;&lt;/a&gt;    bar &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (,) &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-57&#34;&gt;&lt;a href=&#34;#cb154-57&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-58&#34;&gt;&lt;a href=&#34;#cb154-58&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPath ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb154-59&#34;&gt;&lt;a href=&#34;#cb154-59&#34;&gt;&lt;/a&gt;pPath &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice&lt;/span&gt;
&lt;span id=&#34;cb154-60&#34;&gt;&lt;a href=&#34;#cb154-60&#34;&gt;&lt;/a&gt;  [ pPathAbempty&lt;/span&gt;
&lt;span id=&#34;cb154-61&#34;&gt;&lt;a href=&#34;#cb154-61&#34;&gt;&lt;/a&gt;  , pPathAbsolute&lt;/span&gt;
&lt;span id=&#34;cb154-62&#34;&gt;&lt;a href=&#34;#cb154-62&#34;&gt;&lt;/a&gt;  , pPathNoScheme&lt;/span&gt;
&lt;span id=&#34;cb154-63&#34;&gt;&lt;a href=&#34;#cb154-63&#34;&gt;&lt;/a&gt;  , pPathRootless&lt;/span&gt;
&lt;span id=&#34;cb154-64&#34;&gt;&lt;a href=&#34;#cb154-64&#34;&gt;&lt;/a&gt;  , pPathEmpty&lt;/span&gt;
&lt;span id=&#34;cb154-65&#34;&gt;&lt;a href=&#34;#cb154-65&#34;&gt;&lt;/a&gt;  ]&lt;/span&gt;
&lt;span id=&#34;cb154-66&#34;&gt;&lt;a href=&#34;#cb154-66&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-67&#34;&gt;&lt;a href=&#34;#cb154-67&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPathAbempty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb154-68&#34;&gt;&lt;a href=&#34;#cb154-68&#34;&gt;&lt;/a&gt;pPathAbempty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; many (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; pSegment)&lt;/span&gt;
&lt;span id=&#34;cb154-69&#34;&gt;&lt;a href=&#34;#cb154-69&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-70&#34;&gt;&lt;a href=&#34;#cb154-70&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPathAbsolute ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb154-71&#34;&gt;&lt;a href=&#34;#cb154-71&#34;&gt;&lt;/a&gt;pPathAbsolute &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-72&#34;&gt;&lt;a href=&#34;#cb154-72&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-73&#34;&gt;&lt;a href=&#34;#cb154-73&#34;&gt;&lt;/a&gt;  option [] &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-74&#34;&gt;&lt;a href=&#34;#cb154-74&#34;&gt;&lt;/a&gt;    seg &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pSegmentNz&lt;/span&gt;
&lt;span id=&#34;cb154-75&#34;&gt;&lt;a href=&#34;#cb154-75&#34;&gt;&lt;/a&gt;    segs &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt;  many (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; pSegment)&lt;/span&gt;
&lt;span id=&#34;cb154-76&#34;&gt;&lt;a href=&#34;#cb154-76&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (seg&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;segs)&lt;/span&gt;
&lt;span id=&#34;cb154-77&#34;&gt;&lt;a href=&#34;#cb154-77&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-78&#34;&gt;&lt;a href=&#34;#cb154-78&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPathNoScheme ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb154-79&#34;&gt;&lt;a href=&#34;#cb154-79&#34;&gt;&lt;/a&gt;pPathNoScheme &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-80&#34;&gt;&lt;a href=&#34;#cb154-80&#34;&gt;&lt;/a&gt;  seg &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pSegmentNzNc&lt;/span&gt;
&lt;span id=&#34;cb154-81&#34;&gt;&lt;a href=&#34;#cb154-81&#34;&gt;&lt;/a&gt;  segs &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; many (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; pSegment)&lt;/span&gt;
&lt;span id=&#34;cb154-82&#34;&gt;&lt;a href=&#34;#cb154-82&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (seg&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;segs)&lt;/span&gt;
&lt;span id=&#34;cb154-83&#34;&gt;&lt;a href=&#34;#cb154-83&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-84&#34;&gt;&lt;a href=&#34;#cb154-84&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPathRootless ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb154-85&#34;&gt;&lt;a href=&#34;#cb154-85&#34;&gt;&lt;/a&gt;pPathRootless &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-86&#34;&gt;&lt;a href=&#34;#cb154-86&#34;&gt;&lt;/a&gt;  seg &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pSegmentNz&lt;/span&gt;
&lt;span id=&#34;cb154-87&#34;&gt;&lt;a href=&#34;#cb154-87&#34;&gt;&lt;/a&gt;  segs &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; many (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; pSegment)&lt;/span&gt;
&lt;span id=&#34;cb154-88&#34;&gt;&lt;a href=&#34;#cb154-88&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (seg&lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;segs)&lt;/span&gt;
&lt;span id=&#34;cb154-89&#34;&gt;&lt;a href=&#34;#cb154-89&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-90&#34;&gt;&lt;a href=&#34;#cb154-90&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPathEmpty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb154-91&#34;&gt;&lt;a href=&#34;#cb154-91&#34;&gt;&lt;/a&gt;pPathEmpty &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; []&lt;/span&gt;
&lt;span id=&#34;cb154-92&#34;&gt;&lt;a href=&#34;#cb154-92&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-93&#34;&gt;&lt;a href=&#34;#cb154-93&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pSegment ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-94&#34;&gt;&lt;a href=&#34;#cb154-94&#34;&gt;&lt;/a&gt;pSegment &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; many pPchar&lt;/span&gt;
&lt;span id=&#34;cb154-95&#34;&gt;&lt;a href=&#34;#cb154-95&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-96&#34;&gt;&lt;a href=&#34;#cb154-96&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pSegmentNz ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-97&#34;&gt;&lt;a href=&#34;#cb154-97&#34;&gt;&lt;/a&gt;pSegmentNz &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some pPchar&lt;/span&gt;
&lt;span id=&#34;cb154-98&#34;&gt;&lt;a href=&#34;#cb154-98&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-99&#34;&gt;&lt;a href=&#34;#cb154-99&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pSegmentNzNc ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-100&#34;&gt;&lt;a href=&#34;#cb154-100&#34;&gt;&lt;/a&gt;pSegmentNzNc &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some (pUnreserved &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; pPctEncoded &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; pSubDelims &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-101&#34;&gt;&lt;a href=&#34;#cb154-101&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-102&#34;&gt;&lt;a href=&#34;#cb154-102&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPchar ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-103&#34;&gt;&lt;a href=&#34;#cb154-103&#34;&gt;&lt;/a&gt;pPchar &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; pUnreserved &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; pPctEncoded &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; pSubDelims &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-104&#34;&gt;&lt;a href=&#34;#cb154-104&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-105&#34;&gt;&lt;a href=&#34;#cb154-105&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUnreserved ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-106&#34;&gt;&lt;a href=&#34;#cb154-106&#34;&gt;&lt;/a&gt;pUnreserved &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;~&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-107&#34;&gt;&lt;a href=&#34;#cb154-107&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-108&#34;&gt;&lt;a href=&#34;#cb154-108&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pPctEncoded ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-109&#34;&gt;&lt;a href=&#34;#cb154-109&#34;&gt;&lt;/a&gt;pPctEncoded &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-110&#34;&gt;&lt;a href=&#34;#cb154-110&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;%&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-111&#34;&gt;&lt;a href=&#34;#cb154-111&#34;&gt;&lt;/a&gt;  a &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; hexDigitChar&lt;/span&gt;
&lt;span id=&#34;cb154-112&#34;&gt;&lt;a href=&#34;#cb154-112&#34;&gt;&lt;/a&gt;  b &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; hexDigitChar&lt;/span&gt;
&lt;span id=&#34;cb154-113&#34;&gt;&lt;a href=&#34;#cb154-113&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;chr&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;digitToInt&lt;/span&gt; a)&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;16&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;digitToInt&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb154-114&#34;&gt;&lt;a href=&#34;#cb154-114&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-115&#34;&gt;&lt;a href=&#34;#cb154-115&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pSubDelims ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Char&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-116&#34;&gt;&lt;a href=&#34;#cb154-116&#34;&gt;&lt;/a&gt;pSubDelims &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; choice &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;map&lt;/span&gt; char &lt;span class=&#34;st&#34;&gt;&amp;quot;!$&amp;amp;&amp;#39;()*+,;=&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-117&#34;&gt;&lt;a href=&#34;#cb154-117&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-118&#34;&gt;&lt;a href=&#34;#cb154-118&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;pUri ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-119&#34;&gt;&lt;a href=&#34;#cb154-119&#34;&gt;&lt;/a&gt;pUri &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-120&#34;&gt;&lt;a href=&#34;#cb154-120&#34;&gt;&lt;/a&gt;  uriScheme &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pScheme &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;valid scheme&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-121&#34;&gt;&lt;a href=&#34;#cb154-121&#34;&gt;&lt;/a&gt;  void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-122&#34;&gt;&lt;a href=&#34;#cb154-122&#34;&gt;&lt;/a&gt;  uriAuthority &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-123&#34;&gt;&lt;a href=&#34;#cb154-123&#34;&gt;&lt;/a&gt;    void (string &lt;span class=&#34;st&#34;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-124&#34;&gt;&lt;a href=&#34;#cb154-124&#34;&gt;&lt;/a&gt;    authUser &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; try &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-125&#34;&gt;&lt;a href=&#34;#cb154-125&#34;&gt;&lt;/a&gt;      user &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-126&#34;&gt;&lt;a href=&#34;#cb154-126&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-127&#34;&gt;&lt;a href=&#34;#cb154-127&#34;&gt;&lt;/a&gt;      password &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-128&#34;&gt;&lt;a href=&#34;#cb154-128&#34;&gt;&lt;/a&gt;      void (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-129&#34;&gt;&lt;a href=&#34;#cb154-129&#34;&gt;&lt;/a&gt;      &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; (user, password)&lt;/span&gt;
&lt;span id=&#34;cb154-130&#34;&gt;&lt;a href=&#34;#cb154-130&#34;&gt;&lt;/a&gt;    authHost &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; some (alphaNumChar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hostname&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb154-131&#34;&gt;&lt;a href=&#34;#cb154-131&#34;&gt;&lt;/a&gt;    authPort &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; label &lt;span class=&#34;st&#34;&gt;&amp;quot;port number&amp;quot;&lt;/span&gt; L.decimal)&lt;/span&gt;
&lt;span id=&#34;cb154-132&#34;&gt;&lt;a href=&#34;#cb154-132&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Authority&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&#34;cb154-133&#34;&gt;&lt;a href=&#34;#cb154-133&#34;&gt;&lt;/a&gt;  uriPath &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; pPath&lt;/span&gt;
&lt;span id=&#34;cb154-134&#34;&gt;&lt;a href=&#34;#cb154-134&#34;&gt;&lt;/a&gt;  uriQuery &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; many (pPchar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;)))&lt;/span&gt;
&lt;span id=&#34;cb154-135&#34;&gt;&lt;a href=&#34;#cb154-135&#34;&gt;&lt;/a&gt;  uriFlagment &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; optional (T.pack &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; (char &lt;span class=&#34;ch&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;*&amp;gt;&lt;/span&gt; many (pPchar &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;|&amp;gt;&lt;/span&gt; char &lt;span class=&#34;ch&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;)) &lt;span class=&#34;op&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;flagment&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb154-136&#34;&gt;&lt;a href=&#34;#cb154-136&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Uri&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34; role=&#34;doc-endnote&#34;&gt;&lt;p&gt;RFC 3986 に従ってURIのパースが可能であり Megaparsec パーサを含む &lt;a href=&#34;https://hackage.haskell.org/package/modern-uri&#34;&gt;&lt;code&gt;modern-uri&lt;/code&gt;&lt;/a&gt; パッケージが実際にあります。ただし、パッケージのパーサはここで説明したものよりもはるかに複雑です。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34; role=&#34;doc-backlink&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html</id><title type="text">[mac] El Capitanへのアップグレード関連作業まとめ</title><updated>2019-07-13T19:19:56.684+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html"/><summary type="text">YosemiteからEl Capitan（10.11.2）へアップグレードしました。旧環境で起動できていたアプリケーションが起動できなくなったり、コマンドが見つからなくなる、といった問題が発生しましたが一通り解決できたので、その内容をまとめておきます。

＃ポストし忘れてた･･･。今更な情報ですが自分の備忘録の意味もあるので公開。


El Capitanの新機能に伴う問題・設定の修正

OS X El Capitan：日本語入力のライブ変換モードをオフにする

[システム環境設定] - [キーボード]を開く
[入力ソース]タブを選択
「ライブ変換」のチェックを外す





MacPortsのアップデート

Yosemite環境でインストールしたMacPortsはそのままでは利用できない。以下のようなエラーメッセージが表示される。
% port qv installed
Error: </summary></entry><entry><id>https://haskell.jp/blog/posts/2019/strip-ansi-escape.html</id><title type="text">strip-ansi-escapeというパッケージをリリースしました</title><updated>2019-07-08T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/strip-ansi-escape.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;現職で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を仕事で書き始めるようになってからというもの、度々小さなパッケージをリリースするようになりました。&lt;br /&gt;
敢えてパッケージにするほどのものでもなさそうなぐらい小さなものが多いですが、もし再利用したくなったらな、という気持ちで書いております。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#なに作ったか&#34; title=&#34;なに作ったか&#34;&gt;なに作ったか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#なぜ作ったか&#34; title=&#34;なぜ作ったか&#34;&gt;なぜ作ったか&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#最近のmmlh&#34; title=&#34;最近のmmlh&#34;&gt;最近の&lt;span class=&#34;ascii&#34;&gt;mmlh&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;なに作ったか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#なに作ったか&#34; title=&#34;なに作ったか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;なに作ったか&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/strip-ansi-escape&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;strip-ansi-escape&lt;/span&gt;&lt;/a&gt;というパッケージです。&lt;br /&gt;
今回もメインの処理は&lt;span class=&#34;ascii&#34;&gt;100&lt;/span&gt;行にも満たないような小さなもので、また用途もニッチです。&lt;br /&gt;
具体的には、名前のとおり&lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコード&lt;/a&gt;を文字列から取り除く、ただそれだけです。&lt;br /&gt;
使い方も極めてシンプル&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.String.AnsiEscapeCodes.Strip.Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-2&#34; title=&#34;2&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-3&#34; title=&#34;3&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 現状Text型向けにしか作っていないため、OverloadedStringsを有効にした方が使いやすい&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-4&#34; title=&#34;4&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;:&lt;/span&gt;set &lt;span class=&#34;op&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;dt&#34;&gt;XOverloadedStrings&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-5&#34; title=&#34;5&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Text&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-6&#34; title=&#34;6&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-7&#34; title=&#34;7&#34;&gt;&lt;span class=&#34;co&#34;&gt;-- 出力すると下線付きで &amp;quot;hello&amp;quot; と表示されるANSIエスケープコード付きの文字列&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-8&#34; title=&#34;8&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;\x001B[4mhello\x001B[0m&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-9&#34; title=&#34;9&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;\ESC[4mhello\ESC[0m&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-10&#34; title=&#34;10&#34;&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-11&#34; title=&#34;11&#34;&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; stripAnsiEscapeCodes &lt;span class=&#34;st&#34;&gt;&amp;quot;\x001B[4mhello\x001B[0m&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-12&#34; title=&#34;12&#34;&gt;&lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;なぜ作ったか&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#なぜ作ったか&#34; title=&#34;なぜ作ったか&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;なぜ作ったか&lt;/h1&gt;
&lt;p&gt;通常我々が&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを扱うときは、&lt;strong&gt;ユーザーのために&lt;/strong&gt;端末に文字列を分かりやすく表示したいときで、それをプログラムで再利用することは想定していません。&lt;br /&gt;
そのため&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを出力できるアプリケーションは、大抵の場合出力しないよう設定できる&lt;small&gt;（あるいは、出力先が&lt;span class=&#34;ascii&#34;&gt;tty&lt;/span&gt;でないことを検出して出力しない）&lt;/small&gt;ようになっています。&lt;br /&gt;
なので、プログラムが&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードの混ざった文字列を扱わざるを得ない、という事態は、何かがおかしい事態だと言えるでしょう。&lt;/p&gt;
&lt;p&gt;一体どういう事態なのかというと、それは私がずっと開発中の、対話的&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門コンテンツ — &lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell&#34;&gt;「失敗しながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」&lt;/a&gt; — で出遭った事態でした。&lt;br /&gt;
「失敗しながら学ぶ&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;入門」（以下、英語名を略して「&lt;span class=&#34;ascii&#34;&gt;mmlh&lt;/span&gt;」と呼びます）では、ユーザーが書いた&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースコードを受け取って、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;にコンパイルさせることで、型エラーなどのエラーメッセージを取得しています。&lt;br /&gt;
当初から&lt;span class=&#34;ascii&#34;&gt;mmlh&lt;/span&gt;はそれを簡単にパースしてユーザーへのヒントを出すのに使ったり、ユーザーにそのまま表示したりするのに使うため、&lt;code&gt;-fdiagnostics-color=always&lt;/code&gt;というオプションを&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;に渡していました。&lt;br /&gt;
これは、エラーメッセージに色を着けるようになった&lt;span class=&#34;ascii&#34;&gt;GHC 8.2&lt;/span&gt;から導入されたオプションで、「エラーメッセージに必ず&lt;small&gt;（&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを使って）&lt;/small&gt;色を着ける」というものです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が出すエラーメッセージを「簡単にパース」しつつ「ユーザーにそのまま表示」する、という&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;つの要件を満たすためには、このオプションを利用して、強制的にエラーメッセージに色を着ける必要がありました。&lt;/p&gt;
&lt;p&gt;さらに最近、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が出したエラーメッセージをファイルに保存して、&lt;a href=&#34;https://github.com/haskell-jp/makeMistakesToLearnHaskell/issues/101&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;で閲覧できるようにする&lt;/a&gt;&lt;small&gt;（正確には、閲覧して各行にコメントできるようにする）&lt;/small&gt;、という機能も追加した結果、&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを取り除かざるを得なくなってしまったのです。&lt;br /&gt;
というのも、&lt;code&gt;-fdiagnostics-color=always&lt;/code&gt;を有効にしている限り、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;は必ず&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードをエラーメッセージに混ぜるので、ファイルに保存して&lt;span class=&#34;ascii&#34;&gt;GitHub&lt;/span&gt;上で表示する際、下記のように余計な文字として混ざってしまい、エラーメッセージが読みづらくなってしまうためです。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;�[;1m16.hs:19:18: �[;1m�[31merror:�[0m�[0m�[;1m�[0m�[0m�[;1m
    • No instance for (Num ([Char], String))
        arising from a use of ‘countWords’
    • In the expression: countWords (concat wordsList)
      In an equation for ‘countMap’:
          countMap = countWords (concat wordsList)
      In the expression:
        do paths &amp;lt;- getArgs
           wordsList &amp;lt;- for paths scrapeWords
           let countMap = countWords (concat wordsList)
           for_ (toList countMap) catCount�[0m�[0m
�[;1m�[34m   |�[0m�[0m
�[;1m�[34m19 |�[0m�[0m   let countMap = �[;1m�[31mcountWords (concat wordsList)�[0m�[0m
�[;1m�[34m   |�[0m�[0m�[;1m�[31m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^�[0m�[0m
�[0m�[0m�[0m&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-fdiagnostics-color=always&lt;/code&gt;を有効にしなければこんな問題は起こらないのですが、そうすると今度はユーザーにエラーメッセージを表示させる際、色が着かなくなってしまいます。&lt;br /&gt;
せっかく&lt;span class=&#34;ascii&#34;&gt;GHC 8.2&lt;/span&gt;以降を使っているのに色つきのエラーメッセージが見られないのは残念ですよね。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;2&lt;/span&gt;回実行することで、ユーザーに表示する用のエラーメッセージとファイルに保存する用のエラーメッセージを分けることもできますが、それでは効率が悪いでしょうし。&lt;/p&gt;
&lt;p&gt;そんなわけで、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が出力するエラーメッセージを&lt;strong&gt;ユーザーに端末上で表示する用途と、&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを解釈しない箇所で表示する用途&lt;/strong&gt;、両方に使用したくなったため、今回敢えて&lt;span class=&#34;ascii&#34;&gt;ANSI&lt;/span&gt;エスケープコードを取り除くライブラリーを作りました。&lt;br /&gt;
もし他に同じような事態に出遭った方がいらっしゃいましたら、試してみてください🙏&lt;/p&gt;
&lt;h1 id=&#34;最近のmmlh&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#最近のmmlh&#34; title=&#34;最近のmmlh&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;最近の&lt;span class=&#34;ascii&#34;&gt;mmlh&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;ついでにここ数ヶ月弊社でやっている、&lt;span class=&#34;ascii&#34;&gt;mmlh&lt;/span&gt;を使った社内勉強会のお話も書こうかと思いましたが、やっぱり社内でのことなんで、&lt;a href=&#34;https://eng-blog.iij.ad.jp/&#34;&gt;会社のブログ&lt;/a&gt;に書くことにします。&lt;br /&gt;
&lt;del&gt;多分今週中には上げますので乞うご期待！&lt;/del&gt;&lt;br /&gt;
⬇️大分遅くなってしまいましたが公開しました！&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://eng-blog.iij.ad.jp/archives/3467&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;社内勉強会と&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;学習ツールの紹介 &lt;span class=&#34;ascii&#34;&gt;| IIJ Engineers Blog&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/fallible.html&#34; lang=&#34;ja&#34;&gt;fallibleというパッケージをリリースしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/asterius.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;AsteriusでHaskellの関数をJSから呼べるようにしてみた（けど失敗）（拡大版）&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/06/213029</id><title type="text">Docker Meetup Tokyo #31 で Kubernetes 1.15 について話してきました</title><updated>2019-07-06T21:30:29+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/06/213029"/><summary type="html">先日行われた Docker Meetup Tokyo #31 で、Kubernetes 1.15 の Scheduler 周りの新機能について発表してきました。 Kubernetes の Pod Preemption を利用すると、より重要な Pod にノードの計算リソースを割り当てる優先的に割り当てることができ、コストの最適化につながります。しかし優先度の低い Pod は実行中に強制的に終了されることとなり、長時間かかるバッチ処理が途中で中断されてしまうという弊害もあります。 本スライドでは、Kubernetes 1.15 から Alpha 機能として導入された NonPreemptingP…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/05/155146</id><title type="text">Kubernetes 1.15: SIG Scheduling の変更内容</title><updated>2019-07-05T15:51:46+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/05/155146"/><summary type="html">はじめに 本記事では、Kubernetes 1.15 のリリースノート からスケジューリングに関する内容をまとめました。 なお、SIG Scheduling の変更内容については既に他の方から翻訳記事が出ていますが、本記事は後発ということもあり、すべての機能を実際に触ってみた上でサンプルコードを添えて解説していきます。 Kubernetes 1.15: SIG Scheduling の変更内容 1.15 の新着情報 (1.15 What’s New) 今回、完全な変更ログは https://relnotes.k8s.io/ で、絞り込み可能なフォーマットで公開されています。確認とフィードバック…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/06/13/155557</id><title type="text">Traversable API</title><updated>2019-06-15T15:54:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/06/13/155557"/><summary type="html">与えられたConnectionを通じて、指定したKeyに対応するByteStringを取り出すような、シンプルなKey-ValueストアのAPIを考えてみよう。 type Key = ByteString fetchOne :: Connection -&gt; Key -&gt; IO ByteString ネットワーク越しにたくさんのデータを取得したいとき、何度もこれを呼び出していては効率が悪い。一度にまとめて取り出せるように拡張するなら、このように書ける。 fetchMany :: Connection -&gt; [Key] -&gt; IO [ByteString] 悪くはないが、この型はたとえば「[&#34;fo…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/05/29/194539</id><title type="text">Fun Fun Functional (1) で Haskell と Firebase を使ってライブコーディングしてきました</title><updated>2019-05-29T19:45:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/05/29/194539"/><summary type="html">先日行われた Fun Fun Functional (1) で、Haskell と Firebase を使った Web アプリの作り方について発表してきました。 使用した要素技術は、GHCJS 上のフレームワーク Miso と、Fireabse SDK を呼び出すための DSL である JSaddle です。 GHCJS は Haskell のソースコードを JavaScript に変換するコンパイラで、GHC をフォークすることによって開発されています。 github.com Miso は GHCJS 上で The Elm Architecture を実装するためのフレームワークです。Mis…</summary></entry><entry><id>https://haskell.jp/blog/posts/2019/asterius.html</id><title type="text">AsteriusでHaskellの関数をJSから呼べるようにしてみた（けど失敗）（拡大版）</title><updated>2019-05-04T00:00:00Z</updated><author><name>Haskell-jp</name></author><link href="https://haskell.jp/blog/posts/2019/asterius.html"/><summary type="html">
&lt;article lang=&#34;ja&#34;&gt;

    &lt;div class=&#34;container&#34;&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-8 col-md-offset-1 col-md-10&#34;&gt;
                &lt;ul class=&#34;social-buttons&#34;&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a href=&#34;https://twitter.com/share&#34; class=&#34;twitter-share-button&#34;&gt;Tweet&lt;/a&gt;
                        &lt;script&gt;!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?&#39;http&#39;:&#39;https&#39;;if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+&#39;://platform.twitter.com/widgets.js&#39;;fjs.parentNode.insertBefore(js,fjs);}}(document, &#39;script&#39;, &#39;twitter-wjs&#39;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;
                            reddit_target = &#34;haskell_jp&#34;;
                            reddit_title  = document.title;
                        &lt;/script&gt;
                        &lt;script type=&#34;text/javascript&#34; src=&#34;//www.redditstatic.com/button/button1.js&#34;&gt;&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;div&gt;
                        &lt;a data-pocket-label=&#34;pocket&#34; data-pocket-count=&#34;horizontal&#34; class=&#34;pocket-btn&#34; data-lang=&#34;en&#34;&gt;&lt;/a&gt;
                        &lt;script type=&#34;text/javascript&#34;&gt;!function(d,i){if(!d.getElementById(i)){var j=d.createElement(&#34;script&#34;);j.id=i;j.src=&#34;https://widgets.getpocket.com/v1/j/btn.js?v=1&#34;;var w=d.getElementById(i);d.body.appendChild(j);}}(document,&#34;pocket-btn-js&#34;);&lt;/script&gt;
                    &lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;row&#34;&gt;
            &lt;div id=&#34;md-post-content&#34; class=&#34;col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1&#34;&gt;
              &lt;hr /&gt;
&lt;p&gt;先日、&lt;a href=&#34;https://emsn.connpass.com/event/121028/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Emscripten &amp;amp; WebAssembly night !! #7&lt;/span&gt;&lt;/a&gt;というイベントにて、&lt;a href=&#34;https://tweag.github.io/asterius/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;にコンパイルするツールについて紹介いたしました。&lt;br /&gt;
資料はこちら👇です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://the.igreque.info/slides/2019-04-19-asterius.html#(1)&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数を&lt;span class=&#34;ascii&#34;&gt;JS&lt;/span&gt;から呼べるようにしてみた（けど失敗）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本日は、スライドの英語で書いていた箇所を和訳しつつ、いろいろ捕捉してブログ記事の形で共有します。&lt;/p&gt;
&lt;div id=&#34;table-of-contents-outer&#34;&gt;
&lt;div id=&#34;table-of-contents&#34;&gt;
&lt;div class=&#34;table-of-contents-title&#34;&gt;
Contents
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusとは何か&#34; title=&#34;asteriusとは何か&#34;&gt;🔍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;とは何か&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusのいいところ&#34; title=&#34;asteriusのいいところ&#34;&gt;👍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のいいところ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusのイマイチなところ&#34; title=&#34;asteriusのイマイチなところ&#34;&gt;👎&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のイマイチなところ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusの仕組み&#34; title=&#34;asteriusの仕組み&#34;&gt;⚙️&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の仕組み&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#asteriusでhaskell製の関数を実行してみた&#34; title=&#34;asteriusでhaskell製の関数を実行してみた&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の関数を実行してみた&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#結果&#34; title=&#34;結果&#34;&gt;結果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;✅おわりに&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;asteriusとは何か&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusとは何か&#34; title=&#34;asteriusとは何か&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;🔍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;とは何か&lt;/h1&gt;
&lt;p&gt;冒頭でも触れたとおり、&lt;a href=&#34;https://tweag.github.io/asterius/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;&lt;/a&gt;は&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースを&lt;a href=&#34;https://developer.mozilla.org/ja/docs/WebAssembly&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;&lt;/a&gt;にコンパイルするコンパイラーです。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;HEAD&lt;/span&gt;&lt;small&gt;（開発中のバージョン）&lt;/small&gt;を都度フォークして、現在活発に開発中です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;と、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;標準における&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;を行う関数（の大半）を除いた、すべての機能が利用できるようになっています。&lt;br /&gt;
現状の&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;を実用する上で必要不可欠であろう、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;もサポートされています。&lt;br /&gt;
つまり、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;にコンパイルされた&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数を呼んだり、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数を呼ぶことができます！&lt;br /&gt;
何かしらの&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;処理を行う場合は、基本的にこの&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;を使って&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数を呼ぶことになります。&lt;/p&gt;
&lt;p&gt;加えて、&lt;code&gt;ahc-cabal&lt;/code&gt;という名前のコマンドで、&lt;span class=&#34;ascii&#34;&gt;cabal&lt;/span&gt;パッケージを利用することもできます。&lt;br /&gt;
こちらは&lt;code&gt;cabal&lt;/code&gt;コマンドの単純なラッパーです。&lt;code&gt;ahc-cabal new-build&lt;/code&gt;などと実行すれば、外部のパッケージに依存したアプリケーションも、まとめて&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;にコンパイルできます。&lt;br /&gt;
本格的に開発する上では欠かせないツールでしょう。&lt;/p&gt;
&lt;h1 id=&#34;asteriusのいいところ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusのいいところ&#34; title=&#34;asteriusのいいところ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👍&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のいいところ&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は、“&lt;span class=&#34;ascii&#34;&gt;A linker which performs aggressive dead-code elimination, producing as small WebAssembly binary as possible.&lt;/span&gt;”と謳っているとおり、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;のランタイムを抱えているにしては、比較的小さい&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;ファイルを生成するそうです。&lt;br /&gt;
というわけで手元で試してみたところ、下記のような結果になりました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空っぽのプログラム（&lt;code&gt;main = return ()&lt;/code&gt;しかしないソース）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;36KB&lt;/span&gt;（&lt;code&gt;.wasm&lt;/code&gt;ファイルのみ）。なかなかいい感じですね。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;168KB&lt;/span&gt;（実行時に必要な&lt;code&gt;.mjs&lt;/code&gt;ファイルを含めた合計）。未圧縮でこれなら確かに十分軽いでしょう。&lt;span class=&#34;ascii&#34;&gt;Webpack&lt;/span&gt;などで結合・&lt;span class=&#34;ascii&#34;&gt;minify&lt;/span&gt;するともっと軽くできますし。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今回私が移植を試みたアプリ（詳細は後ほど）&lt;span class=&#34;ascii&#34;&gt;:&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;1.9MB&lt;/span&gt;（&lt;code&gt;.wasm&lt;/code&gt;ファイルのみ）。うーん、ちょっと苦しいような…😥。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;2.1MB&lt;/span&gt;（実行時に必要な&lt;code&gt;.mjs&lt;/code&gt;ファイルを含めた合計）。&lt;code&gt;.mjs&lt;/code&gt;ファイルの内容は特に変わりませんでした。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに、移植前の元のソースを含むアプリを、&lt;span class=&#34;ascii&#34;&gt;Linux 64bit&lt;/span&gt;向けの&lt;span class=&#34;ascii&#34;&gt;ELF&lt;/span&gt;ファイルとしてビルドして比較してみたところ、&lt;code&gt;.wasm&lt;/code&gt;ファイルよりも少し小さいぐらいでした。&lt;br /&gt;
詳細な内訳が気にはなりますが、今のソースですと大体これぐらいが限界なのかも知れません&lt;small&gt;（でも&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;は現状&lt;span class=&#34;ascii&#34;&gt;32bit&lt;/span&gt;バイナリー相当のはずだし、もう少し小さくならないものか…）&lt;/small&gt;。&lt;/p&gt;
&lt;p&gt;加えて、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;を利用して開発すると、ほぼ最新の&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;の開発版が使える、というところも、新しもの好きな&lt;span class=&#34;ascii&#34;&gt;Haskeller&lt;/span&gt;をわくわくさせるところですね！&lt;small&gt;（今回はあいにく新しい機能について調べる余裕もなかったので、特に恩恵は受けてませんが…😅）&lt;/small&gt;&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;をフォークしていくつかの機能を追加して作られているものです。&lt;br /&gt;
しかし幸いオリジナルとの差分が十分に小さく、作者が定期的に&lt;span class=&#34;ascii&#34;&gt;rebase&lt;/span&gt;することができています。&lt;br /&gt;
詳細な違いは&lt;a href=&#34;https://tweag.github.io/asterius/custom-ghc/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;About the custom GHC fork&lt;/span&gt;&lt;/a&gt;にまとまっています。近い将来&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;本体に取り込まれそうな修正ばかりではないかと。&lt;/p&gt;
&lt;p&gt;それからこれは、ブラウザーで&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を動かすことができるという点で&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の競合に当たる、&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt;と比較した場合の話ですが、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;を利用して、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から&lt;strong&gt;直接&lt;/strong&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を呼ぶことができるようになっているのも、優れた点と言えるでしょう。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHCJS&lt;/span&gt;は&lt;a href=&#34;https://github.com/ghcjs/ghcjs/blob/3959a9321a2d3e2ad4b8d4c9cc436fcfece99237/doc/foreign-function-interface.md#calling-haskell-from-javascript&#34;&gt;こちらのドキュメント曰く&lt;/a&gt;、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を呼ぶ機能は備えてはいるものの、簡単ではないためドキュメントも書かれておらず、推奨されていません。&lt;br /&gt;
これでは状況によってはかなり使いづらいでしょう。&lt;br /&gt;
今回私が試したように、コアとなる処理だけを&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;の関数として書いて、それを&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から呼び出すということができないのです。&lt;/p&gt;
&lt;p&gt;一方&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;では、例えば👇のように書くことで、&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;がエクスポートする関数として、&lt;code&gt;func&lt;/code&gt;を&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から呼べるようにすることができます！&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode hs&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;a class=&#34;sourceLine&#34; id=&#34;cb1-1&#34; title=&#34;1&#34;&gt;foreign export javascript &lt;span class=&#34;st&#34;&gt;&amp;quot;func&amp;quot;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; func ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ただし、実際に今回試してみたところ、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;ではまだバグがあったので、この用途では依然使いにくいという状況ではありますが…（詳細は後で触れます）。&lt;/p&gt;
&lt;h1 id=&#34;asteriusのイマイチなところ&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusのイマイチなところ&#34; title=&#34;asteriusのイマイチなところ&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;👎&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のイマイチなところ&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は、やっぱりまだまだ開発中で、バグが多いです。&lt;br /&gt;
今回の目的もバグのために果たせませんでした😢。&lt;/p&gt;
&lt;p&gt;先ほども触れたとおり、特に未完成なのが、&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;と&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;です。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;なら使えるはずの&lt;code&gt;IO&lt;/code&gt;な関数の多くが使えませんし、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;に至っては一切利用できません。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;については、現状、&lt;small&gt;（&lt;code&gt;putStrLn&lt;/code&gt;などのよく使われる）&lt;/small&gt;一部を除き、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;&lt;small&gt;（&lt;code&gt;foreign import javascript&lt;/code&gt;）&lt;/small&gt;を使って&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数経由でよばなけれなりません。&lt;br /&gt;
これは、入出力関連の&lt;span class=&#34;ascii&#34;&gt;API&lt;/span&gt;を一切持たないという現状の&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;の事情を考えれば、致し方ない仕様だとも言えます。&lt;br /&gt;
&lt;a href=&#34;https://github.com/WebAssembly/WASI&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;WASI&lt;/span&gt;&lt;/a&gt;の策定によってこの辺の事情が変わるまでの間に、すべて&lt;code&gt;foreign import javascript&lt;/code&gt;で賄うというのも、なかなか面倒なことでしょうし。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;に関しては、現在&lt;a href=&#34;https://github.com/tweag/asterius/pull/81&#34;&gt;こちらのブランチ&lt;/a&gt;で開発中です。…と、思ったらこの&lt;span class=&#34;ascii&#34;&gt;Pull request&lt;/span&gt;、&lt;span class=&#34;ascii&#34;&gt;Close&lt;/span&gt;されてますね…。&lt;br /&gt;
これに関して詳しい事情はわかりません。いずれにしても、&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;を実装するには、コンパイル時にその場で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を評価するためのインタープリターが別途必要だったりして、結構ハードルが高いのです。&lt;/p&gt;
&lt;p&gt;加えて、&lt;span class=&#34;ascii&#34;&gt;RTS&lt;/span&gt;&lt;small&gt;（この場合、コンパイルした&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を動かすのに必要な&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;ファイル）&lt;/small&gt;が&lt;a href=&#34;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;に依存している関係で、&lt;span class=&#34;ascii&#34;&gt;V8&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;SpiderMonkey&lt;/span&gt;でないと動かない点もまだまだ、という感じです。&lt;br /&gt;
ブラウザーで言うと、&lt;span class=&#34;ascii&#34;&gt;2019&lt;/span&gt;年&lt;span class=&#34;ascii&#34;&gt;5&lt;/span&gt;月&lt;span class=&#34;ascii&#34;&gt;3&lt;/span&gt;日時点で&lt;span class=&#34;ascii&#34;&gt;Chrome&lt;/span&gt;か、&lt;span class=&#34;ascii&#34;&gt;Firefox&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;Beta&lt;/span&gt;版以降でないと使用できません&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;asteriusの仕組み&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusの仕組み&#34; title=&#34;asteriusの仕組み&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;⚙️&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の仕組み&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;のドキュメント「&lt;a href=&#34;https://tweag.github.io/asterius/ir/&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;IR types and transformation passes&lt;/span&gt;&lt;/a&gt;」をざっくり要約してみると、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は以下のような流れで動くそうです。&lt;br /&gt;
実際には&lt;code&gt;ahc-link&lt;/code&gt;というコマンドがこれらの手順をまとめて実行するので、ユーザーの皆さんはあまり意識する必要はないでしょう。&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;a href=&#34;https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/extending_ghc.html#frontend-plugins&#34;&gt;フロントエンドプラグイン&lt;/a&gt;という仕組みでラップした&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;&lt;small&gt;（のフォーク）&lt;/small&gt;を使い、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;が生成した&lt;span class=&#34;ascii&#34;&gt;Cmm&lt;/span&gt;という中間言語で書かれたコードを、&lt;code&gt;AsteriusModule&lt;/code&gt;という独自のオブジェクトに変換します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ahc-ld&lt;/code&gt;という専用のリンカーで、&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;向けにリンクします。&lt;/li&gt;
&lt;li&gt;最後に、&lt;code&gt;ahc-dist&lt;/code&gt;というコマンドで、リンクしたモジュールを実行できる状態にします。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/WebAssembly/binaryen&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;binaryen&lt;/span&gt;&lt;/a&gt;か、&lt;a href=&#34;https://github.com/tweag/asterius/tree/master/wasm-toolkit&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;wasm-toolkit&lt;/span&gt;&lt;/a&gt;という&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;WASM&lt;/span&gt;を書く言語内&lt;span class=&#34;ascii&#34;&gt;DSL&lt;/span&gt;を利用して、&lt;code&gt;ahc-ld&lt;/code&gt;がリンクしたモジュールを検証し、&lt;code&gt;.wasm&lt;/code&gt;ファイルに変換して、&lt;/li&gt;
&lt;li&gt;実行時に必要な&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;ファイルをコピーして、&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;のソースにおける&lt;code&gt;main&lt;/code&gt;関数を実行する、エントリーモジュールを作ります。&lt;br /&gt;
あとはこれを&lt;span class=&#34;ascii&#34;&gt;HTML&lt;/span&gt;ファイルから&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;タグで参照すれば、ブラウザー上で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;が動きます。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;asteriusでhaskell製の関数を実行してみた&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#asteriusでhaskell製の関数を実行してみた&#34; title=&#34;asteriusでhaskell製の関数を実行してみた&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製の関数を実行してみた&lt;/h1&gt;
&lt;p&gt;ここからは、私が以前作った&lt;a href=&#34;https://github.com/igrep/igrep-cashbook/tree/master/hs2&#34;&gt;アプリケーション&lt;/a&gt;のコアに当たる関数を&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;でコンパイルすることで、ブラウザー上で動かせるようチャレンジした時の体験談を紹介します。&lt;/p&gt;
&lt;p&gt;今回試みたアプリケーションは、単純なコマンドラインアプリケーションです。&lt;br /&gt;
詳細は省きますが、行単位で書かれたファイルをパースして、項目ごとの合計を計算するだけの、ありふれたものです。&lt;br /&gt;
パーサーは&lt;a href=&#34;http://hackage.haskell.org/package/megaparsec&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;megaparsec&lt;/span&gt;&lt;/a&gt;を使って作り、整数の四則演算ができるようなっているのも特徴です。&lt;br /&gt;
そのアプリケーションの処理のほとんどすべてに当たる、ファイル名とその中身を受け取って、計算結果を文字列で返す関数（&lt;code&gt;FilePath -&amp;gt; Text -&amp;gt; Text&lt;/code&gt;）を、&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;でエクスポート&lt;small&gt;（&lt;code&gt;foreign export javascript&lt;/code&gt;）&lt;/small&gt;し、&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;から呼べるようにしてみました。&lt;/p&gt;
&lt;p&gt;アプリケーション自体の書き換えはほとんど必要なかったものの、依存関係を減らしたり、依存するパッケージを書き換えたりするのが大変でした。&lt;br /&gt;
というのも、先ほど触れたとおり、&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;は現状「&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;と、&lt;span class=&#34;ascii&#34;&gt;GHC&lt;/span&gt;標準における&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;を行う関数（の大半）」が一切使用できないので、取り除かなければコンパイルエラーになってしまいます。&lt;br /&gt;
&lt;span class=&#34;ascii&#34;&gt;template-haskell&lt;/span&gt;パッケージに間接的に依存しているだけで依存関係の解決すらできないのはなかなかつらいものでした。&lt;br /&gt;
&lt;a href=&#34;https://docs.haskellstack.org/en/stable/dependency_visualization/&#34;&gt;&lt;code&gt;stack dot&lt;/code&gt;&lt;/a&gt;コマンドを使って依存関係のツリーを作り、それを見て&lt;span class=&#34;ascii&#34;&gt;template-haskell&lt;/span&gt;パッケージに間接的に依存しているパッケージを割り出し、そのパッケージの必要な関数のみを切り出すことでどうにか回避できました。&lt;br /&gt;
&lt;a href=&#34;http://hackage.haskell.org/package/monoidal-containers&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;monoidal-containers&lt;/span&gt;&lt;/a&gt;パッケージと&lt;a href=&#34;http://hackage.haskell.org/package/foldl&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;foldl&lt;/span&gt;&lt;/a&gt;パッケージがそれでした。&lt;br /&gt;
幸い、どちらも依存しているのはごく一部だったで、必要な部分だけをコピペして使うことにしました。&lt;br /&gt;
それから、&lt;code&gt;IO&lt;/code&gt;への依存もなくすために、&lt;a href=&#34;http://hackage.haskell.org/package/text&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;text&lt;/span&gt;&lt;/a&gt;パッケージから&lt;code&gt;*.IO&lt;/code&gt;なモジュールを取り除いたりもしました。&lt;/p&gt;
&lt;p&gt;当然、元々のアプリケーションも&lt;span class=&#34;ascii&#34;&gt;text&lt;/span&gt;パッケージの&lt;code&gt;*.IO&lt;/code&gt;なモジュールを使ってはいたので、それを使わないよう修正する必要がありました。&lt;br /&gt;
しかしそこは&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;。そうした&lt;code&gt;IO&lt;/code&gt;に依存した関数から純粋な関数を切り出すのは、型システムのおかげで大変楽ちんでした！😤&lt;br /&gt;
入出力をするのに&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;を使わないといけない、という現状の&lt;span class=&#34;ascii&#34;&gt;WebAssembly&lt;/span&gt;の制約が、偶然にもマッチしたわけですね！&lt;br /&gt;
純粋じゃない関数はときめかないので捨て去ってしまいましょう✨&lt;/p&gt;
&lt;h2 id=&#34;結果&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#結果&#34; title=&#34;結果&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;結果&lt;/h2&gt;
&lt;p&gt;ここまで頑張った結果、目的の関数を&lt;code&gt;foreign export javascript&lt;/code&gt;してコンパイルを通すことはできました🎉&lt;br /&gt;
しかし、実際にブラウザー上で動かしてみたところ、&lt;a href=&#34;https://github.com/tweag/asterius/issues/105&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;の&lt;span class=&#34;ascii&#34;&gt;FFI&lt;/span&gt;のバグ&lt;/a&gt;にハマってしまいました…😢 肝心の&lt;code&gt;foreign export javascript&lt;/code&gt;した関数が、返すべき値を返してくれないのです！&lt;br /&gt;
恐らく&lt;code&gt;foreign export javascript&lt;/code&gt;を使わずに、&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;側から&lt;span class=&#34;ascii&#34;&gt;JavaScript&lt;/span&gt;の関数を呼ぶようにしていれば、今回の問題は回避できたのではないかと思います。&lt;br /&gt;
しかし、それは今回のゴールではありませんし、あまり便利ではないのでひとまず移植は見送ることにしました。残念！&lt;/p&gt;
&lt;h1 id=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here-outer&#34;&gt;&lt;a href=&#34;#おわりに&#34; title=&#34;おわりに&#34;&gt;&lt;span class=&#34;link-to-here&#34;&gt;Link to&lt;br /&gt;
here&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;✅おわりに&lt;/h1&gt;
&lt;p&gt;今回&lt;span class=&#34;ascii&#34;&gt;Asterius&lt;/span&gt;を試したことで、ブラウザー上で&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;を動かす、もう一つの可能性を知ることができました。&lt;br /&gt;
とは言え、バグが多かったり依存関係から&lt;span class=&#34;ascii&#34;&gt;IO&lt;/span&gt;や&lt;span class=&#34;ascii&#34;&gt;Template Haskell&lt;/span&gt;を抜き出さなければならなかったりで、まだまだ実用的とは言い難いでしょう。&lt;br /&gt;
しかし、今回報告したバグが直れば、ブラウザーによる処理のコアに当たる部分を&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;で書く、という応用が利きそうです。&lt;br /&gt;
例えば&lt;span class=&#34;ascii&#34;&gt;Pandoc&lt;/span&gt;など&lt;span class=&#34;ascii&#34;&gt;Haskell&lt;/span&gt;製アプリケーションをブラウザーから操作する、なんてアプリケーション作りが捗りそうですね！&lt;/p&gt;
&lt;section class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://caniuse.com/#feat=bigint&#34;&gt;&lt;span class=&#34;ascii&#34;&gt;Can I use&lt;/span&gt;&lt;/a&gt;曰く安定版でも&lt;code&gt;about:config&lt;/code&gt;を書き換えればすでに使えるとのことなんですが、なぜか手元の&lt;span class=&#34;ascii&#34;&gt;Firefox&lt;/span&gt; 安定版ではうまくいきませんでした。確かに&lt;code&gt;about:config&lt;/code&gt;にそれらしき設定はあるものの、&lt;code&gt;true&lt;/code&gt;にしても何も変わらず…😰。&lt;br /&gt;
ついでに細かいことを言うと、&lt;span class=&#34;ascii&#34;&gt;Firefox Nightly&lt;/span&gt;は&lt;code&gt;about:config&lt;/code&gt;を書き換えなくても使え、&lt;span class=&#34;ascii&#34;&gt;Beta&lt;/span&gt;版では&lt;code&gt;about:config&lt;/code&gt;を書き換えると使えました。&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div id=&#34;post-navigation&#34; class=&#34;row&#34; style=&#34;margin-top: 20px;&#34;&gt;
            &lt;div class=&#34;col-lg-offset-2 col-lg-3 col-md-offset-1 col-md-4 col-xs-4&#34;&gt;
                
                &lt;i class=&#34;glyphicon glyphicon-chevron-left&#34; aria-hidden=&#34;true&#34; style=&#34;margin-right: 5px;&#34;&gt;&lt;/i&gt;
                &lt;a href=&#34;/posts/2019/strip-ansi-escape.html&#34; lang=&#34;ja&#34;&gt;strip-ansi-escapeというパッケージをリリースしました&lt;/a&gt;
                
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-2 col-md-2 col-xs-4 text-center&#34;&gt;
                &lt;a href=&#34;/&#34; lang=&#34;ja&#34;&gt;トップに戻る&lt;/a&gt;
            &lt;/div&gt;
            &lt;div class=&#34;col-lg-3 col-md-4 col-xs-4&#34;&gt;
                
                &lt;a href=&#34;/posts/2019/stack-ghc8.8.html&#34; style=&#34;margin-left: auto;&#34; lang=&#34;ja&#34;&gt;GHC 8.8.1 alphaをstackでダウンロードして手持ちのパッケージをビルドする&lt;/a&gt;
                &lt;i class=&#34;glyphicon glyphicon-chevron-right&#34; aria-hidden=&#34;true&#34; style=&#34;margin-left: 5px;&#34;&gt;&lt;/i&gt;
                
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/article&gt;

</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 5 ふりかえり</title><updated>2019-04-16T00:44:52+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">え？6？いやいや 5 ですよ？ techbookfest.org 池袋 慣れ親しんだ秋葉原の地を飛び出して池袋にやってきました。 めちゃくちゃ広くてびっくりです。秋葉原通運会館からアキバスクエアにやってきたときも思いましたが、同じ感想がもう一度。 ガラス張りじゃなくなったので外の行列見てやばいやばい言えなくなったのはほんのちょっとだけ残念です。 か61 kakkun61 という名前でもろもろアカウントを取っているのですが、今回は卓番号が「か61」ということでまさに自分のための場所でした。覚えやすい！ そんな弊卓の様子です。 落 新刊落としました…… フィルムカメラに目覚めた結果土日をそれに使っ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/04/01/185927</id><title type="text">楽園へ行きたい</title><updated>2019-04-01T19:01:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/04/01/185927"/><summary type="html">楽園へ行きたい。 森と平原に囲まれた、街のはずれの小屋に住みたい。 朝は、小鳥たちのさえずりと窓から射し込む陽の光で目覚めたい。 昼は、コーヒーと焼き菓子を用意して一服したい。 夜は、天の河の向こうに思いを馳せながら眠りたい。 月曜日は大学に行き、エルフの先生の下で言語学を学びたい。 火曜日は研究室にこもり、ドラゴンの教授と研究に没頭したい。 水、木曜日は道具鍛治と修繕の仕事をしたい。 金曜日は都に向かい、品を売って食材と情報を仕入れたい。 土曜日は酒場に集まり、仲間たちと杯を交わしたい。 日曜日は使い魔を連れ、公園をゆったり散歩したい。 春は、花々を眺めながら、渡り鳥たちにしばしの別れを告げ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/03/21/172101</id><title type="text">特級シリアライズライブラリ、winery 1.0解禁</title><updated>2019-03-21T18:06:56+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/03/21/172101"/><summary type="html">fumieval.hatenablog.com あれから9ヶ月…wineryのバージョン1.0をついにリリースした。 前回までのあらすじ データの保存や通信に直列化は不可欠の概念である。 binaryなどの直列化ライブラリは、レコードのフィールド名などの情報が欠けており、構造が変わると互換性を持たせることができない。 一方、JSONやCBORなどのフォーマットで愚直にフィールド名などを残すと極めて冗長になり、時間・空間効率が悪い。 コード生成が前提のProtobufなどはHaskellの既存のデータ構造との相性がよくない。 そんな現状に殴り込みをかけたのがwineryだ。値を「スキーマ」と「デ…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/03/20/224320</id><title type="text">Haskellで再帰的な構文木にFix(不動点)を導入してみる</title><updated>2019-03-03T17:54:09+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/03/20/224320"/><summary type="html">まえおき 例によって僕の記事など読まなくても下記のリンクで解説されているので、 Haskell楽しいなと思う人はこちらをどうぞ。 An Introduction to Recursion Schemes 生きるのに疲れた人は半分白目のゆるい気持ちで以降を読んでね。 Haskellで抽象構文木 (AST) にメタデータを付与する 以前この記事でASTへのメタデータの埋め込み方について少し整理して、 下記のようなアプローチがあることを明らかにした。 メタデータを保存するための値コンストラクタをASTのブランチとして定義する メタデータを保存するラッパーを定義する 加えて Fixを使ってなんかファン…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA</id><title type="text">Servant と Relational Record でウェブアプリケーション開発</title><updated>2019-02-27T15:29:35+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA"/><summary type="html">Servant とは Servant は型レベルプログラミングによって、ウェブアプリとしてのインターフェースと実装との差異を防ぐことのできるウェブアプリフレームワークです。 haskell-servant.readthedocs.io 日本語記事としては lotz さんのこちらが分かりやすいので、参考にしてください。 qiita.com Haskell Relational Record とは Haskell Relational Record は言語内 DSL によって SQL を生成するもので、正しくない SQL に相当するものは型エラーとなります。 khibino.github.io こ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/27/032421</id><title type="text">Docker Meetup Tokyo #28 で Scheduler のカスタマイズについて話してきました</title><updated>2019-02-27T03:24:21+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/27/032421"/><summary type="html">先日行われた Docker Meetup Tokyo #28で、Kubernetes Scheduler の挙動をカスタマイズする方法について発表してきました。 なお Scheduler のカスタマイズについては、つい最近 Kubernetes Meetup Tokyo #16 でも発表しています。ドキュメント類へのリンクも含めてまとめたものが以下の記事です。 ccvanishing.hateblo.jp 両方のスライドを見比べて頂ければ分かる通り、内容としてはオーバラップしている部分がかなりあります。 ただし、前回はあくまでも Scheduling Framework の解説であったのに対し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/15/181806</id><title type="text">旅のチェックリスト</title><updated>2019-02-25T15:44:26+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/15/181806"/><summary type="html">筆者が旅に出る際に確認する項目をまとめた。 事前の準備 渡航ビザ: 必要な場合もあるので事前に確かめよう。 ESTA(アメリカの場合): どんな理由であれUSに入国する場合申請する必要がある。大抵すぐ承認されるが、遅くとも出発の72時間前に済ませるべきである。 宿: 好みに応じてホテルでもAirBnBなどで民泊を予約しても。後者はキッチンが用意されているところもある。 交通手段: 電車は大抵の場合当日で大丈夫だが、もちろん船舶や航空機の場合は予約が必須である。 冷蔵庫の整理: 日持ちしないものは消費してしまおう。 携帯するもの 財布: 財布は現金やカードを収納する。リスク回避の観点から財布は省…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/22/193916</id><title type="text">Kubernetes Meetup Tokyo #16 で Scheduling Framework について話してきました</title><updated>2019-02-22T19:39:16+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/22/193916"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #16 で、現在 Scheduling SIG で進められているプロジェクト Scheduling Framework について発表してきました。 Kubernetes では、Pod をどの Node に配置するかを決める手続きをスケジューリングと呼びます。 古典的な Kubernetes の用途、すなわち通常の long-running なサーバ群の管理においては、Pod のスケジューリングは比較的シンプルな問題でした。すなわち、Node の障害時でも可用性が保てるように Pod を複数の Node に散らし、一度立ち上がった P…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/12/191002</id><title type="text">ある期間内に更新されたデータを素早く検索できるモデル</title><updated>2019-02-13T15:49:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/12/191002"/><summary type="html">特定の技術とは関係ない、誰でも思いつきそうな、でも便利なお話。 こんなケースを考えてみよう。 人気のトレーディングカードゲームAugur Unlimitedを扱うショップ「しらさぎ商店」では、1000種類にも及ぶカードの買い取り・販売をしている。記録のため、カードごとに日時、価格、在庫数などをまとめたレコードを毎日データベースに書き込んでいる。 新着・売り切れや、価格の変化などを、指定された期間について一覧で表示するようなWebページを作りたいとオーナーは考えた。しかし、ユーザーからの要求ごとに全データの差分を取るのは、あまり効率的な手段とはいえない。レアなカードでもない限り価格は一定であるこ…</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-13-sum-monoid%20copy.html</id><title type="text">Sum Monoid</title><updated>2019-02-13T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-13-sum-monoid%20copy.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Sum&#34;&gt;Sum&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getSum ::&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getSum (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getSum &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-monoid-law-の確認&#34;&gt;Semigroup, Monoid law の確認&lt;/h2&gt;
&lt;p&gt;Semigroup Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; (b &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; c))&lt;/span&gt;
&lt;span id=&#34;cb3-4&#34;&gt;&lt;a href=&#34;#cb3-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;co&#34;&gt;-- (+) の結合律より&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb3-5&#34;&gt;&lt;a href=&#34;#cb3-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; ((a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb3-6&#34;&gt;&lt;a href=&#34;#cb3-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb3-7&#34;&gt;&lt;a href=&#34;#cb3-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Monoid Law&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb4-4&#34;&gt;&lt;a href=&#34;#cb4-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb4-5&#34;&gt;&lt;a href=&#34;#cb4-5&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb4-6&#34;&gt;&lt;a href=&#34;#cb4-6&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb4-7&#34;&gt;&lt;a href=&#34;#cb4-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb4-8&#34;&gt;&lt;a href=&#34;#cb4-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (&lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb4-9&#34;&gt;&lt;a href=&#34;#cb4-9&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;newtype-を使って定義する理由&#34;&gt;newtype を使って定義する理由&lt;/h2&gt;
&lt;p&gt;わざわざ &lt;code&gt;Sum&lt;/code&gt; という新しい型を作ってインスタンスを定義しなくても、&lt;code&gt;Int&lt;/code&gt; を使って直接 &lt;code&gt;Semigroup&lt;/code&gt; と &lt;code&gt;Monoid&lt;/code&gt; のインスタンスを定義すれば良いんじゃないか？と普通は思います。&lt;/p&gt;
&lt;p&gt;実際に以下の定義は問題なく動きます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;+&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-4&#34;&gt;&lt;a href=&#34;#cb5-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb5-5&#34;&gt;&lt;a href=&#34;#cb5-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;ot&#34;&gt; mempty ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;3&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-4&#34;&gt;&lt;a href=&#34;#cb6-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mconcat&lt;/span&gt; [&lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;dv&#34;&gt;10&lt;/span&gt;]&lt;span class=&#34;ot&#34;&gt; ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb6-5&#34;&gt;&lt;a href=&#34;#cb6-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dv&#34;&gt;55&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし、足し算と同様に掛け算もモノイドとして定義したいと思う人もいるでしょう。&lt;/p&gt;
&lt;p&gt;この時 &lt;code&gt;Int&lt;/code&gt; は既に &lt;code&gt;Semigroup&lt;/code&gt;, &lt;code&gt;Monoid&lt;/code&gt; のインスタンス定義があるため、同じファイルに以下のように定義することはできません。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;) &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;op&#34;&gt;*&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-4&#34;&gt;&lt;a href=&#34;#cb7-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb7-5&#34;&gt;&lt;a href=&#34;#cb7-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この問題を解決する方法はいくつかありますが、このような例では &lt;code&gt;newtype&lt;/code&gt; が適切ということです。&lt;/p&gt;
&lt;h2 id=&#34;law-の自動チェック-quickcheck-classes&#34;&gt;Law の自動チェック (quickcheck-classes)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/quickcheck-classes&#34;&gt;quickcheck-classes&lt;/a&gt; を使って &lt;code&gt;Semigroup law&lt;/code&gt; と &lt;code&gt;Monoid law&lt;/code&gt; がちゃんと法則を満たすかどうかチェックしてみます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getSum ::&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb8-3&#34;&gt;&lt;a href=&#34;#cb8-3&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Arbitrary&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb8-4&#34;&gt;&lt;a href=&#34;#cb8-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-5&#34;&gt;&lt;a href=&#34;#cb8-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-6&#34;&gt;&lt;a href=&#34;#cb8-6&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; b &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; (a &lt;span class=&#34;op&#34;&gt;+&lt;/span&gt; b)&lt;/span&gt;
&lt;span id=&#34;cb8-7&#34;&gt;&lt;a href=&#34;#cb8-7&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-8&#34;&gt;&lt;a href=&#34;#cb8-8&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb8-9&#34;&gt;&lt;a href=&#34;#cb8-9&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Eq&lt;/code&gt;, &lt;code&gt;Show&lt;/code&gt;, &lt;code&gt;Arbitrary&lt;/code&gt; が無いとチェックできないので &lt;code&gt;derive&lt;/code&gt; しています。&lt;/p&gt;
&lt;p&gt;実行はめっちゃ簡単で、&lt;code&gt;lawsCheck&lt;/code&gt; 関数と &lt;code&gt;semigroupLaws&lt;/code&gt; や &lt;code&gt;monoidLaws&lt;/code&gt; などのチェックしたい則に対応する関数を使うだけです。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; import Test.QuickCheck.Classes
&amp;gt; import Data.Proxy

&amp;gt; lawsCheck (semigroupLaws (Proxy :: Proxy (Sum Int)))
Semigroup: Associative +++ OK, passed 100 tests.
Semigroup: Concatenation +++ OK, passed 100 tests.
Semigroup: Times +++ OK, passed 100 tests; 99 discarded.

&amp;gt; lawsCheck (monoidLaws (Proxy :: Proxy (Sum Int)))
Monoid: Associative +++ OK, passed 100 tests.
Monoid: Left Identity +++ OK, passed 100 tests.
Monoid: Right Identity +++ OK, passed 100 tests.
Monoid: Concatenation +++ OK, passed 100 tests.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考までに &lt;code&gt;mempty&lt;/code&gt; の定義が Law を満たさない場合の例も載せておきます。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Num&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;dv&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;&amp;gt; import Test.QuickCheck.Classes
&amp;gt; import Data.Proxy

&amp;gt; lawsCheck (semigroupLaws (Proxy :: Proxy (Sum Int)))
Semigroup: Associative +++ OK, passed 100 tests.
Semigroup: Concatenation +++ OK, passed 100 tests.
Semigroup: Times +++ OK, passed 100 tests; 113 discarded.

&amp;gt; lawsCheck (monoidLaws (Proxy :: Proxy (Sum Int)))
Monoid: Associative +++ OK, passed 100 tests.
Monoid: Left Identity *** Failed! Falsifiable (after 1 test):
  Description: mappend mempty a = a
  a = Sum {getSum = 0}
  mappend mempty a = Sum {getSum = 1}
Monoid: Right Identity *** Failed! Falsifiable (after 1 test):
  Description: mappend a mempty = a
  a = Sum {getSum = 0}
  mappend a mempty = Sum {getSum = 1}
Monoid: Concatenation +++ OK, passed 100 tests.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんな感じでモノイドの左単位元則 (Left Identity law) と右単位元則 (Right Identity law) が満たされていないことを教えてくれます。&lt;/p&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://people.cs.kuleuven.be/~tom.schrijvers/Research/talks/lhug4.pdf&#34;&gt;Lists and Other Monoids&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-12-last-monoid.html</id><title type="text">Last Monoid</title><updated>2019-02-12T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-12-last-monoid.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html&#34;&gt;Data.Monoid&lt;/a&gt; に &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Monoid.html#t:Last&#34;&gt;Last&lt;/a&gt; 型が定義されています。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb1&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb1-1&#34;&gt;&lt;a href=&#34;#cb1-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;newtype&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; {&lt;span class=&#34;ot&#34;&gt; getLast ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; a }&lt;/span&gt;
&lt;span id=&#34;cb1-2&#34;&gt;&lt;a href=&#34;#cb1-2&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-3&#34;&gt;&lt;a href=&#34;#cb1-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-4&#34;&gt;&lt;a href=&#34;#cb1-4&#34;&gt;&lt;/a&gt;  a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb1-5&#34;&gt;&lt;a href=&#34;#cb1-5&#34;&gt;&lt;/a&gt;  _ &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; b            &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb1-6&#34;&gt;&lt;a href=&#34;#cb1-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-7&#34;&gt;&lt;a href=&#34;#cb1-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb1-8&#34;&gt;&lt;a href=&#34;#cb1-8&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Last&lt;/code&gt; モノイドは &lt;code&gt;First&lt;/code&gt; モノイドとほとんど同じですが、&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; で結合した時に最後の値を返すという部分が異なります。&lt;/p&gt;
&lt;p&gt;使い方は簡単。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb2&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb2-1&#34;&gt;&lt;a href=&#34;#cb2-1&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getLast (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb2-2&#34;&gt;&lt;a href=&#34;#cb2-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-3&#34;&gt;&lt;a href=&#34;#cb2-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb2-4&#34;&gt;&lt;a href=&#34;#cb2-4&#34;&gt;&lt;/a&gt;ghci&lt;span class=&#34;op&#34;&gt;&amp;gt;&lt;/span&gt; getLast &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;foldMap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; [&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;]&lt;/span&gt;
&lt;span id=&#34;cb2-5&#34;&gt;&lt;a href=&#34;#cb2-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;semigroup-law-の確認&#34;&gt;Semigroup law の確認&lt;/h2&gt;
&lt;h3 id=&#34;case-1-b-nothing-c-nothing&#34;&gt;Case (1) (b == Nothing, c == Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb3&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb3-1&#34;&gt;&lt;a href=&#34;#cb3-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb3-2&#34;&gt;&lt;a href=&#34;#cb3-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb3-3&#34;&gt;&lt;a href=&#34;#cb3-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb4&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb4-1&#34;&gt;&lt;a href=&#34;#cb4-1&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb4-2&#34;&gt;&lt;a href=&#34;#cb4-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb4-3&#34;&gt;&lt;a href=&#34;#cb4-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-2-b-just-b-c-nothing&#34;&gt;Case (2) (b == Just b’, c == Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb5&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb5-1&#34;&gt;&lt;a href=&#34;#cb5-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb5-2&#34;&gt;&lt;a href=&#34;#cb5-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb5-3&#34;&gt;&lt;a href=&#34;#cb5-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb6&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb6-1&#34;&gt;&lt;a href=&#34;#cb6-1&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb6-2&#34;&gt;&lt;a href=&#34;#cb6-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;
&lt;span id=&#34;cb6-3&#34;&gt;&lt;a href=&#34;#cb6-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-3-c-just-c&#34;&gt;Case (3) (c == Just c’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb7&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb7-1&#34;&gt;&lt;a href=&#34;#cb7-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c)&lt;/span&gt;
&lt;span id=&#34;cb7-2&#34;&gt;&lt;a href=&#34;#cb7-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb7-3&#34;&gt;&lt;a href=&#34;#cb7-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb8&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb8-1&#34;&gt;&lt;a href=&#34;#cb8-1&#34;&gt;&lt;/a&gt;  (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; b) &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;
&lt;span id=&#34;cb8-2&#34;&gt;&lt;a href=&#34;#cb8-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; c&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;monoid-law&#34;&gt;Monoid Law&lt;/h2&gt;
&lt;h3 id=&#34;case-1-a-nothing&#34;&gt;Case (1) (a = Nothing)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb9&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb9-1&#34;&gt;&lt;a href=&#34;#cb9-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-2&#34;&gt;&lt;a href=&#34;#cb9-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-3&#34;&gt;&lt;a href=&#34;#cb9-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-4&#34;&gt;&lt;a href=&#34;#cb9-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-5&#34;&gt;&lt;a href=&#34;#cb9-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb9-6&#34;&gt;&lt;a href=&#34;#cb9-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb9-7&#34;&gt;&lt;a href=&#34;#cb9-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;case-2-a-just-a&#34;&gt;Case (2) (a = Just a’)&lt;/h3&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb10&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb10-1&#34;&gt;&lt;a href=&#34;#cb10-1&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-2&#34;&gt;&lt;a href=&#34;#cb10-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-3&#34;&gt;&lt;a href=&#34;#cb10-3&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-4&#34;&gt;&lt;a href=&#34;#cb10-4&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb10-5&#34;&gt;&lt;a href=&#34;#cb10-5&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb10-6&#34;&gt;&lt;a href=&#34;#cb10-6&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;具体例-partial-options-monoid&#34;&gt;具体例: Partial Options Monoid&lt;/h2&gt;
&lt;p&gt;コマンドライン引数によりオプションを受け取り、指定されなかったオプションの値に対してはデフォルト値を利用するという場面で &lt;code&gt;Last&lt;/code&gt; モノイドが活用できそうです。&lt;/p&gt;
&lt;h3 id=&#34;コード&#34;&gt;コード&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/optparse-applicative&#34;&gt;optparse-applicative&lt;/a&gt; を使った具体的なサンプルはこんな感じです。&lt;/p&gt;
&lt;div class=&#34;sourceCode&#34; id=&#34;cb11&#34;&gt;&lt;pre class=&#34;sourceCode haskell&#34;&gt;&lt;code class=&#34;sourceCode haskell&#34;&gt;&lt;span id=&#34;cb11-1&#34;&gt;&lt;a href=&#34;#cb11-1&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;{-# LANGUAGE RecordWildCards #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-2&#34;&gt;&lt;a href=&#34;#cb11-2&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Main&lt;/span&gt; (main) &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-3&#34;&gt;&lt;a href=&#34;#cb11-3&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-4&#34;&gt;&lt;a href=&#34;#cb11-4&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Data.Monoid&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-5&#34;&gt;&lt;a href=&#34;#cb11-5&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options.Applicative&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-6&#34;&gt;&lt;a href=&#34;#cb11-6&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-7&#34;&gt;&lt;a href=&#34;#cb11-7&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-8&#34;&gt;&lt;a href=&#34;#cb11-8&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; oInputPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-9&#34;&gt;&lt;a href=&#34;#cb11-9&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; oOutputPath ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-10&#34;&gt;&lt;a href=&#34;#cb11-10&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; oLogLevel   ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-11&#34;&gt;&lt;a href=&#34;#cb11-11&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-12&#34;&gt;&lt;a href=&#34;#cb11-12&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-13&#34;&gt;&lt;a href=&#34;#cb11-13&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-14&#34;&gt;&lt;a href=&#34;#cb11-14&#34;&gt;&lt;/a&gt;  {&lt;span class=&#34;ot&#34;&gt; poInputPath  ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-15&#34;&gt;&lt;a href=&#34;#cb11-15&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; poOutputPath ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-16&#34;&gt;&lt;a href=&#34;#cb11-16&#34;&gt;&lt;/a&gt;  ,&lt;span class=&#34;ot&#34;&gt; poLogLevel   ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Maybe&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-17&#34;&gt;&lt;a href=&#34;#cb11-17&#34;&gt;&lt;/a&gt;  } &lt;span class=&#34;kw&#34;&gt;deriving&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Show&lt;/span&gt;, &lt;span class=&#34;dt&#34;&gt;Eq&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&#34;cb11-18&#34;&gt;&lt;a href=&#34;#cb11-18&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-19&#34;&gt;&lt;a href=&#34;#cb11-19&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Semigroup&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-20&#34;&gt;&lt;a href=&#34;#cb11-20&#34;&gt;&lt;/a&gt;  x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; y &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-21&#34;&gt;&lt;a href=&#34;#cb11-21&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-22&#34;&gt;&lt;a href=&#34;#cb11-22&#34;&gt;&lt;/a&gt;      { poInputPath  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; poInputPath  x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; poInputPath  y&lt;/span&gt;
&lt;span id=&#34;cb11-23&#34;&gt;&lt;a href=&#34;#cb11-23&#34;&gt;&lt;/a&gt;      , poOutputPath &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; poOutputPath x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; poOutputPath y&lt;/span&gt;
&lt;span id=&#34;cb11-24&#34;&gt;&lt;a href=&#34;#cb11-24&#34;&gt;&lt;/a&gt;      , poLogLevel   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; poLogLevel   x &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; poLogLevel   y&lt;/span&gt;
&lt;span id=&#34;cb11-25&#34;&gt;&lt;a href=&#34;#cb11-25&#34;&gt;&lt;/a&gt;      }&lt;/span&gt;
&lt;span id=&#34;cb11-26&#34;&gt;&lt;a href=&#34;#cb11-26&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-27&#34;&gt;&lt;a href=&#34;#cb11-27&#34;&gt;&lt;/a&gt;&lt;span class=&#34;kw&#34;&gt;instance&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Monoid&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-28&#34;&gt;&lt;a href=&#34;#cb11-28&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-29&#34;&gt;&lt;a href=&#34;#cb11-29&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-30&#34;&gt;&lt;a href=&#34;#cb11-30&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;defaultPartialOptions ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-31&#34;&gt;&lt;a href=&#34;#cb11-31&#34;&gt;&lt;/a&gt;defaultPartialOptions &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-32&#34;&gt;&lt;a href=&#34;#cb11-32&#34;&gt;&lt;/a&gt;  { poInputPath  &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;st&#34;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-33&#34;&gt;&lt;a href=&#34;#cb11-33&#34;&gt;&lt;/a&gt;  , poLogLevel   &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;pure&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-34&#34;&gt;&lt;a href=&#34;#cb11-34&#34;&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id=&#34;cb11-35&#34;&gt;&lt;a href=&#34;#cb11-35&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-36&#34;&gt;&lt;a href=&#34;#cb11-36&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lastOption ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a)&lt;/span&gt;
&lt;span id=&#34;cb11-37&#34;&gt;&lt;a href=&#34;#cb11-37&#34;&gt;&lt;/a&gt;lastOption &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;fmap&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; optional&lt;/span&gt;
&lt;span id=&#34;cb11-38&#34;&gt;&lt;a href=&#34;#cb11-38&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-39&#34;&gt;&lt;a href=&#34;#cb11-39&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;partialOptionsParser ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Parser&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-40&#34;&gt;&lt;a href=&#34;#cb11-40&#34;&gt;&lt;/a&gt;partialOptionsParser &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-41&#34;&gt;&lt;a href=&#34;#cb11-41&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; lastOption (strOption (short &lt;span class=&#34;ch&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb11-42&#34;&gt;&lt;a href=&#34;#cb11-42&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; lastOption (strOption (short &lt;span class=&#34;ch&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb11-43&#34;&gt;&lt;a href=&#34;#cb11-43&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;op&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; lastOption (&lt;span class=&#34;dt&#34;&gt;Just&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;&amp;lt;$&amp;gt;&lt;/span&gt; option auto (short &lt;span class=&#34;ch&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&#34;cb11-44&#34;&gt;&lt;a href=&#34;#cb11-44&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-45&#34;&gt;&lt;a href=&#34;#cb11-45&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;lastToEither ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Last&lt;/span&gt; a &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; a&lt;/span&gt;
&lt;span id=&#34;cb11-46&#34;&gt;&lt;a href=&#34;#cb11-46&#34;&gt;&lt;/a&gt;lastToEither errMsg &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;maybe&lt;/span&gt; (&lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt; errMsg) &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; &lt;span class=&#34;op&#34;&gt;.&lt;/span&gt; getLast&lt;/span&gt;
&lt;span id=&#34;cb11-47&#34;&gt;&lt;a href=&#34;#cb11-47&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-48&#34;&gt;&lt;a href=&#34;#cb11-48&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;mkOptions ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Either&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-49&#34;&gt;&lt;a href=&#34;#cb11-49&#34;&gt;&lt;/a&gt;mkOptions &lt;span class=&#34;dt&#34;&gt;PartialOptions&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;} &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-50&#34;&gt;&lt;a href=&#34;#cb11-50&#34;&gt;&lt;/a&gt;  oInputPath  &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lastToEither &lt;span class=&#34;st&#34;&gt;&amp;quot;Missing input path&amp;quot;&lt;/span&gt;  poInputPath&lt;/span&gt;
&lt;span id=&#34;cb11-51&#34;&gt;&lt;a href=&#34;#cb11-51&#34;&gt;&lt;/a&gt;  oOutputPath &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lastToEither &lt;span class=&#34;st&#34;&gt;&amp;quot;Missing output path&amp;quot;&lt;/span&gt; poOutputPath&lt;/span&gt;
&lt;span id=&#34;cb11-52&#34;&gt;&lt;a href=&#34;#cb11-52&#34;&gt;&lt;/a&gt;  oLogLevel   &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; lastToEither &lt;span class=&#34;st&#34;&gt;&amp;quot;Missing loglevel&amp;quot;&lt;/span&gt;    poLogLevel&lt;/span&gt;
&lt;span id=&#34;cb11-53&#34;&gt;&lt;a href=&#34;#cb11-53&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;fu&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;Options&lt;/span&gt; {&lt;span class=&#34;op&#34;&gt;..&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&#34;cb11-54&#34;&gt;&lt;a href=&#34;#cb11-54&#34;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-55&#34;&gt;&lt;a href=&#34;#cb11-55&#34;&gt;&lt;/a&gt;&lt;span class=&#34;ot&#34;&gt;main ::&lt;/span&gt; &lt;span class=&#34;dt&#34;&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id=&#34;cb11-56&#34;&gt;&lt;a href=&#34;#cb11-56&#34;&gt;&lt;/a&gt;main &lt;span class=&#34;ot&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kw&#34;&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-57&#34;&gt;&lt;a href=&#34;#cb11-57&#34;&gt;&lt;/a&gt;  options &lt;span class=&#34;ot&#34;&gt;&amp;lt;-&lt;/span&gt; execParser &lt;span class=&#34;op&#34;&gt;$&lt;/span&gt; info partialOptionsParser &lt;span class=&#34;fu&#34;&gt;mempty&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-58&#34;&gt;&lt;a href=&#34;#cb11-58&#34;&gt;&lt;/a&gt;  &lt;span class=&#34;kw&#34;&gt;case&lt;/span&gt; mkOptions (defaultPartialOptions &lt;span class=&#34;op&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; options) &lt;span class=&#34;kw&#34;&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id=&#34;cb11-59&#34;&gt;&lt;a href=&#34;#cb11-59&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Left&lt;/span&gt;  msg &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;putStrLn&lt;/span&gt; msg&lt;/span&gt;
&lt;span id=&#34;cb11-60&#34;&gt;&lt;a href=&#34;#cb11-60&#34;&gt;&lt;/a&gt;    &lt;span class=&#34;dt&#34;&gt;Right&lt;/span&gt; opt &lt;span class=&#34;ot&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;fu&#34;&gt;print&lt;/span&gt; opt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;defaultPartialOptions&lt;/code&gt; でオプションの初期値を用意しておきます。ここで指定されなかったフィールドの値はオプションで必ず指定しなければなりません。今回の例では &lt;code&gt;poOutputPath&lt;/code&gt; が必須オプションになっています。&lt;/p&gt;
&lt;p&gt;また &lt;code&gt;Last&lt;/code&gt; モノイドが効いている部分は &lt;code&gt;defaultPartialOptions &amp;lt;&amp;gt; options&lt;/code&gt; です。&lt;code&gt;mempty = Last Nothing&lt;/code&gt; となるため、期待通りの動作が得られます。&lt;/p&gt;
&lt;p&gt;デフォルト値の無いオプションが省略された場合にエラーメッセージが表示される理由としては &lt;code&gt;lastToEither&lt;/code&gt; で &lt;code&gt;getLast&lt;/code&gt; した際に &lt;code&gt;Nothing&lt;/code&gt; となるためです。&lt;/p&gt;
&lt;h3 id=&#34;実行結果&#34;&gt;実行結果&lt;/h3&gt;
&lt;p&gt;実行結果は見やすく整形しています。&lt;/p&gt;
&lt;pre class=&#34;shell&#34;&gt;&lt;code&gt;# オプション無しで実行
λ&amp;gt; stack run ex3
Missing output path

# 必須オプションの -o のみ指定 (他はデフォルト値)
$ stack run ex3 -- -o &amp;quot;oDir&amp;quot;
Options
  { oInputPath  = &amp;quot;input&amp;quot;
  , oOutputPath = &amp;quot;oDir&amp;quot;
  , oLogLevel   = Nothing
  }

# 必須オプションの -o と -i を指定
$ stack run ex3 -- -o &amp;quot;oDir&amp;quot; -i &amp;quot;myDir&amp;quot;
Options
  { oInputPath  = &amp;quot;myDir&amp;quot;
  , oOutputPath = &amp;quot;oDir&amp;quot;
  , oLogLevel   = Nothing
  }

# オプションを全部指定
$ stack run ex3 -- -o &amp;quot;oDir&amp;quot; -i &amp;quot;myDir&amp;quot; -l 10
Options
  { oInputPath  = &amp;quot;myDir&amp;quot;
  , oOutputPath = &amp;quot;oDir&amp;quot;
  , oLogLevel   = Just 10
  }&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@jonathangfischoff/the-partial-options-monoid-pattern-31914a71fc67&#34;&gt;The Partial Options Monoid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kazu-yamamoto.hatenablog.jp/entry/2018/11/29/155311&#34;&gt;SemigroupがMonoidに恋するとき&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/philopon/items/a29717af62831d3c8c07&#34;&gt;optparse-applicativeをふわっと使う&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><id>https://haskell.e-bigmoon.com/posts/2019/02-11-lambdabot.html</id><title type="text">Lambdabot for Slack</title><updated>2019-02-11T00:00:00Z</updated><author><name>e-bigmoon</name></author><link href="https://haskell.e-bigmoon.com/posts/2019/02-11-lambdabot.html"/><summary type="html">&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;最近 slack で &lt;a href=&#34;https://github.com/lambdabot/lambdabot&#34;&gt;Lambdabot&lt;/a&gt; というツールを知りました。こいつを導入するとこんな事ができます。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;Lambdabot と遊んでいる図&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;実務で本格的に使えるものではありませんが、入れてみると楽しいですよ。(カスタマイズして改良すれば、かなり使えるかもしれない)&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&#34;lambdabot-の導入&#34;&gt;Lambdabot の導入&lt;/h2&gt;
&lt;p&gt;導入はとても簡単で slack app から Lambdabot をインストールするだけです！&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;Slack app で検索&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;Lambdabot のインストール画面&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;検索するのが面倒な人は &lt;a href=&#34;https://lambdabot.brianmckenna.org/slack/install.html&#34;&gt;Add Lambdabot to Slack&lt;/a&gt; の App ボタンからもインストール可能です。&lt;/p&gt;
&lt;p&gt;アプリのソースコード等は &lt;a href=&#34;https://github.com/markandrus/slack-lambdabot&#34;&gt;markandrus/slack-lambdabot&lt;/a&gt; にありますので、気になる方はこちらもご参照ください。&lt;/p&gt;
&lt;p&gt;自分でビルドしてホスティングする場合は fork の &lt;a href=&#34;https://github.com/ezoerner/slack-lambdabot&#34;&gt;ezoerner/slack-lambdabot&lt;/a&gt; の方が良いかもしれません。(要検証)&lt;/p&gt;
&lt;h2 id=&#34;lambdabot-for-slack-でできること&#34;&gt;Lambdabot for Slack でできること&lt;/h2&gt;
&lt;p&gt;どうやら本家の Lambdabot の機能全てが使えるわけではないようです。&lt;/p&gt;
&lt;p&gt;また、利用可能な機能のうち &lt;code&gt;type&lt;/code&gt; や &lt;code&gt;hoogle&lt;/code&gt;等はちゃんと使えるようですが、&lt;code&gt;run&lt;/code&gt; や &lt;code&gt;check&lt;/code&gt; などは結果がおかしい場合があります。&lt;/p&gt;
&lt;h3 id=&#34;hoogle&#34;&gt;hoogle&lt;/h3&gt;
&lt;p&gt;どうやら結果は3件しか返さないようです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;関数名で検索&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;型名で検索&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;型で検索 (型変数有り)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/hoogle-4.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;型で検索 (型変数無し)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;type&#34;&gt;type&lt;/h3&gt;
&lt;p&gt;どのパッケージが含まれているかわかりませんが、lens の演算子を試したところだめでした。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;関数&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;メソッド&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;複雑な式&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-4.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;演算子&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-5.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;セクション&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/type-6.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;エラー&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;run&#34;&gt;run&lt;/h3&gt;
&lt;p&gt;式を実行することができるようですが、全然動かないです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;print はエラー&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;奇跡的に動いた例&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;文字列を含む場合にはエラーになる&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/run-4.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;無限リストは適当に打ち切り&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;check&#34;&gt;check&lt;/h3&gt;
&lt;p&gt;QuickCheck も実行可能ですが、上手く行く例が作れません・・・。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/check-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;実行時間の制約に引っかかってるっぽい&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;free&#34;&gt;free&lt;/h3&gt;
&lt;p&gt;たぶん実装は &lt;a href=&#34;https://github.com/lambdabot/lambdabot/blob/0b26cb6ca0e0389bcff68d360c18775a787c9d52/lambdabot-haskell-plugins/src/Lambdabot/Plugin/Haskell/Free/FreeTheorem.hs&#34;&gt;FreeTheorem.hs&lt;/a&gt; です。&lt;/p&gt;
&lt;p&gt;良くわからないので解説できません。実行結果だけ貼っておきます。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;reverse&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;const&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;id&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-4.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;flip&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/free-5.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;filter&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&#34;pl&#34;&gt;pl&lt;/h3&gt;
&lt;p&gt;ポイントフリーにしてくれます。また fusion もいくつか可能っぽいです。&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-1.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;ポイントフリー化1&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-2.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;ポイントフリー化2&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-3.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;f . id = id&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img src=&#34;/images/2019/02-11/pl-4.png&#34; alt=&#34;&#34; /&gt;&lt;figcaption&gt;map f . map g = map (f . g)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;
&lt;p&gt;ちゃんと作り込んだら結構使えそうな気がします。&lt;/p&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D</id><title type="text">Haskell Windows Ctrl-C 動作確認</title><updated>2019-01-30T23:53:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"/><summary type="html">コード コードは前回記事と同じです（再掲）。 Git リポジトリーはこちら。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do if event == cTRL_C_EVENT then do putStrLn &#34;goodbye!&#34; killThread tid pure …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89</id><title type="text">Haskell で Ctrl-C を制御する（Windows）</title><updated>2019-01-25T11:26:15+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89"/><summary type="html">Ctrl-C 等の割り込みの扱い方です。 tl;dr System.Win32.Console.CtrlHandler を使います。 Ctrl-C が押されたらクロージングの処理を伴って終了するプログラムを書いてみます。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do i…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20130305/1362457646</id><title type="text">Haskell での可変長引数</title><updated>2019-01-25T01:40:21+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20130305/1362457646"/><summary type="html">『簡約! λカ娘(4)』読んだ！おもしろかった！で、その中に「Haskell でも printf じゃないか！？」っていう @nushio さんの記事で、可変長引数関数（可変個引数関数）の話があって自分なりに悩んで納得したので忘れないようにメモしておこうと思う。</summary></entry><entry><id>http://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2018-12-16T14:31:09.194+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121031/1351667055</id><title type="text">Control.Arrow.app</title><updated>2018-11-29T19:15:29+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121031/1351667055"/><summary type="html">Control.Arrow - mzsmsの雑記を読んで Arrow というものを理解しようとしてたんだけど、app 関数でちょっとつまずいたのでメモしておく。 loop はあんまりにも分からなかったので後回し。なんとなくフリップフロップ回路に似ている気はした。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121101/1351754462</id><title type="text">「Haskell 入門ハンズオン in 明石」を主催したよ #AkashiHaskell</title><updated>2018-11-29T19:15:26+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121101/1351754462"/><summary type="html">「すごい Haskell たのしく学ぼう！」を読んで Haskell 楽しいなぁ。人にもすすめたいなぁ。でも、すすめても実際やってくれる人少ないよなぁ。なら、僕が直接教えよう。というわけで、ハンズオンすることになった。 2012/10/28(Sun) 13:15-16:45 Haskell 入門ハンズオン in 明石 #AkashiHaskell - connpass</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20121128/1354076078</id><title type="text">第2回関数型言語勉強会で発表した</title><updated>2018-11-29T19:15:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20121128/1354076078"/><summary type="html">11月24日に第2回関数型言語勉強会があってそこで明石 Haskell の宣伝とかしたよ、というお話。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/20130327/1364391398</id><title type="text">すごい Haskell 読書会 in 大阪 #7 にチャット参加した</title><updated>2018-11-29T19:14:51+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/20130327/1364391398"/><summary type="html">#1-6 までだいたい参加してたので、チャットで問題演習だけ参加した。すごいHaskell読書会 in 大阪 – Lingr でお話してる。 http://atnd.org/events/37645</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで &#34;error:  invalid compressed data to inflate&#34; というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap&#39;n&#39;protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8&#39;エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options &#34; </summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2018/01/03/185920</id><title type="text">Haskellで抽象構文木 (AST) にメタデータを付与する</title><updated>2018-01-05T17:40:33+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2018/01/03/185920"/><summary type="html">2018-01-04 追記: ここで全部語り尽くされている気がしたので、Labelling AST Nodes with locations なにもこんなブログ読むことはないのかもしれない。 megaparsecを使って構文解析器を書いている。 構文解析やっているとASTにソースファイルの位置情報とかをメタデータとして乗せたくなるが、 どんな感じで実装するのか調べた。 僕自身はどのアプローチをとるのか決まっていない。 問題 やりたいこと megaparsec, parsecなどのコンビネータライブラリはジェネレータ系のalex + happyと比べると幾分まともなエラーメッセージを吐くようにな…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/17/212053</id><title type="text">Left Recursionの悪夢再び</title><updated>2017-12-17T21:20:53+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/17/212053"/><summary type="html">はじめに Happyで生成したパーサのコンパイル遅すぎてもう限界だったのでparser combinatorに戻ってきた。 そしてまた現れたのだ、やつが。。。。 問題 やろうとしてることは以前と変わらない。 SML Definitionを読んで型の注釈を表す式 ty を解析しようとしているが、 左無限再帰が起きてしまって解析が終了しないというもの。 ty ::= tyvar (1) type variable such as &#39;a { tyrow i } (2) record type tyseq longtycon (3) type constructor with type argumen…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/12/10/195016</id><title type="text">GHCの中間言語Coreへの脱糖を覗き見る</title><updated>2017-12-11T00:07:41+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/12/10/195016"/><summary type="html">Haskell (その3) Advent Calendar 2017 11日目の記事。(予約投稿知らなかったのでフライングになった) GHCがコンパイルの途中で中間表現として用いるCoreの生成っぷりを観察する。 観察して、あーはいはいなるほどね(わかってない)、と言うだけになりそう。 はじめに GHCはHaskellのソースコードを低レベルなコードへとコンパイルする過程で様々なpass(コンパイルのステージ)を通じてプログラムデータを変換する。 俯瞰図は下記のリンクに詳しい。 Compiling one module: HscMain 僕がGHCの話をどこかで聞きかじってかっこいいな、と思っ…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 &#34;Haskell は真面目なアプリケーション開発には向いてない&#34;について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/30/193043</id><title type="text">SMLの関数適用を構文解析する時の問題</title><updated>2017-10-01T09:33:16+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/30/193043"/><summary type="html">まだ構文解析器で苦労している。 今回も詰まっているのは構文のconflict。 問題 これが関数適用 app : exp exp これが二項演算子適用 infixapp : exp vid exp この時に入力を x y z とすると２つの解釈ができてしまうことになる。 ((x y) z) とするネストした関数適用なのか x y z とする二項演算子の適用なのかParserが判断つけられない。 前者ならreduceするが後者ならshiftする。 なのでこれはshift/reduce conflictが起きていると言える。 happyはデフォルトでshiftするので二項演算子として解釈される。 …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/09/24/234126</id><title type="text">好きなプログラミング言語の好きなところについて思った</title><updated>2017-09-24T23:45:25+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/09/24/234126"/><summary type="html">改めて最近実感すること。 Haskell, Elm, Clojureほんと好き。 Scala勉強しなきゃなーと思いながらClojureを触ってしまうことが多かったのだけれど、 その理由が少しずつわかってきた。 いい言語たち いままで少しだけ触れてきたJava, Python, Scala, Goはいずれもとても大きなユーザを抱えている。 どの言語もたくさんのユーザを得るために現場で使えるようなエコシステムをどんどん投下してあっという間に大きなユーザベースを獲得した。 プログラミングのしやすさを大事にして、誰でもすんなり入門できるように設計されている。 僕が入門できるくらいだから本当に敷居が低く…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/07/03/163749</id><title type="text">左再帰を含む構文解析むずい</title><updated>2017-07-03T18:04:24+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/07/03/163749"/><summary type="html">やろうとしていること Haskellのparsecを使ってSMLの構文を解析し構文木を生成する。 やっていること SMLの構文解析はいろいろステップがある。 リテラル (special constants) 識別子 (identifier) 型注釈 !!イマココ!! パターンマッチ 式 宣言 モジュール構文 リテラルや識別子はなんとか倒して、いま型注釈の解析に取り組んでいるところ。 苦戦しているところ この型注釈の構文解析で例の問題に突き当たった。 左再帰問題だ。 SMLの型注釈の構文はこんな感じ。 ty ::= tyvar { &lt;tyrow&gt; } tyseq longtycon ty -&gt; …</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/20/174125</id><title type="text">Haskellの代数データ型をJava的なインタフェースと捉える</title><updated>2017-06-03T09:42:59+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/20/174125"/><summary type="html">Haskellの代数データ型は僕にとってJavaのインタフェースに近い。 データ型がインタフェースでそのデータを受け取る関数がインタフェースのメソッドに相当する。 データをパターンマッチで分解して値コンストラクタ別の関数定義をするのは、 インタフェースに対する実装を与えているものだと考えている。 data Maybe a mapMaybe :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b Maybe aというデータ型があるとする。これがインターフェース。 mapMaybeという関数があるとする。これがメソッド。 インタフェースに実装を与えていく。 まずはデータ構造としてのイン…</summary></entry><entry><id>http://ilyaletre.hatenablog.com/entry/2017/05/21/162855</id><title type="text">Haskellerの好きなところ</title><updated>2017-05-21T16:35:21+09:00</updated><author><name>ilyaletre</name></author><link href="http://ilyaletre.hatenablog.com/entry/2017/05/21/162855"/><summary type="html">僕はHaskellが好き。 なんだけど、同じくらいHaskellもくもく会の常連の人達が好き。 ちょっとした型についての質問から、いつの間にかホワイトボード上で証明とか書き出して「あー、ほんとだー、そういうことかー」って言ってる感じが好き。 解らないことがあったら自分で検証するっていう、問題に対する誠実で真っ直ぐな態度を持っている人達が好き。 Haskellではそういう解らないところを形式的に検証する方法や知識がよく整備されていると思う。(とても難しいものもあるけど) きっと他のコミュニティにもそういう人はたくさんいる。でもHaskellもくもく会にはそういう人達が間違いなくいるのを僕は知って…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy &#39;[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy &#39;[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField &#34;A Text&#34; Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE</id><title type="text">『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました</title><updated>2016-12-27T23:42:20+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE"/><summary type="html">BOOTH にて『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました！ 1000円となります。 kakkun61.booth.pm 結構さっくり開設できてびっくりしてる。 店舗候補 どこでダウンロード販売すべきなんかなと思ってちょっと調べたんでまとめときます。 候補としては、メロンブックス・BOOTH・DLsite がありました。それぞれの店舗での販売価格に対する受取価格はざっくり次の通りでした。 店舗 受取価格 メロンブックス*1 販売価格 × 0.7 -（振込手数料） BOOTH*2 販売価格 × 0.966 - 10 -（振込手数料 300 or…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。&#34;*.cpp&#34;のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に&#34;</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

&#34;/bin/tcsh&#34;とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/11/20/163839</id><title type="text">Frege のチュートリアル集「Frege Goodness」を翻訳しました</title><updated>2016-11-20T16:38:39+09:00</updated><author><name>y_taka_23</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/11/20/163839"/><summary type="html">Frege のチュートリアル集を日本語に翻訳しました。原著は Dierk Koenig 氏による Frege Goodness · GitBook です。 www.gitbook.com 対象読者 まえがきでも述べられている通り、Frege の (すなわち Haskell の) 基本的な文法については既知のものとして扱われます。より具体的には「すごい Haskell」の前半部分を読んだ、ぐらいでしょうか。例えば型クラス自体は知っている必要がありますが、モナドに対する理解は要求しません。 ちなみに、目を通していただけるとすぐにわかりますが、実は Frege に特有な内容はさほど登場しません。どち…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81</id><title type="text">技術書典にて人生初の同人誌を頒布します！</title><updated>2016-09-30T12:11:59+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/13/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E3%81%A6%E4%BA%BA%E7%94%9F%E5%88%9D%E3%81%AE%E5%90%8C%E4%BA%BA%E8%AA%8C%E3%82%92%E9%A0%92%E5%B8%83%E3%81%97%E3%81%BE%E3%81%99%EF%BC%81"/><summary type="html">技術書典にて人生初の同人誌を頒布します！うおぉぉ！！ドコドコドコ！プワプワー！ 『遠回りして学ぶ Yesod 入門（上）』 内容は、入門書程度の内容の Haskell を理解した人がウェブアプリケーションフレームワーク Yesod を使うときに手助けになるような内容です。具体的には次の通り。 ビルドツール Stack 効率のよい文字列の扱い Web Application Interface とは Scotty を使ったウェブアプリ ただ書いてたら最後まで間に合わない気がしてきたので今回は「上巻」ってことで逃げました！これから下巻書かなきゃ。 ペンタブレットを買って表紙も自分で書きました！絵が…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 ふりかえり</title><updated>2016-09-11T19:14:03+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">技術書典お疲れさまでしたー。 閉場30分前まで整理券制で、だいたいの方が1時間半待ちだったそうですね。びっくりするような盛況で何よりです。運営さんの手際もよく大変ありがとうございました。 #技術書典 会場のキャパに余裕が出てきたため、只今から整理券なしでも入場可能にします！残り三十分強ですがお楽しみいただければと思います。— TechBooster@3日目西a05a (@TechBooster) June 25, 2016 最終的に1200人は超えたそうですね。 #技術書典 最終集計できてないですが速報(すぐ数えられるもので)来場数は1200名を超えました！至らないところもありましたがサークル…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

&#34;--system-ghc&#34;は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn&#39;t built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type &#39;quit&#39; to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option &#39;-std=c++11&#39;


-stdオプションで&#34;c++11&#34;を指定しても、認識してくれません。
本家のサイトによると、&#39;-std=c++11&#39;オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの&#34;/cygdrive&#34;パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の&#34;/cygdrive&#34;から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn&#39;t find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn&#39;t match expected type&#34;エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると&#34;Couldn&#39;t match expected type: xxxxx&#34;とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/08/183215</id><title type="text">就職しました</title><updated>2015-10-08T18:32:15+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/08/183215"/><summary type="html">本日、Tsuru Capitalのポジションを得ました。 Tsuru Capitalはデリバティブの取引を行っている企業で、自動株取引の会社ではありません。取引に関わっている10人のメンバーのうち、創始者であるSimonを除く全員がHaskellerで、取引状況の分析や一部の取引の自動化など、あらゆるところにHaskellを使っているのが大きな特徴です。日本では数少ない、Haskellをメインに使っている企業の一つでもあります。 東京、シンガポール、バンクーバーにオフィスがあり、東京には私を含む5人の開発者と事務担当、Simonと愛犬テトがいます。 オフィスはオランダヒルズ森タワーRoPにあり…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F</id><title type="text">stack コマンドを使ってみた</title><updated>2015-10-06T02:27:04+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2015/06/15/stack_%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F"/><summary type="html">6月9日に FP Complete から stack コマンドがリリースされました（公式ブログ）。とりあえずブログ1文目を訳すとこんな感じです。 stack は新しく、完璧で、クロスプラットフォームで動作する開発ツールで、新参も古参も対象にしていて、コンパイラーをインストールしてセットアップして、必要なパッケージをインストールして、ビルドして、プロジェクト内の1つ以上のパッケージのテストをするもしくはベンチマークを取るためのものです。 stack is a new, complete, cross-platform development tool aimed at both new and …</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に&#34;password:&#34;というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に&#34;-listen tcp&#34;オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>